%!PS-Adobe-3.0
%%Creator: groff version 1.10
%%CreationDate: Tue Jan 14 15:41:19 1997
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%+ font Symbol
%%DocumentSuppliedResources: procset grops 1.10 0
%%Pages: 28
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.10 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
%%IncludeResource: font Symbol
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 9/Times-Bold@0 SF 10.562 -6.496(NN AA)
72 84 T -8.494(MM)6.496 G -6.001(EE)8.494 G F0(perltoot \255 T)108 96 Q
(om')-.8 E 2.5(so)-.55 G(bject-oriented tutorial for perl \(re)-2.5 E
2.5(v0)-.25 G(.6\))-2.5 E F1 -6.496(DD)72 112.8 S -6.001(EE)6.496 G
-5.002(SS)6.001 G -6.496(CC)5.002 G -6.496(RR)6.496 G -3.499(II)6.496 G
-5.497(PP)3.499 G -6.001(TT)5.497 G -3.499(II)6.001 G -7(OO)3.499 G
-6.496(NN)7 G F0 1.212
(Object-oriented programming is a big seller these days.)108 124.8 R
1.212(Some managers w)6.212 F 1.212(ould rather ha)-.1 F 1.512 -.15
(ve o)-.2 H 1.212(bjects than).15 F(sliced bread.)108 136.8 Q(Wh)5 E 2.5
(yi)-.05 G 2.5(st)-2.5 G 2.5(hat? What')-2.5 F 2.5(ss)-.55 G 2.5(os)-2.5
G(pecial about an object?)-2.5 E(Just what)5 E/F2 10/Times-Italic@0 SF
(is)2.5 E F0(an object an)2.5 E(yw)-.15 E(ay?)-.1 E .871
(An object is nothing b)108 153.6 R .872(ut a w)-.2 F .872
(ay of tucking a)-.1 F -.1(wa)-.15 G 3.372(yc).1 G(omple)-3.372 E 3.372
(xb)-.15 G(eha)-3.372 E .872(viours into a neat little easy-to-use b)-.2
F(undle.)-.2 E .191
(\(This is what professors call abstraction.\) Smart people who ha)108
165.6 R .491 -.15(ve n)-.2 H .191(othing to do b).15 F .191
(ut sit around for weeks on)-.2 F 1.042
(end \214guring out really hard problems mak)108 177.6 R 3.542(et)-.1 G
1.042(hese nifty objects that e)-3.542 F -.15(ve)-.25 G 3.543(nr).15 G
-.15(eg)-3.543 G 1.043(ular people can use. \(This is).15 F 1.169
(what professors call softw)108 189.6 R 1.169(are reuse.\))-.1 F 1.169
(Users \(well, programmers\) can play with this little b)6.169 F 1.168
(undle all the)-.2 F(y)-.15 E -.1(wa)108 201.6 S .339(nt, b).1 F .339
(ut the)-.2 F 2.839(ya)-.15 G(ren')-2.839 E 2.839(tt)-.18 G 2.839(oo)
-2.839 G .339(pen it up and mess with the insides.)-2.839 F .339
(Just lik)5.339 F 2.839(ea)-.1 G 2.839(ne)-2.839 G(xpensi)-2.989 E .639
-.15(ve p)-.25 H .339(iece of hardw).15 F .339(are, the)-.1 F
(contract says that you v)108 213.6 Q(oid the w)-.2 E
(arranty if you muck with the co)-.1 E -.15(ve)-.15 G 3.6 -.55(r. S).15
H 2.5(od).55 G(on')-2.5 E 2.5(td)-.18 G 2.5(ot)-2.5 G(hat.)-2.5 E .227
(The heart of objects is the class, a protected little pri)108 230.4 R
-.25(va)-.25 G .226(te namespace full of data and functions.).25 F 2.726
(Ac)5.226 G .226(lass is a)-2.726 F .805
(set of related routines that addresses some problem area.)108 242.4 R
-1.1(Yo)5.806 G 3.306(uc)1.1 G .806(an think of it as a user)-3.306 F
.806(-de\214ned type.)-.2 F(The)5.806 E 2.359(Perl package mechanism, a\
lso used for more traditional modules, is used for class modules as wel\
l.)108 254.4 R(Objects `)108 266.4 Q(`li)-.74 E -.15(ve)-.25 G 1.48 -.74
('' i).15 H 2.5(nac).74 G(lass, meaning that the)-2.5 E 2.5(yb)-.15 G
(elong to some package.)-2.5 E .307(More often than not, the class pro)
108 283.2 R .308(vides the user with little b)-.15 F 2.808
(undles. These)-.2 F -.2(bu)2.808 G .308(ndles are objects.).2 F(The)
5.308 E 2.808(yk)-.15 G(no)-2.808 E(w)-.25 E 1.252(whose class the)108
295.2 R 3.751(yb)-.15 G 1.251(elong to, and ho)-3.751 F 3.751(wt)-.25 G
3.751(ob)-3.751 G(eha)-3.751 E -.15(ve)-.2 G 6.251(.U).15 G 1.251
(sers ask the class to do something, lik)-6.251 F 3.751(e`)-.1 G(`gi)
-4.491 E 1.551 -.15(ve m)-.25 H 3.751(ea).15 G(n)-3.751 E(object.)108
307.2 Q 4.523 -.74('' O)-.7 H 3.043(rt).74 G(he)-3.043 E 3.043(yc)-.15 G
.543(an ask one of these objects to do something.)-3.043 F .543
(Asking a class to do something for you is)5.543 F 1.378(calling a)108
319.2 R F2 1.378(class method)3.878 F F0 6.378(.A)C 1.378
(sking an object to do something for you is calling an)-6.378 F F2 1.377
(object method)3.877 F F0 6.377(.A)C(sking)-6.377 E .012
(either a class \(usually\) or an object \(sometimes\) to gi)108 331.2 R
.313 -.15(ve y)-.25 H .013(ou back an object is calling a).15 F F2
(constructor)2.513 E F0 2.513(,w)C .013(hich is)-2.513 F
(just a kind of method.)108 343.2 Q(That')108 360 Q 3.812(sa)-.55 G
1.312(ll well and good, b)-3.812 F 1.312(ut ho)-.2 F 3.812(wi)-.25 G
3.812(sa)-3.812 G 3.812(no)-3.812 G 1.312(bject dif)-3.812 F 1.312
(ferent from an)-.25 F 3.812(yo)-.15 G 1.312(ther Perl data type?)-3.812
F 1.312(Just what is an)6.312 F(object)108 372 Q F2 -.37(re)2.529 G
(ally).37 E F0 2.529(;t)C .029(hat is, what')-2.529 F 2.529(si)-.55 G
.029(ts fundamental type?)-2.529 F .03
(The answer to the \214rst question is easy)5.029 F 5.03(.A)-.65 G 2.53
(no)-5.03 G .03(bject is dif-)-2.53 F .589(ferent from an)108 384 R
3.089(yo)-.15 G .589(ther data type in Perl in one and only one w)-3.089
F .589(ay: you may dereference it using not merely)-.1 F .383
(string or numeric subscripts as with simple arrays and hashes, b)108
396 R .384(ut with named subroutine calls.)-.2 F .384(In a w)5.384 F
(ord,)-.1 E(with)108 408 Q F2(methods)2.5 E F0(.)A 1.064
(The answer to the second question is that it')108 424.8 R 3.564(sar)
-.55 G 1.064(eference, and not just an)-3.564 F 3.563(yr)-.15 G 1.063
(eference, mind you, b)-3.563 F 1.063(ut one)-.2 F .956
(whose referent has been)108 436.8 R F2(bless)3.456 E F0 .956
(\(\)ed into a particular class \(read: package\).)B .956
(What kind of reference?)5.956 F -.8(We)5.956 G(ll,).8 E .072
(the answer to that one is a bit less concrete.)108 448.8 R(That')5.071
E 2.571(sb)-.55 G .071
(ecause in Perl the designer of the class can emplo)-2.571 F 2.571(ya)
-.1 G -.15(ny)-2.571 G .779(sort of reference the)108 460.8 R(y')-.15 E
3.279(dl)-.5 G(ik)-3.279 E 3.279(ea)-.1 G 3.279(st)-3.279 G .779
(he underlying intrinsic data type.)-3.279 F .779(It could be a scalar)
5.779 F 3.279(,a)-.4 G 3.279(na)-3.279 G(rray)-3.279 E 3.279(,o)-.65 G
3.279(rah)-3.279 G(ash)-3.279 E 3.163(reference. It)108 472.8 R .663
(could e)3.163 F -.15(ve)-.25 G 3.163(nb).15 G 3.162(eac)-3.163 G .662
(ode reference.)-3.162 F .662(But because of its inherent \215e)5.662 F
(xibility)-.15 E 3.162(,a)-.65 G 3.162(no)-3.162 G .662
(bject is usually a)-3.162 F(hash reference.)108 484.8 Q F1 -6.496(CC)72
501.6 S 5.576 -3.994(rr ee)6.496 H -4.498(aa)3.994 G -2.995(tt)4.498 G
-2.5(ii)2.995 G -5.002(nn)2.5 G 8.996 -4.498(gg aa C)5.002 H(Cl)-1.998 E
(la)-2.5 E(as)-4.498 E(ss)-3.499 E(s)-3.499 E F0 .997
(Before you create a class, you need to decide what to name it.)108
513.6 R(That')5.997 E 3.497(sb)-.55 G .998
(ecause the class \(package\) name)-3.497 F(go)108 525.6 Q -.15(ve)-.15
G 1.467(rns the name of the \214le used to house it, just as with re).15
F 1.466(gular modules.)-.15 F 1.466(Then, that class \(package\))6.466 F
.226(should pro)108 537.6 R .226(vide one or more w)-.15 F .226
(ays to generate objects.)-.1 F(Finally)5.226 E 2.726(,i)-.65 G 2.726
(ts)-2.726 G .226(hould pro)-2.726 F .227(vide mechanisms to allo)-.15 F
2.727(wu)-.25 G(sers)-2.727 E
(of its objects to indirectly manipulate these objects from a distance.)
108 549.6 Q -.15(Fo)108 566.4 S 2.556(re).15 G .056(xample, let')-2.706
F 2.556(sm)-.55 G(ak)-2.556 E 2.556(eas)-.1 G .056
(imple Person class module.)-2.556 F .056
(It gets stored in the \214le Person.pm.)5.056 F .055(If it were called)
5.055 F 4.144(aH)108 578.4 S(app)-4.144 E 1.644(y::Person class, it w)
-.1 F 1.645(ould be stored in the \214le Happ)-.1 F 1.645
(y/Person.pm, and its package w)-.1 F 1.645(ould become)-.1 F(Happ)108
590.4 Q .372(y::Person instead of just Person.)-.1 F .371
(\(On a personal computer not running Unix or Plan 9, b)5.371 F .371
(ut something)-.2 F(lik)108 602.4 Q 4.271(eM)-.1 G 1.772
(acOS or VMS, the directory separator may be dif)-4.271 F 1.772
(ferent, b)-.25 F 1.772(ut the principle is the same.\))-.2 F 1.772
(Do not)6.772 F .574(assume an)108 614.4 R 3.074(yf)-.15 G .574
(ormal relationship between modules based on their directory names.)
-3.074 F .574(This is merely a group-)5.574 F(ing con)108 626.4 Q -.15
(ve)-.4 G(nience, and has no ef).15 E(fect on inheritance, v)-.25 E
(ariable accessibility)-.25 E 2.5(,o)-.65 G 2.5(ra)-2.5 G -.15(ny)-2.5 G
(thing else.).15 E -.15(Fo)108 643.2 S 3.278(rt).15 G .778
(his module we aren')-3.278 F 3.279(tg)-.18 G .779(oing to use Exporter)
-3.279 F 3.279(,b)-.4 G .779(ecause we')-3.279 F .779(re a well-beha)-.5
F -.15(ve)-.2 G 3.279(dc).15 G .779(lass module that doesn')-3.279 F(t)
-.18 E -.15(ex)108 655.2 S .204(port an).15 F .204(ything at all.)-.15 F
.204(In order to manuf)5.204 F .204(acture objects, a class needs to ha)
-.1 F .504 -.15(ve a)-.2 H F2 .204(constructor method)2.854 F F0 5.203
(.A)C(con-)-2.5 E 1.213(structor gi)108 667.2 R -.15(ve)-.25 G 3.713(sy)
.15 G 1.213(ou back not just a re)-3.713 F 1.214(gular data type, b)-.15
F 1.214(ut a brand-ne)-.2 F 3.714(wo)-.25 G 1.214(bject in that class.)
-3.714 F 1.214(This magic is)6.214 F(tak)108 679.2 Q .804
(en care of by the)-.1 F F2(bless\(\))3.304 E F0 .804(function, whose s\
ole purpose is to enable its referent to be used as an object.)3.304 F(\
Remember: being an object really means nothing more than that methods m\
ay no)108 691.2 Q 2.5(wb)-.25 G 2.5(ec)-2.5 G(alled ag)-2.5 E(ainst it.)
-.05 E .628(While a constructor may be named an)108 708 R .628
(ything you')-.15 F 3.128(dl)-.5 G(ik)-3.128 E .628
(e, most Perl programmers seem to lik)-.1 F 3.129(et)-.1 G 3.129(oc)
-3.129 G .629(all theirs)-3.129 F F2(ne)108 720 Q(w\(\))-.15 E F0 6.071
(.H)C -.25(ow)-6.071 G -2.15 -.25(ev e).25 H -.4(r,).25 G F2(ne)3.971 E
(w\(\))-.15 E F0 1.071(is not a reserv)3.571 F 1.071(ed w)-.15 F 1.07
(ord, and a class is under no oblig)-.1 F 1.07(ation to supply such.)
-.05 F(Some)6.07 E 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E
(1)189.145 E EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E(programmers ha)108 84 Q .3 -.15(ve a)-.2
H(lso been kno).15 E(wn to use a function with the same name as the cla\
ss as the constructor)-.25 E(.)-.55 E/F1 10/Times-Bold@0 SF -7.778(OO)
108 106.8 S -5.558(bb)7.778 G -3.328(jj)5.558 G -4.438(ee)3.328 G -4.438
(cc)4.438 G 6.656 -3.328(tt R)4.438 H(Re)-3.89 E(ep)-4.438 E(pr)-5.558 E
-.18(re)-4.438 G(es)-4.258 E(se)-3.888 E(en)-4.438 E(nt)-5.558 E(ta)
-3.328 E(at)-4.998 E(ti)-3.328 E(io)-2.778 E(on)-4.998 E(n)-5.558 E F0
.471(By f)108 123.6 R .472
(ar the most common mechanism used in Perl to represent a P)-.1 F .472
(ascal record, a C struct, or a C)-.15 F/F2 8/Times-Roman@0 SF -1(++)-1
-1.2 O F0 .472(class an)2.972 1.2 N(anon)108 135.6 Q .298(ymous hash.)
-.15 F(That')5.298 E 2.798(sb)-.55 G .298
(ecause a hash has an arbitrary number of data \214elds, each con)-2.798
F -.15(ve)-.4 G .298(niently accessed).15 F
(by an arbitrary name of your o)108 147.6 Q(wn de)-.25 E(vising.)-.25 E
(If you were just doing a simple struct-lik)108 164.4 Q 2.5(ee)-.1 G
(mulation, you w)-2.5 E(ould lik)-.1 E(ely go about it something lik)-.1
E 2.5(et)-.1 G(his:)-2.5 E/F3 10/Courier@0 SF($rec = {)132 181.2 Q 6
(name =>)156 193.2 R("Jason",)6 E 12(age =>)156 205.2 R(23,)6 E
(peers => [ "Norbert", "Rhys", "Phineas"],)156 217.2 Q(};)132 229.2 Q F0
(If you felt lik)108 253.2 Q 2.5(ei)-.1 G
(t, you could add a bit of visual distinction by up-casing the hash k)
-2.5 E -.15(ey)-.1 G(s:).15 E F3($rec = {)132 270 Q 6(NAME =>)156 282 R
("Jason",)6 E 12(AGE =>)156 294 R(23,)6 E
(PEERS => [ "Norbert", "Rhys", "Phineas"],)156 306 Q(};)132 318 Q F0
.056(And so you could get at)108 342 R F3($rec->{NAME})2.556 E F0 .056
(to \214nd `)2.556 F(`Jason')-.74 E .057(', or)-.74 F F3 .057(@{ $rec)
2.557 F F0 .057(->{PEERS} } to get at `)B(`Norbert')-.74 E(',)-.74 E
-.74(``)108 354 S(Rh).74 E(ys')-.05 E .8(', and `)-.74 F(`Phineas')-.74
E 3.3('. \(Ha)-.74 F 1.1 -.15(ve y)-.2 H .799(ou e).15 F -.15(ve)-.25 G
3.299(rn).15 G .799(oticed ho)-3.299 F 3.299(wm)-.25 G(an)-3.299 E 3.299
(y2)-.15 G(3-year)-3.299 E .799(-old programmers seem to be named)-.2 F
-.74(``)108 366 S(Jason').74 E 2.5('t)-.74 G(hese days? :\255\))-2.5 E
.578(This same model is often used for classes, although it is not cons\
idered the pinnacle of programming pro-)108 382.8 R .193
(priety for folks from outside the class to come w)108 394.8 R .193
(altzing into an object, brazenly accessing its data members)-.1 F
(directly)108 406.8 Q 5.182(.G)-.65 G .182(enerally speaking, an object\
 should be considered an opaque cookie that you use)-5.182 F/F4 10
/Times-Italic@0 SF .182(object methods)2.682 F F0 .35(to access.)108
418.8 R -.6(Vi)5.35 G(sually).6 E 2.85(,m)-.65 G .35(ethods look lik)
-2.85 F 2.85(ey)-.1 G(ou')-2.85 E .349(re deref)-.5 F .349
(\214ng a reference using a function name instead of brack-)-.25 F
(ets or braces.)108 430.8 Q F1 -7.218(CC)108 453.6 S -2.778(ll)7.218 G
-4.998(aa)2.778 G -3.888(ss)4.998 G 7.776 -3.888(ss II)3.888 H -5.558
(nn)3.888 G -3.328(tt)5.558 G -4.438(ee)3.328 G -4.438(rr)4.438 G -3.328
(ff)4.438 G -4.998(aa)3.328 G -4.438(cc)4.998 G -4.438(ee)4.438 G F0
(Some languages pro)108 470.4 Q(vide a formal syntactic interf)-.15 E
(ace to a class')-.1 E 2.501(sm)-.55 G .001(ethods, b)-2.501 F .001
(ut Perl does not.)-.2 F .001(It relies on you)5.001 F .914
(to read the documentation of each class.)108 482.4 R .913
(If you try to call an unde\214ned method on an object, Perl w)5.913 F
(on')-.1 E(t)-.18 E 1.49(complain, b)108 494.4 R 1.49
(ut the program will trigger an e)-.2 F 1.491(xception while it')-.15 F
3.991(sr)-.55 G 3.991(unning. Lik)-3.991 F -.25(ew)-.1 G 1.491
(ise, if you call a method).25 F -.15(ex)108 506.4 S .345
(pecting a prime number as its ar).15 F .345(gument with an e)-.18 F
-.15(ve)-.25 G 2.844(no).15 G .344(ne instead, you can')-2.844 F 2.844
(te)-.18 G .344(xpect the compiler to catch)-2.994 F 2.5(this. \(W)108
518.4 R(ell, you can e)-.8 E(xpect it all you lik)-.15 E(e, b)-.1 E
(ut it')-.2 E 2.5(sn)-.55 G(ot going to happen.\))-2.5 E(Let')108 535.2
Q 3.787(ss)-.55 G 1.287(uppose you ha)-3.787 F 1.587 -.15(ve a w)-.2 H
1.287(ell-educated user of your Person class, someone who has read the \
docs that).15 F -.15(ex)108 547.2 S(plain the prescribed interf).15 E
2.5(ace. Here')-.1 F 2.5(sh)-.55 G .5 -.25(ow t)-2.5 H(he).25 E 2.5(ym)
-.15 G(ight use the Person class:)-2.5 E F3(use Person;)132 564 Q
($him = Person->new\(\);)132 588 Q($him->name\("Jason"\);)132 600 Q
($him->age\(23\);)132 612 Q
($him->peers\( "Norbert", "Rhys", "Phineas" \);)132 624 Q
(push @All_Recs, $him;)132 648 Q 6(#s)12 G
(ave object in array for later)-6 E
(printf "%s is %d years old.\\n", $him->name, $him->age;)132 672 Q
(print "His peers are: ", join\(", ", $him->peers\), "\\n";)132 684 Q
(printf "Last rec's name is %s\\n", $All_Recs[-1]->name;)132 708 Q F0
157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(2)189.145 E EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E .332
(As you can see, the user of the class doesn')108 84 R 2.832(tk)-.18 G
(no)-2.832 E 2.832(w\()-.25 G .332(or at least, has no b)-2.832 F .332
(usiness paying attention to the f)-.2 F(act\))-.1 E 1.026
(that the object has one particular implementation or another)108 96 R
6.026(.T)-.55 G 1.026(he interf)-6.026 F 1.026
(ace to the class and its objects is)-.1 F -.15(ex)108 108 S(clusi).15 E
-.15(ve)-.25 G(ly via methods, and that').15 E 2.5(sa)-.55 G
(ll the user of the class should e)-2.5 E -.15(ve)-.25 G 2.5(rp).15 G
(lay with.)-2.5 E/F1 10/Times-Bold@0 SF -7.218(CC)108 130.8 S -4.998(oo)
7.218 G -5.558(nn)4.998 G -3.888(ss)5.558 G -3.328(tt)3.888 G -4.438(rr)
3.328 G -5.558(uu)4.438 G -4.438(cc)5.558 G -3.328(tt)4.438 G -4.998(oo)
3.328 G -4.438(rr)4.998 G 7.776 -3.888(ss a)4.438 H(an)-1.11 E(nd)-5.558
E 2.5(dI)-5.558 G(In)-6.388 E(ns)-5.558 E(st)-3.888 E(ta)-3.328 E(an)
-4.998 E(nc)-5.558 E(ce)-4.438 E 2.5(eM)-4.438 G(Me)-11.938 E(et)-4.438
E(th)-3.328 E(ho)-5.558 E(od)-4.998 E(ds)-5.558 E(s)-3.888 E F0(Still,)
108 147.6 Q/F2 10/Times-Italic@0 SF(someone)2.58 E F0 .08(has to kno)
2.58 F 2.58(ww)-.25 G(hat')-2.58 E 2.58(si)-.55 G 2.58(nt)-2.58 G .08
(he object.)-2.58 F .079(And that someone is the class.)5.079 F .079
(It implements methods that)5.079 F 1.117
(the programmer uses to access the object.)108 159.6 R(Here')6.117 E
3.617(sh)-.55 G 1.617 -.25(ow t)-3.617 H 3.617(oi).25 G 1.117
(mplement the Person class using the standard)-3.617 F 1.059
(hash-ref-as-an-object idiom.)108 171.6 R -.8(We)6.059 G -.1('l).8 G
3.559(lm).1 G(ak)-3.559 E 3.559(eac)-.1 G 1.059(lass method called)
-3.559 F F2(ne)3.559 E(w\(\))-.15 E F0 1.058(to act as the constructor)
3.559 F 3.558(,a)-.4 G 1.058(nd three)-3.558 F .846
(object methods called)108 183.6 R F2(name\(\))3.347 E F0(,)A F2 -.1
(age)3.347 G(\(\)).1 E F0 3.347(,a)C(nd)-3.347 E F2(peer)3.347 E(s\(\))
-.1 E F0 .847(to get at per)3.347 F .847(-object data hidden a)-.2 F -.1
(wa)-.15 G 3.347(yi).1 G 3.347(no)-3.347 G .847(ur anon)-3.347 F(ymous)
-.15 E(hash.)108 195.6 Q/F3 10/Courier@0 SF(package Person;)132 212.4 Q
(use strict;)132 224.4 Q
(##################################################)132 248.4 Q
(## the object constructor \(simplistic version\))132 260.4 Q(##)12 E
(##################################################)132 272.4 Q
(sub new {)132 284.4 Q(my $self)156 296.4 Q 6(={)12 G(};)-6 E 12
($self->{NAME} =)156 308.4 R(undef;)6 E 18($self->{AGE} =)156 320.4 R
(undef;)6 E 6($self->{PEERS} =)156 332.4 R([];)6 E 60(bless\($self\); #)
156 344.4 R(but see below)6 E(return $self;)156 356.4 Q(})132 368.4 Q
(##############################################)132 392.4 Q
(## methods to access per-object data)132 404.4 Q(##)48 E 246(## ##)132
416.4 R(## With args, they set the value.)132 428.4 Q 6(Without ##)12 F
(## any, they only retrieve it/them.)132 440.4 Q(##)54 E
(##############################################)132 452.4 Q(sub name {)
132 476.4 Q(my $self = shift;)156 488.4 Q
(if \(@_\) { $self->{NAME} = shift })156 500.4 Q(return $self->{NAME};)
156 512.4 Q(})132 524.4 Q(sub age {)132 548.4 Q(my $self = shift;)156
560.4 Q(if \(@_\) { $self->{AGE} = shift })156 572.4 Q
(return $self->{AGE};)156 584.4 Q(})132 596.4 Q(sub peers {)132 620.4 Q
(my $self = shift;)156 632.4 Q(if \(@_\) { @{ $self->{PEERS} } = @_ })
156 644.4 Q(return @{ $self->{PEERS} };)156 656.4 Q(})132 668.4 Q 6
(1; #)132 692.4 R(so the require or use succeeds)6 E F0 -.8(We)108 716.4
S -1.65 -.5('v e).8 H .608(created three methods to access an object')
3.608 F 3.108(sd)-.55 G(ata,)-3.108 E F2(name\(\))3.107 E F0(,)A F2 -.1
(age)3.107 G(\(\)).1 E F0 3.107(,a)C(nd)-3.107 E F2(peer)3.107 E(s\(\))
-.1 E F0 5.607(.T)C .607(hese are all substan-)-5.607 F .098
(tially similar)108 728.4 R 5.098(.I)-.55 G 2.598(fc)-5.098 G .099
(alled with an ar)-2.598 F .099(gument, the)-.18 F 2.599(ys)-.15 G .099
(et the appropriate \214eld; otherwise the)-2.599 F 2.599(yr)-.15 G .099
(eturn the v)-2.599 F .099(alue held)-.25 F 157.755(8/Jan/97 perl)72 768
R(5.003, patch 11)2.5 E(3)189.145 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E(by that \214eld, meaning the v)108 84 Q
(alue of that hash k)-.25 E -.15(ey)-.1 G(.)-.5 E/F1 10/Times-Bold@0 SF
-6.108(PP)108 106.8 S -2.778(ll)6.108 G -4.998(aa)2.778 G -5.558(nn)
4.998 G -5.558(nn)5.558 G -2.778(ii)5.558 G -5.558(nn)2.778 G 9.996
-4.998(gg f)5.558 H -.25(fo)1.67 G(or)-4.748 E 2.5(rt)-4.438 G(th)-5.828
E(he)-5.558 E 2.5(eF)-4.438 G(Fu)-8.608 E(ut)-5.558 E(tu)-3.328 E(ur)
-5.558 E -.18(re)-4.438 G(e:)-4.258 E 2.5(:B)-3.328 G(Be)-9.168 E(et)
-4.438 E(tt)-3.328 E(te)-3.328 E(er)-4.438 E 2.5(rC)-4.438 G(Co)-9.718 E
(on)-4.998 E(ns)-5.558 E(st)-3.888 E(tr)-3.328 E(ru)-4.438 E(uc)-5.558 E
(ct)-4.438 E(to)-3.328 E(or)-4.998 E(rs)-4.438 E(s)-3.888 E F0(Ev)108
123.6 Q 1.133(en though at this point you may not e)-.15 F -.15(ve)-.25
G 3.632(nk).15 G(no)-3.632 E 3.632(ww)-.25 G 1.132
(hat it means, someday you')-3.632 F 1.132(re going to w)-.5 F 1.132
(orry about)-.1 F 2.891(inheritance. \(Y)108 135.6 R .391
(ou can safely ignore this for no)-1.1 F 2.891(wa)-.25 G .391(nd w)
-2.891 F .391(orry about it later if you')-.1 F 2.891(dl)-.5 G(ik)-2.891
E 2.891(e.\) T)-.1 F 2.891(oe)-.8 G .391(nsure that this)-2.891 F 1.152
(all w)108 147.6 R 1.152(orks out smoothly)-.1 F 3.652(,y)-.65 G 1.152
(ou must use the double-ar)-3.652 F 1.152(gument form of)-.18 F/F2 10
/Times-Italic@0 SF(bless\(\))3.652 E F0 6.152(.T)C 1.152(he second ar)
-6.152 F 1.151(gument is the)-.18 F .885
(class into which the referent will be blessed.)108 159.6 R .885
(By not assuming our o)5.885 F .885(wn class as the def)-.25 F .885
(ault second ar)-.1 F(gu-)-.18 E
(ment and instead using the class passed into us, we mak)108 171.6 Q 2.5
(eo)-.1 G(ur constructor inheritable.)-2.5 E .033(While we')108 188.4 R
.033(re at it, let')-.5 F 2.533(sm)-.55 G(ak)-2.533 E 2.533(eo)-.1 G
.033(ur constructor a bit more \215e)-2.533 F 2.533(xible. Rather)-.15 F
.032(than being uniquely a class method,)2.533 F(we')108 200.4 Q
(ll set it up so that it can be called as either a class method)-.1 E F2
(or)2.5 E F0(an object method.)2.5 E(That w)5 E(ay you can say:)-.1 E/F3
10/Courier@0 SF 6($me =)132 217.2 R(Person->new\(\);)6 E
($him = $me->new\(\);)132 229.2 Q F0 2.27 -.8(To d)108 253.2 T 3.17(ot)
.8 G .67(his, all we ha)-3.17 F .97 -.15(ve t)-.2 H 3.17(od).15 G 3.17
(oi)-3.17 G 3.17(sc)-3.17 G .67(heck whether what w)-3.17 F .67
(as passed in w)-.1 F .67(as a reference or not.)-.1 F .67
(If so, we were)5.67 F(in)108 265.2 Q -.2(vo)-.4 G -.1(ke).2 G 2.719(da)
.1 G 2.719(sa)-2.719 G 2.719(no)-2.719 G .219
(bject method, and we need to e)-2.719 F .218
(xtract the package \(class\) using the)-.15 F F2 -.37(re)2.718 G(f\(\))
.37 E F0 2.718(function. If)2.718 F .218(not, we)2.718 F(just use the s\
tring passed in as the package name for blessing our referent.)108 277.2
Q F3(sub new {)132 294 Q(my $proto = shift;)156 306 Q
(my $class = ref\($proto\))156 318 Q/F4 10/Symbol SF<efef>6 E F3
($proto;)6 E(my $self)156 330 Q 6(={)12 G(};)-6 E 12($self->{NAME} =)156
342 R(undef;)6 E 18($self->{AGE} =)156 354 R(undef;)6 E 6
($self->{PEERS} =)156 366 R([];)6 E(bless \($self, $class\);)156 378 Q
(return $self;)156 390 Q(})132 402 Q F0(That')108 426 Q 3.201(sa)-.55 G
.701(bout all there is for constructors.)-3.201 F .701
(These methods bring objects to life, returning neat little opaque)5.701
F -.2(bu)108 438 S
(ndles to the user to be used in subsequent method calls.).2 E F1 -7.218
(DD)108 460.8 S -4.438(ee)7.218 G -3.888(ss)4.438 G -3.328(tt)3.888 G
-4.438(rr)3.328 G -5.558(uu)4.438 G -4.438(cc)5.558 G -3.328(tt)4.438 G
-4.998(oo)3.328 G -4.438(rr)4.998 G -3.888(ss)4.438 G F0(Ev)108 477.6 Q
.996(ery story has a be)-.15 F .996(ginning and an end.)-.15 F .996
(The be)5.996 F .996(ginning of the object')-.15 F 3.496(ss)-.55 G .996
(tory is its constructor)-3.496 F 3.495(,e)-.4 G(xplicitly)-3.645 E .229
(called when the object comes into e)108 489.6 R 2.729(xistence. But)
-.15 F .23(the ending of its story is the)2.729 F F2(destructor)2.73 E
F0 2.73(,am)C .23(ethod implic-)-2.73 F .547
(itly called when an object lea)108 501.6 R -.15(ve)-.2 G 3.047(st).15 G
.547(his life.)-3.047 F(An)5.547 E 3.047(yp)-.15 G(er)-3.047 E .547
(-object clean-up code is placed in the destructor)-.2 F 3.047(,w)-.4 G
(hich)-3.047 E(must \(in Perl\) be called)108 513.6 Q/F5 9/Times-Roman@0
SF(DESTR)2.5 E -.45(OY)-.36 G F0(.).45 E .454(If constructors can ha)108
530.4 R .754 -.15(ve a)-.2 H .455(rbitrary names, then wh).15 F 2.955
(yn)-.05 G .455(ot destructors?)-2.955 F .455
(Because while a constructor is e)5.455 F(xplic-)-.15 E .945
(itly called, a destructor is not.)108 542.4 R .944
(Destruction happens automatically via Perl')5.944 F 3.444(sg)-.55 G
.944(arbage collection \()-3.494 F F5(GC)A F0 3.444(\)s)C(ys-)-3.444 E
.058(tem, which is a quick b)108 554.4 R .059(ut some)-.2 F .059
(what lazy reference-based)-.25 F F5(GC)2.559 E F0 2.559(system. T)2.559
F 2.559(ok)-.8 G(no)-2.559 E 2.559(ww)-.25 G .059
(hat to call, Perl insists that)-2.559 F(the destructor be named)108
566.4 Q F5(DESTR)2.5 E -.45(OY)-.36 G F0(.).45 E(Wh)108 583.2 Q 3.086
(yi)-.05 G(s)-3.086 E F5(DESTR)3.086 E -.45(OY)-.36 G F0 .586
(in all caps?)3.536 F .586(Perl on occasion uses purely upper)5.586 F
.586(-case function names as a con)-.2 F -.15(ve)-.4 G .585(ntion to).15
F .083(indicate that the function will be automatically called by Perl \
in some w)108 595.2 R(ay)-.1 E 5.083(.O)-.65 G .083
(thers that are called implicitly)-5.083 F(include)108 607.2 Q F5(BEGIN)
2.821 E F0(,)A F5(END)2.821 E F0(,)A F5 -.495(AU)2.821 G -.162(TO).495 G
(LO).162 E(AD)-.315 E F0 2.821(,p)C .32
(lus all methods used by tied objects, described in the)-2.821 F F2
(perltie)2.82 E F0(manpage.)2.82 E .48
(In really good object-oriented programming languages, the user doesn')
108 624 R 2.98(tc)-.18 G .48(are when the destructor is called.)-2.98 F
1.46(It just happens when it')108 636 R 3.96(ss)-.55 G 1.46(upposed to.)
-3.96 F 1.459(In lo)6.46 F(w-le)-.25 E -.15(ve)-.25 G 3.959(ll).15 G
1.459(anguages without an)-3.959 F(y)-.15 E F5(GC)3.959 E F0 1.459
(at all, there')3.959 F 3.959(sn)-.55 G 3.959(ow)-3.959 G 1.459(ay to)
-4.059 F .014
(depend on this happening at the right time, so the programmer must e)
108 648 R .014(xplicitly call the destructor to clean up)-.15 F .204
(memory and state, crossing their \214ngers that it')108 660 R 2.704(st)
-.55 G .204(he right time to do so.)-2.704 F(Unlik)7.704 E 2.704(eC)-.1
G/F6 8/Times-Roman@0 SF -1(++)-3.704 -1.2 O F0 2.704(,a)1.2 K 2.704(no)
-2.704 G .204(bject destructor is)-2.704 F .358(nearly ne)108 672 R -.15
(ve)-.25 G 2.858(rn).15 G .358(eeded in Perl, and e)-2.858 F -.15(ve)
-.25 G 2.858(nw).15 G .358(hen it is, e)-2.858 F .359(xplicit in)-.15 F
-.2(vo)-.4 G .359(cation is uncalled for).2 F 5.359(.I)-.55 G 2.859(nt)
-5.359 G .359(he case of our Per)-2.859 F(-)-.2 E(son class, we don')108
684 Q 2.5(tn)-.18 G(eed a destructor because Perl tak)-2.5 E
(es care of simple matters lik)-.1 E 2.5(em)-.1 G(emory deallocation.)
-2.5 E 1.283(The only situation where Perl')108 700.8 R 3.783(sr)-.55 G
(eference-based)-3.783 E F5(GC)3.783 E F0 -.1(wo)3.783 G(n').1 E 3.783
(tw)-.18 G 1.283(ork is when there')-3.883 F 3.783(sac)-.55 G 1.283
(ircularity in the data)-3.783 F(structure, such as:)108 712.8 Q 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(4)189.145 E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF
($this->{WHATEVER} = $this;)132 84 Q F0 .709
(In that case, you must delete the self-reference manually if you e)108
108 R .71(xpect your program not to leak memory)-.15 F(.)-.65 E 1.205
(While admittedly error)108 120 R 1.205
(-prone, this is the best we can do right no)-.2 F 5.005 -.65(w. N)-.25
H 1.205(onetheless, rest assured that when).65 F .71(your program is \
\214nished, its objects' destructors are all duly called.)108 132 R .71
(So you are guaranteed that an object)5.71 F/F2 10/Times-Italic@0 SF
-.15(ev)108 144 S(entually).15 E F0 .439(gets properly destro)2.939 F
.439(yed, e)-.1 F .438(xcept in the unique case of a program that ne)
-.15 F -.15(ve)-.25 G 2.938(re).15 G 2.938(xits. \(If)-3.088 F(you')
2.938 E .438(re run-)-.5 F .849
(ning Perl embedded in another application, this full)108 156 R/F3 9
/Times-Roman@0 SF(GC)3.35 E F0 .85
(pass happens a bit more frequently\212)3.35 F(whene)1.666 E -.15(ve)
-.25 G 3.35(ra).15 G(thread shuts do)108 168 Q(wn.\))-.25 E/F4 10
/Times-Bold@0 SF -7.778(OO)108 190.8 S -3.328(tt)7.778 G -5.558(hh)3.328
G -4.438(ee)5.558 G 8.876 -4.438(rr O)4.438 H(Ob)-3.34 E(bj)-5.558 E(je)
-3.328 E(ec)-4.438 E(ct)-4.438 E 2.5(tM)-3.328 G(Me)-11.938 E(et)-4.438
E(th)-3.328 E(ho)-5.558 E(od)-4.998 E(ds)-5.558 E(s)-3.888 E F0 .399
(The methods we')108 207.6 R .698 -.15(ve t)-.5 H(alk).15 E .398
(ed about so f)-.1 F .398(ar ha)-.1 F .698 -.15(ve e)-.2 H .398
(ither been constructors or else simple `).15 F .398(`data methods')-.74
F .398(', inter)-.74 F(-)-.2 E -.1(fa)108 219.6 S .071
(ces to data stored in the object.).1 F .072(These are a bit lik)5.072 F
2.572(ea)-.1 G 2.572(no)-2.572 G(bject')-2.572 E 2.572(sd)-.55 G .072
(ata members in the C)-2.572 F/F5 8/Times-Roman@0 SF -1(++)-1 -1.2 O F0
-.1(wo)2.572 1.2 O .072(rld, e).1 F .072(xcept that)-.15 F 1.314
(strangers don')108 231.6 R 3.814(ta)-.18 G 1.313(ccess them as data.)
-3.814 F 1.313(Instead, the)6.313 F 3.813(ys)-.15 G 1.313
(hould only access the object')-3.813 F 3.813(sd)-.55 G 1.313
(ata indirectly via its)-3.813 F 3.091(methods. This)108 243.6 R .592
(is an important rule: in Perl, access to an object')3.091 F 3.092(sd)
-.55 G .592(ata should)-3.092 F F2(only)3.092 E F0 .592
(be made through meth-)3.092 F(ods.)108 255.6 Q .125(Perl doesn')108
272.4 R 2.625(ti)-.18 G .125
(mpose restrictions on who gets to use which methods.)-2.625 F .125
(The public-v)5.125 F(ersus-pri)-.15 E -.25(va)-.25 G .125
(te distinction is).25 F .015(by con)108 284.4 R -.15(ve)-.4 G .015
(ntion, not syntax.).15 F(\(W)5.016 E .016
(ell, unless you use the Alias module described belo)-.8 F 2.516(wi)-.25
G 2.516(nt)-2.516 G .016(he section on)-2.516 F F2(/"Data)2.516 E
(Member)108 296.4 Q 2.911(sa)-.1 G 2.911(sV)-2.911 G(ariables)-4.021 E
F0 2.911(.\) Occasionally)B(you')2.911 E .411(ll see method names be)-.1
F .41(ginning or ending with an underscore or)-.15 F(tw)108 308.4 Q
2.605(o. This)-.1 F .106(marking is a con)2.605 F -.15(ve)-.4 G .106
(ntion indicating that the methods are pri).15 F -.25(va)-.25 G .106
(te to that class alone and sometimes).25 F .074
(to its closest acquaintances, its immediate subclasses.)108 320.4 R
.074(But this distinction is not enforced by Perl itself.)5.074 F(It')
5.073 E(s)-.55 E(up to the programmer to beha)108 332.4 Q -.15(ve)-.2 G
(.).15 E(There')108 349.2 Q 3.084(sn)-.55 G 3.084(or)-3.084 G .584
(eason to limit methods to those that simply access data.)-3.084 F .585
(Methods can do an)5.585 F .585(ything at all.)-.15 F(The)5.585 E -.1
(ke)108 361.2 S 3.473(yp)-.05 G .972(oint is that the)-3.473 F(y')-.15 E
.972(re in)-.5 F -.2(vo)-.4 G -.1(ke).2 G 3.472(da).1 G -.05(ga)-3.472 G
.972(inst an object or a class.).05 F(Let')5.972 E 3.472(ss)-.55 G .972
(ay we')-3.472 F 3.472(dl)-.5 G(ik)-3.472 E 3.472(eo)-.1 G .972
(bject methods that do)-3.472 F
(more than fetch or set one particular \214eld.)108 373.2 Q F1
(sub exclaim {)132 390 Q(my $self = shift;)156 402 Q
(return sprintf "Hi, I'm %s, age %d, working with %s",)156 414 Q
($self->{NAME}, $self->{AGE}, join\(", ", $self->{PEERS}\);)180 426 Q(})
132 438 Q F0(Or maybe e)108 462 Q -.15(ve)-.25 G 2.5(no).15 G(ne lik)
-2.5 E 2.5(et)-.1 G(his:)-2.5 E F1(sub happy_birthday {)132 478.8 Q
(my $self = shift;)156 490.8 Q(return ++$self->{AGE};)156 502.8 Q(})132
514.8 Q F0(Some might ar)108 538.8 Q
(gue that one should go at these this w)-.18 E(ay:)-.1 E F1
(sub exclaim {)132 555.6 Q(my $self = shift;)156 567.6 Q
(return sprintf "Hi, I'm %s, age %d, working with %s",)156 579.6 Q
($self->name, $self->age, join\(", ", $self->peers\);)180 591.6 Q(})132
603.6 Q(sub happy_birthday {)132 627.6 Q(my $self = shift;)156 639.6 Q
(return $self->age\( $self->age\(\) + 1 \);)156 651.6 Q(})132 663.6 Q F0
.196(But since these methods are all e)108 687.6 R -.15(xe)-.15 G .197
(cuting in the class itself, this may not be critical.).15 F .197
(There are trade-of)5.197 F .197(fs to)-.25 F .25(be made.)108 699.6 R
.25(Using direct hash access is f)5.25 F .25
(aster \(about an order of magnitude f)-.1 F(aster)-.1 E 2.75(,i)-.4 G
2.75(nf)-2.75 G .25(act\), and it')-2.85 F 2.75(sm)-.55 G .25(ore con-)
-2.75 F -.15(ve)108 711.6 S 1.967(nient when you w).15 F 1.968
(ant to interpolate in strings.)-.1 F 1.968(But using methods \(the e)
6.968 F 1.968(xternal interf)-.15 F 1.968(ace\) internally)-.1 F
(shields not just the users of your class b)108 723.6 Q(ut e)-.2 E -.15
(ve)-.25 G 2.5(ny).15 G
(ou yourself from changes in your data representation.)-2.5 E 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(5)189.145 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 9/Times-Bold@0 SF -6.496(CC)72 84 S
-2.5(ll)6.496 G -4.498(aa)2.5 G -3.499(ss)4.498 G 6.998 -3.499(ss D)
3.499 H(Da)-2.997 E(at)-4.498 E(ta)-2.995 E(a)-4.498 E F0 1.012
(What about `)108 96 R 1.012(`class data')-.74 F 1.012
(', data items common to each object in a class?)-.74 F 1.011(What w)
6.011 F 1.011(ould you w)-.1 F 1.011(ant that for?)-.1 F -.8(We)108 108
S .647(ll, in your Person class, you might lik).8 F 3.147(et)-.1 G 3.147
(ok)-3.147 G .647(eep track of the total people ali)-3.247 F -.15(ve)
-.25 G 5.648(.H).15 G 1.148 -.25(ow d)-5.648 H 3.148(oy).25 G .648
(ou implement)-3.148 F(that?)108 120 Q -1.1(Yo)108 136.8 S(u)1.1 E/F2 10
/Times-Italic@0 SF(could)3.859 E F0(mak)3.859 E 3.859(ei)-.1 G 3.859
(tag)-3.859 G 1.359(lobal v)-3.859 F 1.359(ariable called)-.25 F/F3 10
/Courier@0 SF($Person::Census)3.859 E F0 6.359(.B)C 1.358
(ut about only reason you')-6.359 F 3.858(dd)-.5 G 3.858(ot)-3.858 G
(hat)-3.858 E -.1(wo)108 148.8 S 1.008(uld be if you).1 F F2(wanted)
3.508 E F0 1.008(people to be able to get at your class data directly)
3.508 F 6.009(.T)-.65 G(he)-6.009 E 3.509(yc)-.15 G 1.009(ould just say)
-3.509 F F3($Per-)3.509 E(son::Census)108 160.8 Q F0 .819
(and play around with it.)3.319 F .819
(Maybe this is ok in your design scheme.)5.819 F -1.1(Yo)5.819 G 3.318
(um)1.1 G .818(ight e)-3.318 F -.15(ve)-.25 G 3.318(nc).15 G(on-)-3.318
E(cei)108 172.8 Q -.25(va)-.25 G .445(bly w).25 F .445(ant to mak)-.1 F
2.945(ei)-.1 G 2.945(ta)-2.945 G 2.945(ne)-2.945 G .445(xported v)-3.095
F 2.945(ariable. T)-.25 F 2.946(ob)-.8 G 2.946(ee)-2.946 G .446
(xportable, a v)-3.096 F .446(ariable must be a \(package\) global.)-.25
F(If)5.446 E(this were a traditional module rather than an object-orien\
ted one, you might do that.)108 184.8 Q .703(While this approach is e)
108 201.6 R .703(xpected in most traditional modules, it')-.15 F 3.203
(sg)-.55 G .702(enerally considered rather poor form in)-3.203 F .911
(most object modules.)108 213.6 R .911
(In an object module, you should set up a protecti)5.911 F 1.211 -.15
(ve ve)-.25 H .912(il to separate interf).15 F .912(ace from)-.1 F 4.105
(implementation. So)108 225.6 R(pro)4.105 E 1.604
(vide a class method to access class data just as you pro)-.15 F 1.604
(vide object methods to)-.15 F(access object data.)108 237.6 Q .914
(So, you)108 254.4 R F2(could)3.414 E F0 .914(still k)3.414 F(eep)-.1 E
F3($Census)3.414 E F0 .915
(as a package global and rely upon others to honor the contract of the)
3.415 F .94
(module and therefore not play around with its implementation.)108 266.4
R -1.1(Yo)5.939 G 3.439(uc)1.1 G .939(ould e)-3.439 F -.15(ve)-.25 G
3.439(nb).15 G 3.439(es)-3.439 G(upertrick)-3.439 E 3.439(ya)-.15 G .939
(nd mak)-3.439 F(e)-.1 E F3($Census)108 278.4 Q F0 2.5(at)2.5 G
(ied object as described in the)-2.5 E F2(perltie)2.5 E F0
(manpage, thereby intercepting all accesses.)2.5 E .492
(But more often than not, you just w)108 295.2 R .492(ant to mak)-.1 F
2.992(ey)-.1 G .493(our class data a \214le-scoped le)-2.992 F 2.993
(xical. T)-.15 F 2.993(od)-.8 G 2.993(os)-2.993 G .493(o, simply put)
-2.993 F(this at the top of the \214le:)108 307.2 Q F3(my $Census = 0;)
132 324 Q F0(Ev)108 348 Q .402(en though the scope of a)-.15 F F2
(my\(\))2.902 E F0 .402(normally e)2.902 F .401
(xpires when the block in which it w)-.15 F .401
(as declared is done \(in this)-.1 F .194
(case the whole \214le being required or used\), Perl')108 360 R 2.694
(sd)-.55 G .194(eep binding of le)-2.694 F .194(xical v)-.15 F .194
(ariables guarantees that the v)-.25 F(ari-)-.25 E 1.371(able will not \
be deallocated, remaining accessible to functions declared within that \
scope.)108 372 R 1.37(This doesn')6.37 F(t)-.18 E -.1(wo)108 384 S
(rk with global v).1 E(ariables gi)-.25 E -.15(ve)-.25 G 2.5(nt).15 G
(emporary v)-2.5 E(alues via)-.25 E F2(local\(\))2.5 E F0 2.5(,t)C
(hough.)-2.5 E(Irrespecti)108 400.8 Q .837 -.15(ve o)-.25 H 3.037(fw).15
G .537(hether you lea)-3.037 F -.15(ve)-.2 G F3($Census)3.187 E F0 3.037
(ap)3.037 G .538(ackage global or mak)-3.037 F 3.038(ei)-.1 G 3.038(ti)
-3.038 G .538(nstead a \214le-scoped le)-3.038 F .538(xical, you)-.15 F
(should mak)108 412.8 Q 2.5(et)-.1 G(hese changes to your)-2.5 E F2 -.8
(Pe)2.5 G -.1(rs).8 G(on::ne).1 E(w\(\))-.15 E F0(constructor:)2.5 E F3
(sub new {)132 429.6 Q(my $proto = shift;)156 441.6 Q
(my $class = ref\($proto\))156 453.6 Q/F4 10/Symbol SF<efef>6 E F3
($proto;)6 E(my $self)156 465.6 Q 6(={)12 G(};)-6 E($Census++;)156 477.6
Q 12($self->{NAME} =)156 489.6 R(undef;)6 E 18($self->{AGE} =)156 501.6
R(undef;)6 E 6($self->{PEERS} =)156 513.6 R([];)6 E
(bless \($self, $class\);)156 525.6 Q(return $self;)156 537.6 Q(})132
549.6 Q(sub population {)132 573.6 Q(return $Census;)156 585.6 Q(})132
597.6 Q F0(No)108 621.6 Q 3.042(wt)-.25 G .542(hat we')-3.042 F .841
-.15(ve d)-.5 H .541(one this, we certainly do need a destructor so tha\
t when Person is destro).15 F .541(yed, the)-.1 F F3($Cen-)3.041 E(sus)
108 633.6 Q F0(goes do)2.5 E 2.5(wn. Here')-.25 F 2.5(sh)-.55 G .5 -.25
(ow t)-2.5 H(his could be done:).25 E F3(sub DESTROY { --$Census })132
650.4 Q F0 .338(Notice ho)108 674.4 R 2.838(wt)-.25 G(here')-2.838 E
2.838(sn)-.55 G 2.839(om)-2.838 G .339
(emory to deallocate in the destructor?)-2.839 F(That')5.339 E 2.839(ss)
-.55 G .339(omething that Perl tak)-2.839 F .339(es care of for)-.1 F
(you all by itself.)108 686.4 Q 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(6)189.145 E EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Times-Bold@0 SF -7.218(AA)108 84 S
-4.438(cc)7.218 G -4.438(cc)4.438 G -4.438(ee)4.438 G -3.888(ss)4.438 G
-3.888(ss)3.888 G -2.778(ii)3.888 G -5.558(nn)2.778 G 9.996 -4.998(gg C)
5.558 H(Cl)-2.22 E(la)-2.778 E(as)-4.998 E(ss)-3.888 E 2.5(sD)-3.888 G
(Da)-9.718 E(at)-4.998 E(ta)-3.328 E(a)-4.998 E F0 .577
(It turns out that this is not really a good w)108 100.8 R .577
(ay to go about handling class data.)-.1 F 3.077(Ag)5.577 G .576
(ood scalable rule is that)-3.077 F/F2 10/Times-Italic@0 SF .538
(you must ne)108 112.8 R .538(ver r)-.15 F(efer)-.37 E .538
(ence class data dir)-.37 F .538(ectly fr)-.37 F .538
(om an object method)-.45 F F0 5.538(.O)C .538(therwise you aren')-5.538
F 3.038(tb)-.18 G .539(uilding a scal-)-3.238 F 1.763
(able, inheritable class.)108 124.8 R 1.763
(The object must be the rendezv)6.763 F 1.762
(ous point for all operations, especially from an)-.2 F .712
(object method.)108 136.8 R .713(The globals \(class data\) w)5.713 F
.713(ould in some sense be in the `)-.1 F(`wrong')-.74 E 3.213('p)-.74 G
.713(ackage in your deri)-3.213 F -.15(ve)-.25 G(d).15 E 2.745
(classes. In)108 148.8 R .245(Perl, methods e)2.745 F -.15(xe)-.15 G
.245(cute in the conte).15 F .245(xt of the class the)-.15 F 2.744(yw)
-.15 G .244(ere de\214ned in,)-2.744 F F2(not)2.744 E F0 .244
(that of the object that)2.744 F(triggered them.)108 160.8 Q(Therefore,\
 namespace visibility of package globals in methods is unrelated to inh\
eritance.)5 E 1.762(Got that?)108 177.6 R 1.762(Maybe not.)6.762 F 1.763
(Ok, let')6.762 F 4.263(ss)-.55 G 1.763(ay that some other class `)
-4.263 F(`borro)-.74 E(wed')-.25 E 4.263('\()-.74 G 1.763
(well, inherited\) the)-4.263 F/F3 9/Times-Roman@0 SF(DESTR)4.263 E -.45
(OY)-.36 G F0 .202(method as it w)108 189.6 R .202(as de\214ned abo)-.1
F -.15(ve)-.15 G 5.201(.W).15 G .201
(hen those objects are destructed, the original)-5.201 F/F4 10/Courier@0
SF($Census)2.701 E F0 -.25(va)2.701 G .201(riable will be).25 F .608
(altered, not the one in the ne)108 201.6 R 3.108(wc)-.25 G(lass')-3.108
E 3.108(sp)-.55 G .608(ackage namespace.)-3.108 F .609
(Perhaps this is what you w)5.608 F .609(ant, b)-.1 F .609
(ut probably it)-.2 F(isn')108 213.6 Q(t.)-.18 E(Here')108 230.4 Q 3.308
(sh)-.55 G 1.308 -.25(ow t)-3.308 H 3.308<6f8c>.25 G 3.308(xt)-3.308 G
3.308(his. W)-3.308 F(e')-.8 E .808
(ll store a reference to the data in the v)-.1 F .808
(alue accessed by the hash k)-.25 F 1.108 -.15(ey `)-.1 H(`_CEN-)-.59 E
(SUS')108 242.4 Q 2.654('. Wh)-.74 F 2.654(yt)-.05 G .154
(he underscore?)-2.654 F -.8(We)5.154 G .154
(ll, mostly because an initial underscore already con).8 F -.15(vey)-.4
G 2.655(ss).15 G .155(trong feelings of)-2.655 F 1.042
(magicalness to a C programmer)108 254.4 R 6.042(.I)-.55 G(t')-6.042 E
3.542(sr)-.55 G 1.042(eally just a mnemonic de)-3.542 F 1.042
(vice to remind ourselv)-.25 F 1.041(es that this \214eld is)-.15 F
1.334(special and not to be used as a public data member in the same w)
108 266.4 R 1.334(ay that)-.1 F F3 -.315(NA)3.834 G(ME).315 E F0(,)A F3
-.36(AG)3.834 G(E).36 E F0 3.834(,a)C(nd)-3.834 E F3(PEERS)3.834 E F0
(are.)3.834 E .849(\(Because we')108 278.4 R 1.149 -.15(ve b)-.5 H .849
(een de).15 F -.15(ve)-.25 G .848
(loping this code under the strict pragma, prior to 5.004 we').15 F .848
(ll ha)-.1 F 1.148 -.15(ve t)-.2 H 3.348(oq).15 G .848(uote the)-3.348 F
(\214eld name.\))108 290.4 Q F4(sub new {)132 307.2 Q
(my $proto = shift;)156 319.2 Q(my $class = ref\($proto\))156 331.2 Q/F5
10/Symbol SF<efef>6 E F4($proto;)6 E(my $self)156 343.2 Q 6(={)12 G(};)
-6 E 24($self->{NAME} =)156 355.2 R(undef;)6 E 30($self->{AGE} =)156
367.2 R(undef;)6 E 18($self->{PEERS} =)156 379.2 R([];)6 E 6(#")156
391.2 S(private" data)-6 E($self->{"_CENSUS"} = \\$Census;)156 403.2 Q
(bless \($self, $class\);)156 415.2 Q(++ ${ $self->{"_CENSUS"} };)156
427.2 Q(return $self;)156 439.2 Q(})132 451.2 Q(sub population {)132
475.2 Q(my $self = shift;)156 487.2 Q(if \(ref $self\) {)156 499.2 Q
(return ${ $self->{"_CENSUS"} };)180 511.2 Q 6(}e)156 523.2 S(lse {)-6 E
(return $Census;)180 535.2 Q(})156 547.2 Q(})132 559.2 Q(sub DESTROY {)
132 583.2 Q(my $self = shift;)156 595.2 Q(-- ${ $self->{"_CENSUS"} };)
156 607.2 Q(})132 619.2 Q F1 -7.218(DD)108 654 S -4.438(ee)7.218 G 8.416
-5.558(bb uu)4.438 H -4.998(gg)5.558 G -4.998(gg)4.998 G -2.778(ii)4.998
G -5.558(nn)2.778 G 9.996 -4.998(gg M)5.558 H(Me)-4.44 E(et)-4.438 E(th)
-3.328 E(ho)-5.558 E(od)-4.998 E(ds)-5.558 E(s)-3.888 E F0(It')108 670.8
Q 2.62(sc)-.55 G .12(ommon for a class to ha)-2.62 F .42 -.15(ve a d)-.2
H(eb).15 E .121(ugging mechanism.)-.2 F -.15(Fo)5.121 G 2.621(re).15 G
.121(xample, you might w)-2.771 F .121(ant to see when objects)-.1 F .46
(are created or destro)108 682.8 R 2.96(yed. T)-.1 F 2.96(od)-.8 G 2.96
(ot)-2.96 G .46(hat, add a deb)-2.96 F .46(ugging v)-.2 F .46
(ariable as a \214le-scoped le)-.25 F 2.96(xical. F)-.15 F .46
(or this, we')-.15 F .46(ll pull)-.1 F .776
(in the standard Carp module to emit our w)108 694.8 R .776
(arnings and f)-.1 F .776(atal messages.)-.1 F .776(That w)5.776 F .776
(ay messages will come out)-.1 F .477(with the caller')108 706.8 R 2.977
<738c>-.55 G .477(lename and line number instead of our o)-2.977 F .477
(wn; if we w)-.25 F .477(anted them to be from our o)-.1 F .477(wn per)
-.25 F(-)-.2 E(specti)108 718.8 Q -.15(ve)-.25 G 2.5(,w).15 G(e')-2.5 E
2.5(dj)-.5 G(ust use)-2.5 E F2(die\(\))2.5 E F0(and)2.5 E F2(warn\(\))
2.5 E F0(directly instead of)2.5 E F2(cr)2.5 E(oak\(\))-.45 E F0(and)2.5
E F2(carp\(\))2.5 E F0(respecti)2.5 E -.15(ve)-.25 G(ly).15 E(.)-.65 E
157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(7)189.145 E EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(use Carp;)132 84 Q
(my $Debugging = 0;)132 96 Q F0(No)108 120 Q 2.5(wa)-.25 G(dd a ne)-2.5
E 2.5(wc)-.25 G(lass method to access the v)-2.5 E(ariable.)-.25 E F1
(sub debug {)132 136.8 Q(my $class = shift;)156 148.8 Q
(if \(ref $class\))156 160.8 Q 6({c)12 G
(onfess "Class method called as object method" })-6 E
(unless \(@_ == 1\) { confess "usage: CLASSNAME->debug\(level\)" })156
172.8 Q($Debugging = shift;)156 184.8 Q(})132 196.8 Q F0(No)108 220.8 Q
2.5<778c>-.25 G 2.5(xu)-2.5 G(p)-2.5 E/F2 9/Times-Roman@0 SF(DESTR)2.5 E
-.45(OY)-.36 G F0(to murmur a bit as the morib)2.95 E(und object e)-.2 E
(xpires:)-.15 E F1(sub DESTROY {)132 237.6 Q(my $self = shift;)156 249.6
Q(if \($Debugging\) { carp "Destroying $self " . $self->name })156 261.6
Q(-- ${ $self->{"_CENSUS"} };)156 273.6 Q(})132 285.6 Q F0
(One could concei)108 309.6 Q -.25(va)-.25 G(bly mak).25 E 2.5(eap)-.1 G
(er)-2.5 E(-object deb)-.2 E(ug state.)-.2 E(That w)5 E
(ay you could call both of these:)-.1 E F1 12(Person->debug\(1\); #)132
326.4 R(entire class)6 E 24($him->debug\(1\); #)132 338.4 R
(just this object)6 E F0 3.145 -.8(To d)108 362.4 T 4.045(os).8 G 1.545
(o, we need our deb)-4.045 F 1.545(ugging method to be a `)-.2 F
(`bimodal')-.74 E 4.045('o)-.74 G 1.545(ne, one that w)-4.045 F 1.546
(orks on both classes)-.1 F/F3 10/Times-Italic@0 SF(and)4.046 E F0 2.5
(objects. Therefore,)108 374.4 R(adjust the)2.5 E F3(deb)2.5 E(ug\(\))
-.2 E F0(and)2.5 E F2(DESTR)2.5 E -.45(OY)-.36 G F0(methods as follo)
2.95 E(ws:)-.25 E F1(sub debug {)132 391.2 Q(my $self = shift;)156 403.2
Q(confess "usage: thing->debug\(level\)")156 415.2 Q(unless @_ == 1;)24
E(my $level = shift;)156 427.2 Q(if \(ref\($self\)\))156 439.2 Q({)12 E
($self->{"_DEBUG"} = $level;)180 451.2 Q 6(#j)54 G(ust myself)-6 E 6(}e)
156 463.2 S(lse {)-6 E 42($Debugging =)180 475.2 R 48($level; #)6 F
(whole class)6 E(})156 487.2 Q(})132 499.2 Q(sub DESTROY {)132 523.2 Q
(my $self = shift;)156 535.2 Q(if \($Debugging)156 547.2 Q/F4 10/Symbol
SF<efef>6 E F1($self->{"_DEBUG"}\) {)6 E
(carp "Destroying $self " . $self->name;)180 559.2 Q(})156 571.2 Q
(-- ${ $self->{"_CENSUS"} };)156 583.2 Q(})132 595.2 Q F0 1.546
(What happens if a deri)108 619.2 R -.15(ve)-.25 G 4.046(dc).15 G 1.545
(lass \(which we')-4.046 F 1.545(ll call)-.1 F F1(Employee)4.045 E F0
4.045(\)i)C 1.545(nherits methods from this person one?)-4.045 F(Then)
108 631.2 Q F1(Employee->)4.369 E F3(deb)A(ug\(\))-.2 E F0 1.869
(when called as a class method manipulates)4.369 F F1
($Person::Debugging)4.369 E F0(not)4.369 E F1($Employee::Debugging)108
643.2 Q F0(.)A/F5 10/Times-Bold@0 SF -7.218(CC)108 666 S -2.778(ll)7.218
G -4.998(aa)2.778 G -3.888(ss)4.998 G 7.776 -3.888(ss D)3.888 H(De)-3.33
E(es)-4.438 E(st)-3.888 E(tr)-3.328 E(ru)-4.438 E(uc)-5.558 E(ct)-4.438
E(to)-3.328 E(or)-4.998 E(rs)-4.438 E(s)-3.888 E F0 .797
(The object destructor handles the death of each distinct object.)108
682.8 R .797(But sometimes you w)5.797 F .797(ant a bit of cleanup)-.1 F
.326(when the entire class is shut do)108 694.8 R .326
(wn, which currently only happens when the program e)-.25 F 2.826
(xits. T)-.15 F 2.826(om)-.8 G(ak)-2.826 E 2.827(es)-.1 G .327(uch a)
-2.827 F F3 .539(class destructor)108 706.8 R F0 3.039(,c)C .539
(reate a function in that class')-3.039 F 3.039(sp)-.55 G .539
(ackage named)-3.039 F F2(END)3.039 E F0 5.539(.T)C .539(his w)-5.539 F
.539(orks just lik)-.1 F 3.038(et)-.1 G(he)-3.038 E F2(END)3.038 E F0
(func-)3.038 E .432
(tion in traditional modules, meaning that it gets called whene)108
718.8 R -.15(ve)-.25 G 2.932(ry).15 G .432(our program e)-2.932 F .432
(xits unless it e)-.15 F -.15(xe)-.15 G .432(cs or dies).15 F
(of an uncaught signal.)108 730.8 Q -.15(Fo)5 G 2.5(re).15 G(xample,)
-2.65 E 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(8)189.145 E
EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub END {)132 84 Q
(if \($Debugging\) {)156 96 Q
(print "All persons are going away now.\\n";)180 108 Q(})156 120 Q(})132
132 Q F0 .874(When the program e)108 156 R .873
(xits, all the class destructors \()-.15 F/F2 9/Times-Roman@0 SF(END)A
F0 .873(functions\) are be called in the opposite order that)3.373 F
(the)108 168 Q 2.5(yw)-.15 G(ere loaded in \()-2.5 E F2(LIFO)A F0
(order\).)2.5 E/F3 10/Times-Bold@0 SF -7.218(DD)108 190.8 S -4.998(oo)
7.218 G -4.438(cc)4.998 G -5.558(uu)4.438 G -8.328(mm)5.558 G -4.438(ee)
8.328 G -5.558(nn)4.438 G -3.328(tt)5.558 G -2.778(ii)3.328 G -5.558(nn)
2.778 G 9.996 -4.998(gg t)5.558 H(th)1.67 E(he)-5.558 E 2.5(eI)-4.438 G
(In)-6.388 E(nt)-5.558 E(te)-3.328 E(er)-4.438 E(rf)-4.438 E(fa)-3.328 E
(ac)-4.998 E(ce)-4.438 E(e)-4.438 E F0 .003(And there you ha)108 207.6 R
.303 -.15(ve i)-.2 H .003(t: we').15 F .303 -.15(ve j)-.5 H .003
(ust sho).15 F .003(wn you the)-.25 F/F4 10/Times-Italic@0 SF
(implementation)2.503 E F0 .004(of this Person class.)2.503 F(Its)5.004
E F4(interface)2.504 E F0 -.1(wo)2.504 G .004(uld be).1 F .831
(its documentation.)108 219.6 R .831(Usually this means putting it in p\
od \("plain old documentation"\) format right there in)5.831 F .617
(the same \214le.)108 231.6 R .617(In our Person e)5.617 F .617
(xample, we w)-.15 F .617(ould place the follo)-.1 F .617(wing docs an)
-.25 F .617(ywhere in the Person.pm \214le.)-.15 F(Ev)108 243.6 Q .178
(en though it looks mostly lik)-.15 F 2.678(ec)-.1 G .178(ode, it')
-2.678 F 2.678(sn)-.55 G 2.678(ot. It')-2.678 F 2.678(se)-.55 G .178
(mbedded documentation such as w)-2.678 F .177(ould be used by the)-.1 F
.42(pod2man, pod2html, or pod2te)108 255.6 R .42(xt programs.)-.15 F
.421(The Perl compiler ignores pods entirely)5.421 F 2.921(,j)-.65 G
.421(ust as the translators)-2.921 F(ignore code.)108 267.6 Q(Here')5 E
2.5(sa)-.55 G 2.5(ne)-2.5 G
(xample of some pods describing the informal interf)-2.65 E(ace:)-.1 E
F1(=head1 NAME)132 284.4 Q(Person - class to implement people)132 308.4
Q(=head1 SYNOPSIS)132 332.4 Q(use Person;)138 356.4 Q(#################)
138 380.4 Q 6(#c)138 392.4 S(lass methods #)-6 E(#################)138
404.4 Q 18($ob =)138 416.4 R(Person->new;)6 E
($count = Person->population;)138 428.4 Q(#######################)138
452.4 Q 6(#o)138 464.4 S(bject data methods #)-6 E
(#######################)138 476.4 Q(### get versions ###)138 500.4 Q 12
($who =)162 512.4 R($ob->name;)6 E($years = $ob->age;)162 524.4 Q 6
(@pals =)162 536.4 R($ob->peers;)6 E(### set versions ###)138 560.4 Q
($ob->name\("Jason"\);)162 572.4 Q($ob->age\(23\);)162 584.4 Q
($ob->peers\( "Norbert", "Rhys", "Phineas" \);)162 596.4 Q
(########################)138 620.4 Q 6(#o)138 632.4 S
(ther object methods #)-6 E(########################)138 644.4 Q
($phrase = $ob->exclaim;)138 668.4 Q($ob->happy_birthday;)138 680.4 Q
(=head1 DESCRIPTION)132 704.4 Q F0 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(9)189.145 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF
(The Person class implements dah dee dah dee dah....)132 84 Q F0(That')
108 108 Q 2.816(sa)-.55 G .316(ll there is to the matter of interf)
-2.816 F .316(ace v)-.1 F .316(ersus implementation.)-.15 F 2.816(Ap)
5.316 G .316(rogrammer who opens up the mod-)-2.816 F .022
(ule and plays around with all the pri)108 120 R -.25(va)-.25 G .022
(te little shin).25 F 2.522(yb)-.15 G .022(its that were safely lock)
-2.522 F .022(ed up behind the interf)-.1 F .023(ace con-)-.1 F
(tract has v)108 132 Q(oided the w)-.2 E(arranty)-.1 E 2.5(,a)-.65 G
(nd you shouldn')-2.5 E 2.5(tw)-.18 G(orry about their f)-2.6 E(ate.)-.1
E/F2 9/Times-Bold@0 SF -6.496(AA)72 148.8 S -4.498(gg)6.496 G -4.498(gg)
4.498 G 5.576 -3.994(rr ee)4.498 H -4.498(gg)3.994 G -4.498(aa)4.498 G
-2.995(tt)4.498 G -2.5(ii)2.995 G -4.498(oo)2.5 G -5.002(nn)4.498 G F0
.407(Suppose you later w)108 160.8 R .407
(ant to change the class to implement better names.)-.1 F .406
(Perhaps you')5.406 F 2.906(dl)-.5 G(ik)-2.906 E 2.906(et)-.1 G 2.906
(os)-2.906 G .406(upport both)-2.906 F(gi)108 172.8 Q -.15(ve)-.25 G
3.52(nn).15 G 1.02(ames \(called Christian names, irrespecti)-3.52 F
1.32 -.15(ve o)-.25 H 3.52(fo).15 G(ne')-3.52 E 3.52(sr)-.55 G 1.02
(eligion\) and f)-3.52 F 1.02(amily names \(called surnames\),)-.1 F
.715(plus nicknames and titles.)108 184.8 R .714
(If users of your Person class ha)5.714 F 1.014 -.15(ve b)-.2 H .714
(een properly accessing it through its docu-).15 F .034(mented interf)
108 196.8 R .034
(ace, then you can easily change the underlying implementation.)-.1 F
.034(If the)5.034 F 2.534(yh)-.15 G -2.25 -.2(av e)-2.534 H(n').2 E .034
(t, then the)-.18 F 2.534(yl)-.15 G(ose)-2.534 E(and it')108 208.8 Q 2.5
(st)-.55 G(heir f)-2.5 E(ault for breaking the contract and v)-.1 E
(oiding their w)-.2 E(arranty)-.1 E(.)-.65 E 2.486 -.8(To d)108 225.6 T
3.386(ot).8 G .886(his, we')-3.386 F .886(ll mak)-.1 F 3.386(ea)-.1 G
.885(nother class, this one called Fullname.)-3.386 F(What')5.885 E
3.385(st)-.55 G .885(he Fullname class look lik)-3.385 F 3.385(e? T)-.1
F(o)-.8 E(answer that question, you ha)108 237.6 Q .3 -.15(ve t)-.2 H
2.5<6f8c>.15 G(rst \214gure out ho)-2.5 E 2.5(wy)-.25 G(ou w)-2.5 E
(ant to use it.)-.1 E(Ho)5 E 2.5(wa)-.25 G(bout we use it this w)-2.5 E
(ay:)-.1 E F1($him = Person->new\(\);)132 254.4 Q
($him->fullname->title\("St"\);)132 266.4 Q
($him->fullname->christian\("Thomas"\);)132 278.4 Q
($him->fullname->surname\("Aquinas"\);)132 290.4 Q
($him->fullname->nickname\("Tommy"\);)132 302.4 Q
(printf "His normal name is %s\\n", $him->name;)132 314.4 Q
(printf "But his real name is %s\\n", $him->fullname->as_string;)132
326.4 Q F0 2.5(Ok. T)108 350.4 R 2.5(od)-.8 G 2.5(ot)-2.5 G(his, we')
-2.5 E(ll change)-.1 E/F3 10/Times-Italic@0 SF -.8(Pe)2.5 G -.1(rs).8 G
(on::ne).1 E(w\(\))-.15 E F0
(so that it supports a full name \214eld this w)2.5 E(ay:)-.1 E F1
(sub new {)132 367.2 Q(my $proto = shift;)156 379.2 Q
(my $class = ref\($proto\))156 391.2 Q/F4 10/Symbol SF<efef>6 E F1
($proto;)6 E(my $self)156 403.2 Q 6(={)12 G(};)-6 E
($self->{FULLNAME} = Fullname->new\(\);)156 415.2 Q 30($self->{AGE} =)
156 427.2 R(undef;)6 E 18($self->{PEERS} =)156 439.2 R([];)6 E
($self->{"_CENSUS"} = \\$Census;)156 451.2 Q(bless \($self, $class\);)
156 463.2 Q(++ ${ $self->{"_CENSUS"} };)156 475.2 Q(return $self;)156
487.2 Q(})132 499.2 Q(sub fullname {)132 523.2 Q(my $self = shift;)156
535.2 Q(return $self->{FULLNAME};)156 547.2 Q(})132 559.2 Q F0
(Then to support old code, de\214ne)108 583.2 Q F3 -.8(Pe)2.5 G -.1(rs)
.8 G(on::name\(\)).1 E F0(this w)2.5 E(ay:)-.1 E F1(sub name {)132 600 Q
(my $self = shift;)156 612 Q(return $self->{FULLNAME}->nickname\(@_\))
156 624 Q F4<efef>168 636 Q F1($self->{FULLNAME}->christian\(@_\);)18 E
(})132 648 Q F0(Here')108 672 Q 2.99(st)-.55 G .49(he Fullname class.)
-2.99 F -.8(We)5.49 G -.1('l).8 G 2.99(lu).1 G .49(se the same techniqu\
e of using a hash reference to hold data \214elds, and)-2.99 F
(methods by the appropriate name to access them:)108 684 Q F1
(package Fullname;)132 700.8 Q(use strict;)132 712.8 Q F0 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(10)184.145 E EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub new {)132 84 Q
(my $proto = shift;)156 96 Q(my $class = ref\($proto\))156 108 Q/F2 10
/Symbol SF<efef>6 E F1($proto;)6 E(my $self)156 120 Q 6(={)12 G 36
(TITLE =>)180 132 R(undef,)6 E 12(CHRISTIAN =>)180 144 R(undef,)6 E 24
(SURNAME =>)180 156 R(undef,)6 E 42(NICK =>)180 168 R(undef,)6 E(};)156
180 Q(bless \($self, $class\);)156 192 Q(return $self;)156 204 Q(})132
216 Q(sub christian {)132 240 Q(my $self = shift;)156 252 Q
(if \(@_\) { $self->{CHRISTIAN} = shift })156 264 Q
(return $self->{CHRISTIAN};)156 276 Q(})132 288 Q(sub surname {)132 312
Q(my $self = shift;)156 324 Q(if \(@_\) { $self->{SURNAME} = shift })156
336 Q(return $self->{SURNAME};)156 348 Q(})132 360 Q(sub nickname {)132
384 Q(my $self = shift;)156 396 Q(if \(@_\) { $self->{NICK} = shift })
156 408 Q(return $self->{NICK};)156 420 Q(})132 432 Q(sub title {)132
456 Q(my $self = shift;)156 468 Q(if \(@_\) { $self->{TITLE} = shift })
156 480 Q(return $self->{TITLE};)156 492 Q(})132 504 Q(sub as_string {)
132 528 Q(my $self = shift;)156 540 Q
(my $name = join\(" ", @$self{'CHRISTIAN', 'SURNAME'}\);)156 552 Q
(if \($self->{TITLE}\) {)156 564 Q
($name = $self->{TITLE} . " " . $name;)180 576 Q(})156 588 Q
(return $name;)156 600 Q(})132 612 Q(1;)132 636 Q F0(Finally)108 660 Q
2.5(,h)-.65 G(ere')-2.5 E 2.5(st)-.55 G(he test program:)-2.5 E F1
(#!/usr/bin/perl -w)132 676.8 Q(use strict;)132 688.8 Q(use Person;)132
700.8 Q(sub END { show_census\(\) })132 712.8 Q F0 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(11)184.145 E EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub show_census \(\))
132 84 Q({)12 E(printf "Current population: %d\\n", Person->population;)
156 96 Q(})132 108 Q(Person->debug\(1\);)132 132 Q(show_census\(\);)132
156 Q(my $him = Person->new\(\);)132 180 Q
($him->fullname->christian\("Thomas"\);)132 204 Q
($him->fullname->surname\("Aquinas"\);)132 216 Q
($him->fullname->nickname\("Tommy"\);)132 228 Q
($him->fullname->title\("St"\);)132 240 Q($him->age\(1\);)132 252 Q
(printf "%s is really %s.\\n", $him->name, $him->fullname;)132 276 Q
(printf "%s's age: %d.\\n", $him->name, $him->age;)132 288 Q
($him->happy_birthday;)132 300 Q
(printf "%s's age: %d.\\n", $him->name, $him->age;)132 312 Q
(show_census\(\);)132 336 Q/F2 9/Times-Bold@0 SF -3.499(II)72 364.8 S
-5.002(nn)3.499 G -5.002(hh)5.002 G -3.994(ee)5.002 G -3.994(rr)3.994 G
-2.5(ii)3.994 G -2.995(tt)2.5 G -4.498(aa)2.995 G -5.002(nn)4.498 G
-3.994(cc)5.002 G -3.994(ee)3.994 G F0 .538(Object-oriented programming\
 systems all support some notion of inheritance.)108 376.8 R .538
(Inheritance means allo)5.538 F(wing)-.25 E .816
(one class to piggy-back on top of another one so you don')108 388.8 R
3.316(th)-.18 G -2.25 -.2(av e)-3.316 H .816(to write the same code ag)
3.516 F .816(ain and ag)-.05 F(ain.)-.05 E(It')108 400.8 Q 3.962(sa)-.55
G 1.462(bout softw)-3.962 F 1.462(are reuse, and therefore related to L\
aziness, the principal virtue of a programmer)-.1 F 6.462(.\()-.55 G
(The)-6.462 E(import/e)108 412.8 Q .501(xport mechanisms in traditional\
 modules are also a form of code reuse, b)-.15 F .502
(ut a simpler one than the)-.2 F
(true inheritance that you \214nd in object modules.\))108 424.8 Q .325
(Sometimes the syntax of inheritance is b)108 441.6 R .324
(uilt into the core of the language, and sometimes it')-.2 F 2.824(sn)
-.55 G 2.824(ot. Perl)-2.824 F(has)2.824 E .376(no special syntax for s\
pecifying the class \(or classes\) to inherit from.)108 453.6 R .377
(Instead, it')5.377 F 2.877(sa)-.55 G .377(ll strictly in the seman-)
-2.877 F 2.606(tics. Each)108 465.6 R .106(package can ha)2.606 F .406
-.15(ve a v)-.2 H .105(ariable called)-.1 F F1(@ISA)2.605 E F0 2.605(,w)
C .105(hich go)-2.605 F -.15(ve)-.15 G .105(rns \(method\) inheritance.)
.15 F .105(If you try to call)5.105 F 3.463(am)108 477.6 S .963(ethod o\
n an object or class, and that method is not found in that object')
-3.463 F 3.463(sp)-.55 G .963(ackage, Perl then looks to)-3.463 F F1
(@ISA)108 489.6 Q F0(for other packages to go looking through in search\
 of the missing method.)2.5 E(Lik)108 506.4 Q 5.766(et)-.1 G 3.266
(he special per)-5.766 F 3.266(-package v)-.2 F 3.265
(ariables recognized by Exporter \(such as)-.25 F F1(@EXPORT)5.765 E F0
(,)A F1(@EXPORT_OK)5.765 E F0(,)A F1(@EXPORT_FAIL)108 518.4 Q F0(,)A F1
(%EXPORT_TAGS)3.303 E F0 3.303(,a)C(nd)-3.303 E F1($VERSION)3.303 E F0
.803(\), the)B F1(@ISA)3.304 E F0(array)3.304 E/F3 10/Times-Italic@0 SF
(must)3.304 E F0 .804(be a package-scoped global)3.304 F .355
(and not a \214le-scoped le)108 530.4 R .354(xical created via)-.15 F F3
(my\(\))2.854 E F0 5.354(.M)C .354(ost classes ha)-5.354 F .654 -.15
(ve j)-.2 H .354(ust one item in their).15 F F1(@ISA)2.854 E F0(array)
2.854 E 5.354(.I)-.65 G 2.854(nt)-5.354 G(his)-2.854 E(case, we ha)108
542.4 Q .3 -.15(ve w)-.2 H(hat').15 E 2.5(sc)-.55 G(alled `)-2.5 E
(`single inheritance')-.74 E(', or SI for short.)-.74 E
(Consider this class:)108 559.2 Q F1(package Employee;)132 576 Q
(use Person;)132 588 Q(@ISA = \("Person"\);)132 600 Q(1;)132 612 Q F0
.031(Not a lot to it, eh?)108 636 R .031(All it')5.031 F 2.531(sd)-.55 G
.031(oing so f)-2.531 F .032(ar is loading in another class and stating\
 that this one will inherit meth-)-.1 F .056
(ods from that other class if need be.)108 648 R 1.655 -.8(We h)5.055 H
-2.25 -.2(av e).8 H(gi)2.755 E -.15(ve)-.25 G 2.555(ni).15 G 2.555(tn)
-2.555 G .055(one of its o)-2.555 F .055(wn methods.)-.25 F 1.655 -.8
(We r)5.055 H .055(ely upon an Emplo).8 F(yee)-.1 E(to beha)108 660 Q .3
-.15(ve j)-.2 H(ust lik).15 E 2.5(eaP)-.1 G(erson.)-2.5 E .562
(Setting up an empty class lik)108 676.8 R 3.062(et)-.1 G .562
(his is called the `)-3.062 F .562(`empty subclass test')-.74 F .562
('; that is, making a deri)-.74 F -.15(ve)-.25 G 3.063(dc).15 G .563
(lass that)-3.063 F .734(does nothing b)108 688.8 R .734
(ut inherit from a base class.)-.2 F .733
(If the original base class has been designed properly)5.733 F 3.233(,t)
-.65 G .733(hen the)-3.233 F(ne)108 700.8 Q 2.942(wd)-.25 G(eri)-2.942 E
-.15(ve)-.25 G 2.942(dc).15 G .442
(lass can be used as a drop-in replacement for the old one.)-2.942 F
.443(This means you should be able to)5.443 F(write a program lik)108
712.8 Q 2.5(et)-.1 G(his:)-2.5 E 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(12)184.145 E EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(use Employee)132 84 Q
(my $empl = Employee->new\(\);)132 96 Q($empl->name\("Jason"\);)132 108
Q($empl->age\(23\);)132 120 Q
(printf "%s is age %d.\\n", $empl->name, $empl->age;)132 132 Q F0 .116
(By proper design, we mean al)108 156 R -.1(wa)-.1 G .116
(ys using the tw).1 F(o-ar)-.1 E .116(gument form of)-.18 F/F2 10
/Times-Italic@0 SF(bless\(\))2.615 E F0 2.615(,a)C -.2(vo)-2.815 G .115
(iding direct access of global).2 F 1.309(data, and not e)108 168 R
1.309(xporting an)-.15 F 3.809(ything. If)-.15 F 1.309
(you look back at the)3.809 F F2 -.8(Pe)3.81 G -.1(rs).8 G(on::ne).1 E
(w\(\))-.15 E F0 1.31(function we de\214ned abo)3.81 F -.15(ve)-.15 G
3.81(,w).15 G(e)-3.81 E .899(were careful to do that.)108 180 R(There')
5.899 E 3.399(sab)-.55 G .899
(it of package data used in the constructor)-3.399 F 3.399(,b)-.4 G .899
(ut the reference to this is)-3.599 F .184(stored on the object itself \
and all other methods access package data via that reference, so we sho\
uld be ok.)108 192 R .275(What do we mean by the)108 208.8 R F2 -.8(Pe)
2.775 G -.1(rs).8 G(on::ne).1 E(w\(\))-.15 E F0 .275(function -- isn')
2.775 F 2.774(tt)-.18 G .274(hat actually a method?)-2.774 F -.8(We)
5.274 G .274(ll, in principle, yes.).8 F(A)5.274 E .546
(method is just a function that e)108 220.8 R .547
(xpects as its \214rst ar)-.15 F .547
(gument a class name \(package\) or object \(blessed refer)-.18 F(-)-.2
E(ence\).)108 232.8 Q F2 -.8(Pe)8.252 G -.1(rs).8 G(on::ne).1 E(w\(\))
-.15 E F0 .752(is the function that both the)3.252 F F1(Person->)3.252 E
F2(ne)A(w\(\))-.15 E F0 .751(method and the)3.251 F F1(Employee->)3.251
E F2(ne)A(w\(\))-.15 E F0 1.202(method end up calling.)108 244.8 R 1.203
(Understand that while a method call looks a lot lik)6.202 F 3.703(eaf)
-.1 G 1.203(unction call, the)-3.703 F 3.703(ya)-.15 G(ren')-3.703 E(t)
-.18 E .769
(really quite the same, and if you treat them as the same, you')108
256.8 R .769(ll v)-.1 F .769(ery soon be left with nothing b)-.15 F .769
(ut brok)-.2 F(en)-.1 E 3.86(programs. First,)108 268.8 R 1.36
(the actual underlying calling con)3.86 F -.15(ve)-.4 G 1.36
(ntions are dif).15 F 1.36(ferent: method calls get an e)-.25 F 1.36
(xtra ar)-.15 F(gu-)-.18 E 2.5(ment. Second,)108 280.8 R
(function calls don')2.5 E 2.5(td)-.18 G 2.5(oi)-2.5 G(nheritance, b)
-2.5 E(ut methods do.)-.2 E F1(Method Call)156 297.6 Q
(Resulting Function Call)78 E 72(----------- ------------------------)
156 309.6 R 60(Person->new\(\) Person::new\("Person"\))156 321.6 R 48
(Employee->new\(\) Person::new\("Employee"\))156 333.6 R F0(So don')108
357.6 Q 2.5(tu)-.18 G(se function calls when you mean to call a method.)
-2.5 E .431(If an emplo)108 374.4 R .431(yee is just a Person, that')-.1
F 2.931(sn)-.55 G .431(ot all too v)-2.931 F .43(ery interesting.)-.15 F
.43(So let')5.43 F 2.93(sa)-.55 G .43(dd some other methods.)-2.93 F -.8
(We)5.43 G -.1('l).8 G(l).1 E(gi)108 386.4 Q .3 -.15(ve o)-.25 H
(ur emplo).15 E(yee data \214elds to access their salary)-.1 E 2.5(,t)
-.65 G(heir emplo)-2.5 E(yee ID, and their start date.)-.1 E .114
(If you')108 403.2 R .114(re getting a little tired of creating all the\
se nearly identical methods just to get at the object')-.5 F 2.614(sd)
-.55 G .114(ata, do)-2.614 F .464(not despair)108 415.2 R 5.463(.L)-.55
G(ater)-5.463 E 2.963(,w)-.4 G(e')-2.963 E .463(ll describe se)-.1 F
-.15(ve)-.25 G .463(ral dif).15 F .463(ferent con)-.25 F -.15(ve)-.4 G
.463(nience mechanisms for shortening this up.).15 F(Mean-)5.463 E
(while, here')108 427.2 Q 2.5(st)-.55 G(he straight-forw)-2.5 E(ard w)
-.1 E(ay:)-.1 E F1(sub salary {)132 444 Q(my $self = shift;)156 456 Q
(if \(@_\) { $self->{SALARY} = shift })156 468 Q
(return $self->{SALARY};)156 480 Q(})132 492 Q(sub id_number {)132 516 Q
(my $self = shift;)156 528 Q(if \(@_\) { $self->{ID} = shift })156 540 Q
(return $self->{ID};)156 552 Q(})132 564 Q(sub start_date {)132 588 Q
(my $self = shift;)156 600 Q(if \(@_\) { $self->{START_DATE} = shift })
156 612 Q(return $self->{START_DATE};)156 624 Q(})132 636 Q/F3 10
/Times-Bold@0 SF -7.778(OO)108 670.8 S 7.396 -4.998(vv e)7.778 H(er).56
E(rr)-4.438 E(ri)-4.438 E(id)-2.778 E(dd)-5.558 E(de)-5.558 E(en)-4.438
E 2.5(nM)-5.558 G(Me)-11.938 E(et)-4.438 E(th)-3.328 E(ho)-5.558 E(od)
-4.998 E(ds)-5.558 E(s)-3.888 E F0 .417(What happens when both a deri)
108 687.6 R -.15(ve)-.25 G 2.918(dc).15 G .418
(lass and its base class ha)-2.918 F .718 -.15(ve t)-.2 H .418
(he same method de\214ned?).15 F -.8(We)5.418 G .418(ll, then you).8 F
1.49(get the deri)108 699.6 R -.15(ve)-.25 G 3.99(dc).15 G(lass')-3.99 E
3.99(sv)-.55 G 1.49(ersion of that method.)-4.14 F -.15(Fo)6.49 G 3.99
(re).15 G 1.49(xample, let')-4.14 F 3.99(ss)-.55 G 1.49(ay that we w)
-3.99 F 1.49(ant the)-.1 F F2(peer)3.99 E(s\(\))-.1 E F0(method)3.99 E
.775(called on an emplo)108 711.6 R .776(yee to act a bit dif)-.1 F
(ferently)-.25 E 5.776(.I)-.65 G .776
(nstead of just returning the list of peer names, let')-5.776 F 3.276
(sr)-.55 G(eturn)-3.276 E(slightly dif)108 723.6 Q(ferent strings.)-.25
E(So doing this:)5 E 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5
E(13)184.145 E EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF
($empl->peers\("Peter", "Paul", "Mary"\);)132 84 Q
(printf "His peers are: %s\\n", join\(", ", $empl->peers\);)132 96 Q F0
(will produce:)108 120 Q F1
(His peers are: PEON=PETER, PEON=PAUL, PEON=MARY)132 136.8 Q F0 1.6 -.8
(To d)108 160.8 T 2.5(ot).8 G
(his, merely add this de\214nition into the Emplo)-2.5 E(yee.pm \214le:)
-.1 E F1(sub peers {)132 177.6 Q(my $self = shift;)156 189.6 Q
(if \(@_\) { @{ $self->{PEERS} } = @_ })156 201.6 Q
(return map { "PEON=\\U$_" } @{ $self->{PEERS} };)156 213.6 Q(})132
225.6 Q F0 .307(There, we')108 249.6 R .607 -.15(ve j)-.5 H .307
(ust demonstrated the high-f).15 F .307(alutin' concept kno)-.1 F .307
(wn in certain circles as)-.25 F/F2 10/Times-Italic@0 SF(polymorphism)
2.807 E F0 5.306(.W)C(e')-6.106 E -.15(ve)-.5 G(tak)108 261.6 Q .633
(en on the form and beha)-.1 F .633(viour of an e)-.2 F .633
(xisting object, and then we')-.15 F .933 -.15(ve a)-.5 H .633
(ltered it to suit our o).15 F .634(wn purposes.)-.25 F 1.237
(This is a form of Laziness.)108 273.6 R 1.237(\(Getting polymorphed is\
 also what happens when the wizard decides you')6.237 F(d)-.5 E
(look better as a frog.\))108 285.6 Q(Ev)108 302.4 Q .948(ery no)-.15 F
3.448(wa)-.25 G .948(nd then you')-3.448 F .948(ll w)-.1 F .948
(ant to ha)-.1 F 1.248 -.15(ve a m)-.2 H .949
(ethod call trigger both its deri).15 F -.15(ve)-.25 G 3.449(dc).15 G
.949(lass \(also kno)-3.449 F 3.449(wa)-.25 G 3.449(s`)-3.449 G(`sub-)
-4.189 E .379(class"\) v)108 314.4 R .379
(ersion as well as its base class \(also kno)-.15 F .379(wn as `)-.25 F
.379(`superclass"\) v)-.74 F 2.878(ersion. In)-.15 F .378
(practice, constructors and)2.878 F .118(destructors are lik)108 326.4 R
.118(ely to w)-.1 F .118(ant to do this, and it probably also mak)-.1 F
.119(es sense in the)-.1 F F2(deb)2.619 E(ug\(\))-.2 E F0 .119
(method we sho)2.619 F(wed)-.25 E(pre)108 338.4 Q(viously)-.25 E(.)-.65
E 1.6 -.8(To d)108 355.2 T 2.5(ot).8 G(his, add this to Emplo)-2.5 E
(yee.pm:)-.1 E F1(use Carp;)132 372 Q(my $Debugging = 0;)132 384 Q
(sub debug {)132 408 Q(my $self = shift;)156 420 Q
(confess "usage: thing->debug\(level\)")156 432 Q(unless @_ == 1;)24 E
(my $level = shift;)156 444 Q(if \(ref\($self\)\))156 456 Q({)12 E
($self->{"_DEBUG"} = $level;)180 468 Q 6(}e)156 480 S(lse {)-6 E
($Debugging = $level;)180 492 Q 6(#w)72 G(hole class)-6 E(})156 504 Q
(Person::debug\($self, $Debugging\);)156 516 Q 6(#d)18 G
(on't really do this)-6 E(})132 528 Q F0 .71
(As you see, we turn around and call the Person package')108 552 R(s)
-.55 E F2(deb)3.21 E(ug\(\))-.2 E F0 3.21(function. But)3.21 F .71
(this is f)3.21 F .71(ar too fragile for)-.1 F 1.188(good design.)108
564 R 1.188(What if Person doesn')6.188 F 3.688(th)-.18 G -2.25 -.2
(av e)-3.688 H(a)3.888 E F2(deb)3.688 E(ug\(\))-.2 E F0 1.188
(function, b)3.688 F 1.188(ut is inheriting)-.2 F F2 1.188(its deb)3.688
F(ug\(\))-.2 E F0 1.189(method from)3.689 F(else)108 576 Q 2.5
(where? It)-.25 F -.1(wo)2.5 G(uld ha).1 E .3 -.15(ve b)-.2 H
(een slightly better to say).15 E F1(Person->debug\($Debugging\);)132
592.8 Q F0(But e)108 616.8 Q -.15(ve)-.25 G 2.5(nt).15 G(hat')-2.5 E 2.5
(sg)-.55 G(ot too much hard-coded.)-2.5 E(It')5 E 2.5(ss)-.55 G(ome)-2.5
E(what better to say)-.25 E F1($self->Person::debug\($Debugging\);)132
633.6 Q F0 .06(Which is a funn)108 657.6 R 2.56(yw)-.15 G .06
(ay to say to start looking for a)-2.66 F F2(deb)2.56 E(ug\(\))-.2 E F0
.06(method up in Person.)2.56 F .06(This strate)5.06 F .06
(gy is more often)-.15 F(seen on o)108 669.6 Q -.15(ve)-.15 G
(rridden object methods than on o).15 E -.15(ve)-.15 G
(rridden class methods.).15 E .148(There is still something a bit of)108
686.4 R 2.648(fh)-.25 G 2.648(ere. W)-2.648 F(e')-.8 E .448 -.15(ve h)
-.5 H .148(ard-coded our superclass').15 F 2.648(sn)-.55 G 2.649
(ame. This)-2.648 F .149(in particular is bad if)2.649 F .972
(you change which classes you inherit from, or add others.)108 698.4 R
-.15(Fo)5.971 G(rtunately).15 E 3.471(,t)-.65 G .971(he pseudoclass)
-3.471 F/F3 9/Times-Roman@0 SF(SUPER)3.471 E F0 .971(comes to)3.471 F
(the rescue here.)108 710.4 Q 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(14)184.145 E EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF
($class->SUPER::debug\($Debugging\);)132 84 Q F0 .61(This w)108 108 R
.61(ay it starts looking in my class')-.1 F(s)-.55 E F1(@ISA)3.11 E F0
5.61(.T)C .61(his only mak)-5.61 F .61(es sense from)-.1 F/F2 10
/Times-Italic@0 SF(within)3.11 E F0 3.11(am)3.11 G .61
(ethod call, though.)-3.11 F(Don')108 120 Q 2.841(tt)-.18 G .341
(ry to access an)-2.841 F .341(ything in)-.15 F/F3 9/Times-Roman@0 SF
(SUPER)2.841 E F0 .341(:: from an)B .341(ywhere else, because it doesn')
-.15 F 2.84(te)-.18 G .34(xist outside an o)-2.99 F -.15(ve)-.15 G
(rridden).15 E(method call.)108 132 Q .871
(Things are getting a bit complicated here.)108 148.8 R(Ha)5.871 E 1.171
-.15(ve w)-.2 H 3.371(ed).15 G .871(one an)-3.371 F .871
(ything we shouldn')-.15 F 3.371(t? As)-.18 F .872(before, one w)3.371 F
.872(ay to)-.1 F 1.922(test whether we')108 160.8 R 1.921
(re designing a decent class is via the empty subclass test.)-.5 F 1.921
(Since we already ha)6.921 F 2.221 -.15(ve a)-.2 H(n).15 E(Emplo)108
172.8 Q 1.664(yee class that we')-.1 F 1.664(re trying to check, we')-.5
F 4.164(db)-.5 G 1.664(etter get a ne)-4.164 F 4.164(we)-.25 G 1.664
(mpty subclass that can deri)-4.164 F 1.965 -.15(ve f)-.25 H(rom).15 E
(Emplo)108 184.8 Q 2.5(yee. Here')-.1 F 2.5(so)-.55 G(ne:)-2.5 E F1
(package Boss;)132 201.6 Q(use Employee;)132 213.6 Q 6(#:)48 G(-\))-6 E
(@ISA = qw\(Employee\);)132 225.6 Q F0(And here')108 249.6 Q 2.5(st)-.55
G(he test program:)-2.5 E F1(#!/usr/bin/perl -w)132 266.4 Q(use strict;)
132 278.4 Q(use Boss;)132 290.4 Q(Boss->debug\(1\);)132 302.4 Q
(my $boss = Boss->new\(\);)132 326.4 Q($boss->fullname->title\("Don"\);)
132 350.4 Q($boss->fullname->surname\("Pichon Alvarez"\);)132 362.4 Q
($boss->fullname->christian\("Federico Jesus"\);)132 374.4 Q
($boss->fullname->nickname\("Fred"\);)132 386.4 Q($boss->age\(47\);)132
410.4 Q($boss->peers\("Frank", "Felipe", "Faust"\);)132 422.4 Q
(printf "%s is age %d.\\n", $boss->fullname, $boss->age;)132 446.4 Q
(printf "His peers are: %s\\n", join\(", ", $boss->peers\);)132 458.4 Q
F0 .074(Running it, we see that we')108 482.4 R .074(re still ok.)-.5 F
.074(If you')5.074 F 2.574(dl)-.5 G(ik)-2.574 E 2.574(et)-.1 G 2.574(od)
-2.574 G .074(ump out your object in a nice format, some)-2.574 F .073
(what lik)-.25 F(e)-.1 E .406(the w)108 494.4 R .406
(ay the `x' command w)-.1 F .406(orks in the deb)-.1 F(ugger)-.2 E 2.906
(,y)-.4 G .406(ou could use the Data::Dumper module from)-2.906 F F3(CP)
2.907 E(AN)-.828 E F0(this)2.907 E -.1(wa)108 506.4 S(y:).1 E F1
(use Data::Dumper;)132 523.2 Q(print "Here's the boss:\\n";)132 535.2 Q
(print Dumper\($boss\);)132 547.2 Q F0(Which sho)108 571.2 Q
(ws us something lik)-.25 E 2.5(et)-.1 G(his:)-2.5 E 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(15)184.145 E EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(Here's the boss:)132
84 Q($VAR1 = bless\( {)132 96 Q(_CENSUS => \\1,)162 108 Q
(FULLNAME => bless\( {)162 120 Q(TITLE => 'Don',)288 132 Q
(SURNAME => 'Pichon Alvarez',)288 144 Q(NICK => 'Fred',)288 156 Q
(CHRISTIAN => 'Federico Jesus')288 168 Q(}, 'Fullname' \),)276 180 Q
(AGE => 47,)162 192 Q(PEERS => [)162 204 Q('Frank',)228 216 Q('Felipe',)
228 228 Q('Faust')228 240 Q(])216 252 Q(}, 'Boss' \);)150 264 Q F0 .211
(Hm.... something')108 288 R 2.711(sm)-.55 G .211(issing there.)-2.711 F
.21(What about the salary)5.211 F 2.71(,s)-.65 G .21(tart date, and)
-2.71 F/F2 9/Times-Roman@0 SF(ID)2.71 E F0 2.71(\214elds? W)2.71 F .21
(ell, we ne)-.8 F -.15(ve)-.25 G 2.71(rs).15 G .21(et them)-2.71 F 1.716
(to an)108 300 R 1.716(ything, e)-.15 F -.15(ve)-.25 G 4.216(nu).15 G
1.716(ndef, so the)-4.216 F 4.216(yd)-.15 G(on')-4.216 E 4.217(ts)-.18 G
(ho)-4.217 E 4.217(wu)-.25 G 4.217(pi)-4.217 G 4.217(nt)-4.217 G 1.717
(he hash')-4.217 F 4.217(sk)-.55 G -.15(ey)-4.317 G 4.217(s. The).15 F
(Emplo)4.217 E 1.717(yee class has no)-.1 F/F3 10/Times-Italic@0 SF(ne)
4.217 E(w\(\))-.15 E F0 .306(method of its o)108 312 R .306(wn, and the)
-.25 F F3(ne)2.805 E(w\(\))-.15 E F0 .305(method in Person doesn')2.805
F 2.805(tk)-.18 G(no)-2.805 E 2.805(wa)-.25 G .305(bout Emplo)-2.805 F
2.805(yees. \(Nor)-.1 F .305(should it: proper)2.805 F F2(OO)108 324 Q
F0 .02(design dictates that a subclass be allo)2.52 F .02(wed to kno)
-.25 F 2.52(wa)-.25 G .02(bout its immediate superclass, b)-2.52 F .021
(ut ne)-.2 F -.15(ve)-.25 G 2.521(rv).15 G(ice-v)-2.521 E(ersa.\))-.15 E
(So let')108 336 Q 2.5<738c>-.55 G 2.5(xu)-2.5 G(p)-2.5 E F3
(Employee::ne)2.5 E(w\(\))-.15 E F0(this w)2.5 E(ay:)-.1 E F1(sub new {)
132 352.8 Q(my $proto = shift;)156 364.8 Q(my $class = ref\($proto\))156
376.8 Q/F4 10/Symbol SF<efef>6 E F1($proto;)6 E(my $self)156 388.8 Q 6
(=$)12 G(class->SUPER::new\(\);)-6 E 42($self->{SALARY} =)156 400.8 R
(undef;)6 E 66($self->{ID} =)156 412.8 R(undef;)6 E 18
($self->{START_DATE} =)156 424.8 R(undef;)6 E(bless \($self, $class\);)
156 436.8 Q 6(#r)60 G(econsecrate)-6 E(return $self;)156 448.8 Q(})132
460.8 Q F0(No)108 484.8 Q 2.5(wi)-.25 G 2.5(fy)-2.5 G
(ou dump out an Emplo)-2.5 E(yee or Boss object, you')-.1 E
(ll \214nd that ne)-.1 E 2.5<778c>-.25 G(elds sho)-2.5 E 2.5(wu)-.25 G
2.5(pt)-2.5 G(here no)-2.5 E -.65(w.)-.25 G/F5 10/Times-Bold@0 SF -9.438
(MM)108 507.6 S -5.558(uu)9.438 G -2.778(ll)5.558 G -3.328(tt)2.778 G
-2.778(ii)3.328 G -5.558(pp)2.778 G -2.778(ll)5.558 G 8.876 -4.438(ee I)
2.778 H(In).55 E(nh)-5.558 E(he)-5.558 E(er)-4.438 E(ri)-4.438 E(it)
-2.778 E(ta)-3.328 E(an)-4.998 E(nc)-5.558 E(ce)-4.438 E(e)-4.438 E F0
.238(Ok, at the risk of confusing be)108 524.4 R .238(ginners and anno)
-.15 F(ying)-.1 E F2(OO)2.738 E F0 .238(gurus, it')2.738 F 2.738(st)-.55
G .238(ime to confess that Perl')-2.738 F 2.738(so)-.55 G .238
(bject system)-2.738 F 1.262(includes that contro)108 536.4 R -.15(ve)
-.15 G 1.262(rsial notion kno).15 F 1.262
(wn as multiple inheritance, or)-.25 F F2(MI)3.762 E F0 1.262
(for short.)3.762 F 1.262(All this means is that)6.262 F 1.513
(rather than ha)108 548.4 R 1.512
(ving just one parent class who in turn might itself ha)-.2 F 1.812 -.15
(ve a p)-.2 H 1.512(arent class, etc., that you can).15 F .382
(directly inherit from tw)108 560.4 R 2.882(oo)-.1 G 2.882(rm)-2.882 G
.382(ore parents.)-2.882 F(It')5.382 E 2.882(st)-.55 G .382
(rue that some uses of)-2.882 F F2(MI)2.882 E F0 .383
(can get you into trouble, although)2.882 F
(hopefully not quite so much trouble with Perl as with dubiously-)108
572.4 Q F2(OO)A F0(languages lik)2.5 E 2.5(eC)-.1 G/F6 8/Times-Roman@0
SF -1(++)-3.5 -1.2 O F0(.)1.2 I 1.529(The w)108 589.2 R 1.529(ay it w)
-.1 F 1.529(orks is actually pretty simple: just put more than one pack\
age name in your)-.1 F F1(@ISA)4.028 E F0(array)4.028 E(.)-.65 E .922(W\
hen it comes time for Perl to go \214nding methods for your object, it \
looks at each of these packages in)108 601.2 R(order)108 613.2 Q 5.529
(.W)-.55 G .529(ell, kinda.)-6.329 F(It')5.529 E 3.029(sa)-.55 G .529
(ctually a fully recursi)-3.029 F -.15(ve)-.25 G 3.029(,d).15 G .529
(epth-\214rst order)-3.029 F 5.529(.C)-.55 G .529(onsider a b)-5.529 F
.528(unch of)-.2 F F1(@ISA)3.028 E F0 .528(arrays lik)3.028 F(e)-.1 E
(this:)108 625.2 Q F1 18(@First::ISA =)132 642 R(qw\( Alpha \);)6 E 12
(@Second::ISA =)132 654 R(qw\( Beta \);)6 E 18(@Third::ISA =)132 666 R
(qw\( First Second \);)6 E F0(If you ha)108 690 Q .3 -.15(ve a)-.2 H 2.5
(no).15 G(bject of class Third:)-2.5 E F1(my $ob = Third->new\(\);)132
706.8 Q($ob->spin\(\);)132 718.8 Q F0 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(16)184.145 E EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E(Ho)108 84 Q 3.625(wd)-.25 G 3.625(ow)
-3.625 G 3.625<658c>-3.625 G 1.125(nd a)-3.625 F/F1 10/Times-Italic@0 SF
(spin\(\))3.625 E F0 1.125(method \(or a)3.625 F F1(ne)3.626 E(w\(\))
-.15 E F0 1.126(method for that matter\)?)3.626 F 1.126
(Because the search is depth-\214rst,)6.126 F(classes will be look)108
96 Q(ed up in the follo)-.1 E
(wing order: Third, First, Alpha, Second, and Beta.)-.25 E 1.001
(In practice, fe)108 112.8 R 3.501(wc)-.25 G 1.001(lass modules ha)
-3.501 F 1.301 -.15(ve b)-.2 H 1.001(een seen that actually mak).15 F
3.501(eu)-.1 G 1.001(se of)-3.501 F/F2 9/Times-Roman@0 SF(MI)3.5 E F0 6
(.O)C 1(ne nearly al)-6 F -.1(wa)-.1 G 1(ys chooses).1 F .608
(simple containership of one class within another o)108 124.8 R -.15(ve)
-.15 G(r).15 E F2(MI)3.108 E F0 5.608(.T)C(hat')-5.608 E 3.108(sw)-.55 G
.708 -.05(hy o)-3.108 H .608(ur Person object).05 F F1(contained)3.109 E
F0 3.109(aF)3.109 G(ull-)-3.109 E(name object.)108 136.8 Q(That doesn')5
E 2.5(tm)-.18 G(ean it)-2.5 E F1(was)2.5 E F0(one.)2.5 E(Ho)108 153.6 Q
(we)-.25 E -.15(ve)-.25 G .985 -.4(r, t).15 H .185
(here is one particular area where).4 F F2(MI)2.685 E F0 .184
(in Perl is rampant: borro)2.685 F .184(wing another class')-.25 F 2.684
(sc)-.55 G .184(lass methods.)-2.684 F 1.684
(This is rather common, especially with some b)108 165.6 R 1.684
(undled `)-.2 F(`objectless')-.74 E 4.184('c)-.74 G 1.684(lasses, lik)
-4.184 F 4.185(eE)-.1 G(xporter)-4.185 E 4.185(,D)-.4 G(ynaLoader)-4.185
E(,)-.4 E(AutoLoader)108 177.6 Q 2.731(,a)-.4 G .231(nd SelfLoader)
-2.731 F 5.231(.T)-.55 G .231(hese classes do not pro)-5.231 F .231
(vide constructors; the)-.15 F 2.731(ye)-.15 G .23
(xist only so you may inherit)-2.881 F .908(their class methods.)108
189.6 R(\(It')5.908 E 3.408(sn)-.55 G .908(ot entirely clear wh)-3.408 F
3.408(yi)-.05 G .908(nheritance w)-3.408 F .908
(as done here rather than traditional module)-.1 F(importation.\))108
201.6 Q -.15(Fo)108 218.4 S 2.5(re).15 G(xample, here is the)-2.65 E F2
(POSIX)2.5 E F0(module')2.5 E(s)-.55 E/F3 10/Courier@0 SF(@ISA:)2.5 E
(package POSIX;)132 235.2 Q(@ISA = qw\(Exporter DynaLoader\);)132 247.2
Q F0(The)108 271.2 Q F2(POSIX)3.512 E F0 1.012(module isn')3.512 F 3.512
(tr)-.18 G 1.011(eally an object module, b)-3.512 F 1.011
(ut then, neither are Exporter or DynaLoader)-.2 F 6.011(.T)-.55 G(he)
-6.011 E(y')-.15 E(re)-.5 E(just lending their classes' beha)108 283.2 Q
(viours to)-.2 E F2(POSIX)2.5 E F0(.)A(Wh)108 300 Q 4.166(yd)-.05 G(on')
-4.166 E 4.166(tp)-.18 G 1.666(eople use)-4.166 F F2(MI)4.166 E F0 1.666
(for object methods much?)4.166 F 1.666(One reason is that it can ha)
6.666 F 1.966 -.15(ve c)-.2 H 1.666(omplicated side-).15 F(ef)108 312 Q
3.867(fects. F)-.25 F 1.367
(or one thing, your inheritance graph \(no longer a tree\) might con)
-.15 F -.15(ve)-.4 G -.18(rg).15 G 3.866(eb).18 G 1.366
(ack to the same base)-3.866 F 3.51(class. Although)108 324 R 1.01
(Perl guards ag)3.51 F 1.01(ainst recursi)-.05 F 1.31 -.15(ve i)-.25 H
1.01(nheritance, merely ha).15 F 1.01
(ving parents who are related to each)-.2 F 1.304
(other via a common ancestor)108 336 R 3.804(,i)-.4 G 1.304
(ncestuous though it sounds, is not forbidden.)-3.804 F 1.303
(What if in our Third class)6.303 F(sho)108 348 Q .012(wn abo)-.25 F
.312 -.15(ve w)-.15 H 2.512(ew).15 G .012(anted its)-2.612 F F1(ne)2.512
E(w\(\))-.15 E F0 .012(method to also call both o)2.512 F -.15(ve)-.15 G
.013(rridden constructors in its tw).15 F 2.513(op)-.1 G .013
(arent classes?)-2.513 F(The)108 360 Q F2(SUPER)2.717 E F0 .217
(notation w)2.717 F .217(ould only \214nd the \214rst one.)-.1 F .217
(Also, what about if the Alpha and Beta classes both had)5.217 F 2.846
(ac)108 372 S .346(ommon ancestor)-2.846 F 2.846(,l)-.4 G(ik)-2.846 E
2.846(eN)-.1 G 2.846(ought? If)-2.846 F .346(you k)2.846 F .346
(ept climbing up the inheritance tree calling o)-.1 F -.15(ve)-.15 G
.346(rridden methods,).15 F(you')108 384 Q 2.5(de)-.5 G(nd up calling)
-2.5 E F1(Nought::ne)2.5 E(w\(\))-.15 E F0
(twice, which might well be a bad idea.)2.5 E/F4 9/Times-Bold@0 SF
-6.496(UU)108 406.8 S -6.496(NN)6.496 G -3.499(II)6.496 G -6.496(VV)
3.499 G -6.001(EE)6.496 G -6.496(RR)6.001 G -5.002(SS)6.496 G -6.496(AA)
5.002 G -6.001(LL)6.496 G/F5 10/Times-Bold@0 SF 6.656 -3.328(:: T)6.001
H(Th)-3.34 E(he)-5.558 E 2.5(eR)-4.438 G(Ro)-9.718 E(oo)-4.998 E(ot)
-4.998 E 2.5(to)-3.328 G(of)-7.498 E 2.5(fA)-3.328 G(Al)-9.718 E(ll)
-2.778 E 2.5(lO)-2.778 G(Ob)-10.278 E(bj)-5.558 E(je)-3.328 E(ec)-4.438
E(ct)-4.438 E(ts)-3.328 E(s)-3.888 E F0 -.8(Wo)108 423.6 S(uldn').8 E
2.929(ti)-.18 G 2.929(tb)-2.929 G 2.929(ec)-2.929 G(on)-2.929 E -.15(ve)
-.4 G .428
(nient if all objects were rooted at some ultimate base class?).15 F
.428(That w)5.428 F .428(ay you could gi)-.1 F -.15(ve)-.25 G -2.15 -.25
(ev e)108 435.6 T .459(ry object common methods without ha).25 F .459
(ving to go and add it to each and e)-.2 F -.15(ve)-.25 G(ry).15 E F3
(@ISA)2.96 E F0 5.46(.W)C .46(ell, it turns out)-6.26 F .482
(that you can.)108 447.6 R -1.1(Yo)5.482 G 2.982(ud)1.1 G(on')-2.982 E
2.982(ts)-.18 G .482(ee it, b)-2.982 F .482(ut Perl tacitly and irre)-.2
F -.2(vo)-.25 G .481(cably assumes that there').2 F 2.981(sa)-.55 G
2.981(ne)-2.981 G .481(xtra element at the)-3.131 F .303(end of)108
459.6 R F3(@ISA:)2.803 E F0 .303(the class)2.803 F F2(UNIVERSAL)2.803 E
F0 5.303(.I)C 2.803(n5)-5.303 G .303
(.003, there were no prede\214ned methods there, b)-2.803 F .304
(ut you could put)-.2 F(whate)108 471.6 Q -.15(ve)-.25 G 2.5(ry).15 G
(ou felt lik)-2.5 E 2.5(ei)-.1 G(nto it.)-2.5 E(Ho)108 488.4 Q(we)-.25 E
-.15(ve)-.25 G 1.958 -.4(r, a).15 H 3.657(so).4 G 3.657(f5)-3.657 G
1.157(.004 \(or some sub)-3.657 F -.15(ve)-.15 G(rsi).15 E 1.457 -.15
(ve r)-.25 H 1.157(eleases, lik).15 F 3.657(e5)-.1 G(.003_08\),)-3.657 E
F2(UNIVERSAL)3.657 E F0 1.157(has some methods in it)3.657 F(already)108
500.4 Q 5.377(.T)-.65 G .377(hese are b)-5.377 F .378
(uilt-in to your Perl binary)-.2 F 2.878(,s)-.65 G 2.878(ot)-2.878 G(he)
-2.878 E 2.878(yd)-.15 G(on')-2.878 E 2.878(tt)-.18 G(ak)-2.878 E 2.878
(ea)-.1 G .678 -.15(ny ex)-2.878 H .378(tra time to load.).15 F .378
(Prede\214ned meth-)5.378 F .105(ods include)108 512.4 R F1(isa\(\))
2.605 E F0(,)A F1(can\(\))2.605 E F0 2.605(,a)C(nd)-2.605 E/F6 9
/Times-Italic@0 SF(VERSION)2.605 E F1(\(\))A F0(.)A F1(isa\(\))5.105 E
F0 .105(tells you whether an object or class `)2.605 F(`is')-.74 E 2.605
('a)-.74 G .105(nother one without)-2.605 F(ha)108 524.4 Q(ving to tra)
-.2 E -.15(ve)-.2 G(rse the hierarch).15 E 2.5(yy)-.05 G(ourself:)-2.5 E
F3($has_io = $fd->isa\("IO::Handle"\);)126 541.2 Q
($itza_handle = IO::Socket->isa\("IO::Handle"\);)126 553.2 Q F0(The)108
577.2 Q F1(can\(\))2.946 E F0 .446(method, called ag)2.946 F .446
(ainst that object or class, reports back whether its string ar)-.05 F
.447(gument is a callable)-.18 F(method name in that class.)108 589.2 Q
(In f)5 E(act, it gi)-.1 E -.15(ve)-.25 G 2.5(sy).15 G
(ou back a function reference to that method:)-2.5 E F3
($his_print_method = $obj->can\('as_string'\);)126 606 Q F0(Finally)108
630 Q 3.272(,t)-.65 G(he)-3.272 E F2(VERSION)3.272 E F0 .772
(method checks whether the class \(or the object')3.272 F 3.271(sc)-.55
G .771(lass\) has a package global called)-3.271 F F3($VERSION)108 642 Q
F0(that')2.5 E 2.5(sh)-.55 G(igh enough, as in:)-2.5 E F3
(Some_Module->VERSION\(3.0\);)132 658.8 Q($his_vers = $ob->VERSION\(\);)
132 670.8 Q F0(Ho)108 694.8 Q(we)-.25 E -.15(ve)-.25 G 1.333 -.4(r, w)
.15 H 3.033(ed).4 G(on')-3.033 E 3.033(tu)-.18 G .533(sually call)-3.033
F F2(VERSION)3.033 E F0(ourselv)3.033 E 3.033(es. \(Remember)-.15 F .534
(that an all upper)3.034 F .534(-case function name is a)-.2 F 1.095
(Perl con)108 706.8 R -.15(ve)-.4 G 1.095(ntion that indicates that the\
 function will be automatically used by Perl in some w).15 F(ay)-.1 E
3.594(.\) In)-.65 F(this)3.594 E(case, it happens when you say)108 718.8
Q 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(17)184.145 E EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(use Some_Module 3.0;)
132 84 Q F0(If you w)108 108 Q(anted to add v)-.1 E
(ersioning to your Person class e)-.15 E(xplained abo)-.15 E -.15(ve)
-.15 G 2.5(,j).15 G(ust add this to Person.pm:)-2.5 E F1
(use vars qw\($VERSION\);)132 124.8 Q($VERSION = '1.1';)132 136.8 Q F0
(and then in Emplo)108 160.8 Q(yee.pm could you can say)-.1 E F1
(use Employee 1.1;)132 177.6 Q F0 .007(And it w)108 201.6 R .007
(ould mak)-.1 F 2.507(es)-.1 G .007(ure that you ha)-2.507 F .307 -.15
(ve a)-.2 H 2.507(tl).15 G .007(east that v)-2.507 F .008
(ersion number or higher a)-.15 F -.25(va)-.2 G 5.008(ilable. This).25 F
.008(is not the same)2.508 F(as loading in that e)108 213.6 Q(xact v)
-.15 E(ersion number)-.15 E 5(.N)-.55 G 2.5(om)-5 G
(echanism currently e)-2.5 E
(xists for concurrent installation of multi-)-.15 E(ple v)108 225.6 Q
(ersions of a module.)-.15 E(Lamentably)5 E(.)-.65 E/F2 9/Times-Bold@0
SF -6.496(AA)72 242.4 S -2.5(ll)6.496 G -2.995(tt)2.5 G -3.994(ee)2.995
G 5.603 -3.994(rr n)3.994 H(na)-1.008 E(at)-4.498 E(te)-2.995 E 2.25(eO)
-3.994 G(Ob)-9.25 E(bj)-5.002 E(je)-2.995 E(ec)-3.994 E(ct)-3.994 E 2.25
(tR)-2.995 G(Re)-8.746 E(ep)-3.994 E(pr)-5.002 E -.162(re)-3.994 G(es)
-3.832 E(se)-3.499 E(en)-3.994 E(nt)-5.002 E(ta)-2.995 E(at)-4.498 E(ti)
-2.995 E(io)-2.5 E(on)-4.498 E(ns)-5.002 E(s)-3.499 E F0 .607
(Nothing requires objects to be implemented as hash references.)108
254.4 R .607(An object can be an)5.607 F 3.107(ys)-.15 G .607
(ort of reference so)-3.107 F .961
(long as its referent has been suitably blessed.)108 266.4 R .961
(That means scalar)5.961 F 3.461(,a)-.4 G(rray)-3.461 E 3.461(,a)-.65 G
.961(nd code references are also f)-3.461 F(air)-.1 E -.05(ga)108 278.4
S(me.).05 E 3.341(As)108 295.2 S .841(calar w)-3.341 F .841(ould w)-.1 F
.841(ork if the object has only one datum to hold.)-.1 F .842
(An array w)5.842 F .842(ould w)-.1 F .842(ork for most cases, b)-.1 F
(ut)-.2 E(mak)108 307.2 Q(es inheritance a bit dodgy because you ha)-.1
E .3 -.15(ve t)-.2 H 2.5(oi).15 G -1.85 -.4(nv e)-2.5 H(nt ne).4 E 2.5
(wi)-.25 G(ndices for the deri)-2.5 E -.15(ve)-.25 G 2.5(dc).15 G
(lasses.)-2.5 E/F3 10/Times-Bold@0 SF -7.218(AA)108 330 S -4.438(rr)
7.218 G -4.438(rr)4.438 G -4.998(aa)4.438 G -4.998(yy)4.998 G 7.776
-3.888(ss a)4.998 H(as)-1.11 E 2.5(sO)-3.888 G(Ob)-10.278 E(bj)-5.558 E
(je)-3.328 E(ec)-4.438 E(ct)-4.438 E(ts)-3.328 E(s)-3.888 E F0 .621
(If the user of your class honors the contract and sticks to the adv)108
346.8 R .62(ertised interf)-.15 F .62(ace, then you can change its)-.1 F
.51(underlying interf)108 358.8 R .51(ace if you feel lik)-.1 F 3.011
(ei)-.1 G 3.011(t. Here')-3.011 F 3.011(sa)-.55 G .511
(nother implementation that conforms to the same interf)-3.011 F(ace)-.1
E 2.5(speci\214cation. This)108 370.8 R(time we')2.5 E(ll use an array \
reference instead of a hash reference to represent the object.)-.1 E F1
(package Person;)132 387.6 Q(use strict;)132 399.6 Q
(my\($NAME, $AGE, $PEERS\) = \( 0 .. 2 \);)132 423.6 Q
(############################################)132 447.6 Q
(## the object constructor \(array version\) ##)132 459.6 Q
(############################################)132 471.6 Q(sub new {)132
483.6 Q(my $self = [];)156 495.6 Q 12($self->[$NAME] =)156 507.6 R 6
(undef; #)6 F(this is unnecessary)6 E 18($self->[$AGE] =)156 519.6 R 6
(undef; #)6 F(as it this)6 E 6($self->[$PEERS] =)156 531.6 R 24([]; #)6
F(but this isn't, really)6 E(bless\($self\);)156 543.6 Q(return $self;)
156 555.6 Q(})132 567.6 Q(sub name {)132 591.6 Q(my $self = shift;)156
603.6 Q(if \(@_\) { $self->[$NAME] = shift })156 615.6 Q
(return $self->[$NAME];)156 627.6 Q(})132 639.6 Q(sub age {)132 663.6 Q
(my $self = shift;)156 675.6 Q(if \(@_\) { $self->[$AGE] = shift })156
687.6 Q(return $self->[$AGE];)156 699.6 Q(})132 711.6 Q F0 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(18)184.145 E EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub peers {)132 84 Q
(my $self = shift;)156 96 Q(if \(@_\) { @{ $self->[$PEERS] } = @_ })156
108 Q(return @{ $self->[$PEERS] };)156 120 Q(})132 132 Q 6(1; #)132 156
R(so the require or use succeeds)6 E F0 -1.1(Yo)108 180 S 2.602(um)1.1 G
.102(ight guess that the array access will be a lot f)-2.602 F .101
(aster than the hash access, b)-.1 F .101(ut the)-.2 F(y')-.15 E .101
(re actually compara-)-.5 F 2.783(ble. The)108 192 R .283
(array is a little bit f)2.783 F(aster)-.1 E 2.783(,b)-.4 G .283
(ut not more than ten or \214fteen percent, e)-2.983 F -.15(ve)-.25 G
2.784(nw).15 G .284(hen you replace the v)-2.784 F(ari-)-.25 E .102
(ables abo)108 204 R .402 -.15(ve l)-.15 H(ik).15 E(e)-.1 E F1($AGE)
2.602 E F0 .102(with literal numbers, lik)2.602 F 2.602(e1)-.1 G 5.102
(.A)-2.602 G .102(bigger dif)-2.5 F .102(ference between the tw)-.25 F
2.601(oa)-.1 G .101(pproaches can be)-2.601 F .646(found in memory use.)
108 216 R 3.146(Ah)5.646 G .647(ash representation tak)-3.146 F .647
(es up more memory than an array representation because)-.1 F .789
(you ha)108 228 R 1.089 -.15(ve t)-.2 H 3.289(oa).15 G .789
(llocation memory for the k)-3.289 F -.15(ey)-.1 G 3.289(sa).15 G 3.289
(sw)-3.289 G .789(ell as the v)-3.289 F 3.289(alues. Ho)-.25 F(we)-.25 E
-.15(ve)-.25 G 1.589 -.4(r, i).15 H 3.289(tr).4 G .789(eally isn')-3.289
F 3.289(tt)-.18 G .789(hat bad, espe-)-3.289 F .725
(cially since as of 5.004, memory is only allocated once for a gi)108
240 R -.15(ve)-.25 G 3.225(nh).15 G .725(ash k)-3.225 F -.15(ey)-.1 G
3.225(,n)-.5 G 3.225(om)-3.225 G .725(atter ho)-3.225 F 3.225(wm)-.25 G
(an)-3.225 E 3.225(yh)-.15 G(ashes)-3.225 E(ha)108 252 Q 1.007 -.15
(ve t)-.2 H .707(hat k).15 F -.15(ey)-.1 G 5.707(.I)-.5 G(t')-5.707 E
3.207(se)-.55 G .707(xpected that sometime in the future, e)-3.357 F
-.15(ve)-.25 G 3.206(nt).15 G .706(hese dif)-3.206 F .706
(ferences will f)-.25 F .706(ade into obscurity as)-.1 F(more ef)108 264
Q(\214cient underlying representations are de)-.25 E(vised.)-.25 E .781
(Still, the tin)108 280.8 R 3.281(ye)-.15 G .782
(dge in speed \(and some)-3.281 F .782(what lar)-.25 F .782
(ger one in memory\) is enough to mak)-.18 F 3.282(es)-.1 G .782
(ome programmers)-3.282 F 1.384
(choose an array representation for simple classes.)108 292.8 R(There')
6.384 E 3.884(ss)-.55 G 1.383(till a little problem with scalability)
-3.884 F 3.883(,t)-.65 G(hough,)-3.883 E
(because later in life when you feel lik)108 304.8 Q 2.5(ec)-.1 G
(reating subclasses, you')-2.5 E(ll \214nd that hashes just w)-.1 E
(ork out better)-.1 E(.)-.55 E/F2 10/Times-Bold@0 SF -7.218(CC)108 327.6
S -2.778(ll)7.218 G -4.998(oo)2.778 G -3.888(ss)4.998 G -5.558(uu)3.888
G 6.196 -4.438(rr ee)5.558 H 7.776 -3.888(ss a)4.438 H(as)-1.11 E 2.5
(sO)-3.888 G(Ob)-10.278 E(bj)-5.558 E(je)-3.328 E(ec)-4.438 E(ct)-4.438
E(ts)-3.328 E(s)-3.888 E F0 1.053
(Using a code reference to represent an object of)108 344.4 R 1.054
(fers some f)-.25 F 1.054(ascinating possibilities.)-.1 F 2.654 -.8
(We c)6.054 H 1.054(an create a ne).8 F(w)-.25 E(anon)108 356.4 Q .438
(ymous function \(closure\) who alone in all the w)-.15 F .438
(orld can see the object')-.1 F 2.938(sd)-.55 G 2.938(ata. This)-2.938 F
.437(is because we put)2.937 F .686(the data into an anon)108 368.4 R
.686(ymous hash that')-.15 F 3.187(sl)-.55 G -.15(ex)-3.187 G .687
(ically visible only to the closure we create, bless, and return as).15
F .046(the object.)108 380.4 R .046(This object')5.046 F 2.546(sm)-.55 G
.046(ethods turn around and call the closure as a re)-2.546 F .045
(gular subroutine call, passing it the)-.15 F .057(\214eld we w)108
392.4 R .058(ant to af)-.1 F 2.558(fect. \(Y)-.25 F .058
(es, the double-function call is slo)-1 F 1.358 -.65(w, b)-.25 H .058
(ut if you w).45 F .058(anted f)-.1 F .058(ast, you w)-.1 F(ouldn')-.1 E
2.558(tb)-.18 G 2.558(eu)-2.558 G(sing)-2.558 E
(objects at all, eh? :\255\))108 404.4 Q(Use w)108 421.2 Q
(ould be similar to before:)-.1 E F1(use Person;)132 438 Q
($him = Person->new\(\);)132 450 Q($him->name\("Jason"\);)132 462 Q
($him->age\(23\);)132 474 Q
($him->peers\( [ "Norbert", "Rhys", "Phineas" ] \);)132 486 Q
(printf "%s is %d years old.\\n", $him->name, $him->age;)132 498 Q
(print "His peers are: ", join\(", ", @{$him->peers}\), "\\n";)132 510 Q
F0 -.2(bu)108 534 S 2.5(tt).2 G(he implementation w)-2.5 E
(ould be radically)-.1 E 2.5(,p)-.65 G(erhaps e)-2.5 E -.15(ve)-.25 G
2.5(ns).15 G(ublimely dif)-2.5 E(ferent:)-.25 E F1(package Person;)132
550.8 Q F0 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(19)
184.145 E EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub new {)132 84 Q
(my $that)162 96 Q 6(=s)12 G(hift;)-6 E(my $class = ref\($that\))162 108
Q/F2 10/Symbol SF<efef>6 E F1($that;)6 E(my $self = {)162 120 Q 6
(NAME =>)180 132 R(undef,)6 E 12(AGE =>)180 144 R(undef,)6 E
(PEERS => [],)180 156 Q(};)162 168 Q(my $closure = sub {)162 180 Q
(my $field = shift;)180 192 Q(if \(@_\) { $self->{$field} = shift })180
204 Q 18(return $self->{$field};)180 216 R(};)156 228 Q
(bless\($closure, $class\);)156 240 Q(return $closure;)156 252 Q(})132
264 Q(sub name)132 288 Q 6({&)18 G 6({$)-6 G(_[0] }\("NAME",)-6 E
(@_[ 1 .. $#_ ] \) })12 E(sub age)132 300 Q 6({&)24 G 6({$)-6 G
(_[0] }\("AGE",)-6 E(@_[ 1 .. $#_ ] \) })18 E(sub peers)132 312 Q 6({&)
12 G 6({$)-6 G(_[0] }\("PEERS", @_[ 1 .. $#_ ] \) })-6 E(1;)132 336 Q F0
.58(Because this object is hidden behind a code reference, it')108 360 R
3.079(sp)-.55 G .579(robably a bit mysterious to those whose back-)
-3.079 F .545(ground is more \214rmly rooted in standard procedural or \
object-based programming languages than in func-)108 372 R 2.149
(tional programming languages whence closures deri)108 384 R -.15(ve)
-.25 G 7.149(.T).15 G 2.148(he object created and returned by the)-7.149
F/F3 10/Times-Italic@0 SF(ne)4.648 E(w\(\))-.15 E F0 .039
(method is itself not a data reference as we')108 396 R .339 -.15(ve s)
-.5 H .039(een before.).15 F(It')5.039 E 2.539(sa)-.55 G 2.539(na)-2.539
G(non)-2.539 E .039(ymous code reference that has within)-.15 F .24
(it access to a speci\214c v)108 408 R .24(ersion \(le)-.15 F .239
(xical binding and instantiation\) of the object')-.15 F 2.739(sd)-.55 G
.239(ata, which are stored in the)-2.739 F(pri)108 420 Q -.25(va)-.25 G
1.19(te v).25 F(ariable)-.25 E F1($self)3.69 E F0 6.19(.A)C 1.19
(lthough this is the same function each time, it contains a dif)-6.19 F
1.19(ferent v)-.25 F 1.19(ersion of)-.15 F F1($self)108 432 Q F0(.)A .14
(When a method lik)108 448.8 R(e)-.1 E F1($him->)2.64 E F3(name)A F0 .14
(\("Jason"\) is called, its implicit zeroth ar)1.666 F .139
(gument is as the in)-.18 F -.2(vo)-.4 G .139(king object).2 F .093
(just as it is with all method calls.)108 460.8 R .093
(But in this case, it')5.093 F 2.593(so)-.55 G .093
(ur code reference \(something lik)-2.593 F 2.593(eaf)-.1 G .093
(unction pointer)-2.593 F 1.579(in C)108 472.8 R/F4 8/Times-Roman@0 SF
-1(++)-1 -1.2 O F0 4.079(,b)1.2 K 1.578(ut with deep binding of le)
-4.279 F 1.578(xical v)-.15 F 4.078(ariables\). There')-.25 F 4.078(sn)
-.55 G 1.578(ot a lot to be done with a code reference)-4.078 F(be)108
484.8 Q .652(yond calling it, so that')-.15 F 3.152(sj)-.55 G .652
(ust what we do when we say)-3.152 F F1(&{$_[0]})3.152 E F0 5.652(.T)C
.652(his is just a re)-5.652 F .653(gular function call,)-.15 F .466
(not a method call.)108 496.8 R .466(The initial ar)5.466 F .466
(gument is the string `)-.18 F(`)-.74 E/F5 9/Times-Roman@0 SF -.315(NA)C
(ME).315 E F0 -.74('')C 2.965(,a).74 G .465(nd an)-2.965 F 2.965(yr)-.15
G .465(emaining ar)-2.965 F .465(guments are whate)-.18 F -.15(ve)-.25 G
(r).15 E(had been passed to the method itself.)108 508.8 Q .07(Once we')
108 525.6 R .07(re e)-.5 F -.15(xe)-.15 G .07
(cuting inside the closure that had been created in).15 F F3(ne)2.571 E
(w\(\))-.15 E F0 2.571(,t)C(he)-2.571 E F1($self)2.571 E F0 .071
(hash reference suddenly)2.571 F .275(becomes visible.)108 537.6 R .275
(The closure grabs its \214rst ar)5.275 F .275(gument \(")-.18 F F5
-.315(NA)C(ME).315 E F0 1.755 -.74('' i)D 2.775(nt).74 G .275
(his case because that')-2.775 F 2.775(sw)-.55 G .275(hat the)-2.775 F
F3(name\(\))2.774 E F0 1.275
(method passed it\), and uses that string to subscript into the pri)108
549.6 R -.25(va)-.25 G 1.275(te hash hidden in its unique v).25 F 1.275
(ersion of)-.15 F F1($self)108 561.6 Q F0(.)A .261
(Nothing under the sun will allo)108 578.4 R 2.761(wa)-.25 G -.15(ny)
-2.761 G .261(one outside the e).15 F -.15(xe)-.15 G .261
(cuting method to be able to get at this hidden data.).15 F -.8(We)108
590.4 S .08(ll, nearly nothing.).8 F -1.1(Yo)5.08 G(u)1.1 E F3(could)
2.58 E F0 .081(single step through the program using the deb)2.58 F .081
(ugger and \214nd out the pieces)-.2 F(while you')108 602.4 Q
(re in the method, b)-.5 E(ut e)-.2 E -.15(ve)-.25 G
(ryone else is out of luck.).15 E .824(There, if that doesn')108 619.2 R
3.324(te)-.18 G .824(xcite the Scheme folks, then I just don')-3.474 F
3.324(tk)-.18 G(no)-3.324 E 3.324(ww)-.25 G .824(hat will.)-3.324 F -.35
(Tr)5.824 G .823(anslation of this tech-).35 F 1.275(nique into C)108
631.2 R F4 -1(++)-1 -1.2 O F0 3.775(,J)1.2 K -.2(av)-3.775 G 1.275
(a, or an)-.05 F 3.775(yo)-.15 G 1.276
(ther braindead-static language is left as a futile e)-3.775 F -.15(xe)
-.15 G 1.276(rcise for a\214cionados of).15 F(those camps.)108 643.2 Q
-1.1(Yo)108 660 S 2.738(uc)1.1 G .238(ould e)-2.738 F -.15(ve)-.25 G
2.738(na).15 G .238(dd a bit of nosiness via the)-2.738 F F3(caller\(\))
2.738 E F0 .238(function and mak)2.738 F 2.738(et)-.1 G .238
(he closure refuse to operate unless)-2.738 F .26(called via its o)108
672 R .26(wn package.)-.25 F .26(This w)5.26 F .26
(ould no doubt satisfy certain f)-.1 F .26
(astidious concerns of programming police)-.1 F(and related puritans.)
108 684 Q .099(If you were w)108 700.8 R .098
(ondering when Hubris, the third principle virtue of a programmer)-.1 F
2.598(,w)-.4 G .098(ould come into play)-2.698 F 2.598(,h)-.65 G(ere)
-2.598 E 1.187(you ha)108 712.8 R 1.487 -.15(ve i)-.2 H 1.187
(t. \(More seriously).15 F 3.687(,H)-.65 G 1.188
(ubris is just the pride in craftsmanship that comes from ha)-3.687 F
1.188(ving written a)-.2 F(sound bit of well-designed code.\))108 724.8
Q 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(20)184.145 E EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 9/Times-Bold@0 SF 10.292 -6.496(AA UU)
72 84 T 9.59 -6.001(TT O)6.496 H(OL)-.999 E(LO)-6.001 E -.36(OA)-7 G(AD)
-6.136 E(D:)-6.496 E 2.25(:P)-2.995 G(Pr)-7.747 E -.162(ro)-3.994 G(ox)
-4.336 E(xy)-4.498 E 2.25(yM)-4.498 G(Me)-10.744 E(et)-3.994 E(th)-2.995
E(ho)-5.002 E(od)-4.498 E(ds)-5.002 E(s)-3.499 E F0 .503
(Autoloading is a w)108 96 R .503
(ay to intercept calls to unde\214ned methods.)-.1 F .503
(An autoload routine may choose to create a)5.503 F(ne)108 108 Q 2.92
(wf)-.25 G .42(unction on the \215y)-2.92 F 2.92(,e)-.65 G .421
(ither loaded from disk or perhaps just)-2.92 F/F2 10/Times-Italic@0 SF
-.15(ev)2.921 G(al\(\)).15 E F0 .421(ed right there.)B .421
(This de\214ne-on-the-\215y)5.421 F(strate)108 120 Q(gy is wh)-.15 E 2.5
(yi)-.05 G(t')-2.5 E 2.5(sc)-.55 G(alled autoloading.)-2.5 E 1.122
(But that')108 136.8 R 3.622(so)-.55 G 1.122(nly one possible approach.)
-3.622 F 1.121(Another one is to just ha)6.121 F 1.421 -.15(ve t)-.2 H
1.121(he autoloaded method itself directly).15 F(pro)108 148.8 Q .781
(vide the requested service.)-.15 F .782(When used in this w)5.782 F(ay)
-.1 E 3.282(,y)-.65 G .782(ou may think of autoloaded methods as `)
-3.282 F(`proxy')-.74 E(')-.74 E(methods.)108 160.8 Q 1.241(When Perl t\
ries to call an unde\214ned function in a particular package and that f\
unction is not de\214ned, it)108 177.6 R .148
(looks for a function in that same package called A)108 189.6 R(UT)-.55
E(OLO)-.18 E 2.648(AD. If)-.35 F .148(one e)2.648 F .148(xists, it')-.15
F 2.648(sc)-.55 G .148(alled with the same ar)-2.648 F(gu-)-.18 E .915
(ments as the original function w)108 201.6 R .915(ould ha)-.1 F 1.215
-.15(ve h)-.2 H 3.415(ad. The).15 F .914
(fully-quali\214ed name of the function is stored in that)3.415 F
(package')108 213.6 Q 2.8(sg)-.55 G .3(lobal v)-2.8 F(ariable)-.25 E/F3
10/Courier@0 SF($AUTOLOAD)2.8 E F0 5.3(.O)C .301
(nce called, the function can do an)-5.3 F .301(ything it w)-.15 F .301
(ould lik)-.1 F .301(e, including)-.1 F .622(de\214ning a ne)108 225.6 R
3.122(wf)-.25 G .622
(unction by the right name, and then doing a really f)-3.122 F(anc)-.1 E
3.122(yk)-.15 G .622(ind of)-3.122 F F3(goto)3.122 E F0 .622
(right to it, erasing)3.122 F(itself from the call stack.)108 237.6 Q
1.125(What does this ha)108 254.4 R 1.425 -.15(ve t)-.2 H 3.625(od).15 G
3.625(ow)-3.625 G 1.125(ith objects?)-3.625 F 1.125(After all, we k)
6.125 F 1.126(eep talking about functions, not methods.)-.1 F -.8(We)
6.126 G(ll,).8 E .062(since a method is just a function with an e)108
266.4 R .062(xtra ar)-.15 F .062(gument and some f)-.18 F .061
(ancier semantics about where it')-.1 F 2.561(sf)-.55 G(ound,)-2.561 E
.096(we can use autoloading for methods, too.)108 278.4 R .096
(Perl doesn')5.096 F 2.596(ts)-.18 G .097(tart looking for an A)-2.596 F
(UT)-.55 E(OLO)-.18 E .097(AD method until it has)-.35 F -.15(ex)108
290.4 S 1.699(hausted the recursi).15 F 1.999 -.15(ve h)-.25 H 1.699
(unt up through).15 F F3(@ISA)4.199 E F0 4.199(,t)C 4.199(hough. Some)
-4.199 F 1.698(programmers ha)4.198 F 1.998 -.15(ve e)-.2 H -.15(ve)-.1
G 4.198(nb).15 G 1.698(een kno)-4.198 F 1.698(wn to)-.25 F
(de\214ne a UNIVERSAL::A)108 302.4 Q(UT)-.55 E(OLO)-.18 E
(AD method to trap unresolv)-.35 E(ed method calls to an)-.15 E 2.5(yk)
-.15 G(ind of object.)-2.5 E/F4 10/Times-Bold@0 SF 11.436 -7.218(AA u)
108 325.2 T(ut)1.66 E(to)-3.328 E(ol)-4.998 E(lo)-2.778 E(oa)-4.998 E
(ad)-4.998 E(de)-5.558 E(ed)-4.438 E 2.5(dD)-5.558 G(Da)-9.718 E(at)
-4.998 E(ta)-3.328 E 2.5(aM)-4.998 G(Me)-11.938 E(et)-4.438 E(th)-3.328
E(ho)-5.558 E(od)-4.998 E(ds)-5.558 E(s)-3.888 E F0 -1.1(Yo)108 342 S
3.962(up)1.1 G 1.462(robably be)-3.962 F -.05(ga)-.15 G 3.962(nt).05 G
3.962(og)-3.962 G 1.462
(et a little suspicious about the duplicated code w)-3.962 F 1.463
(ay back earlier when we \214rst)-.1 F(sho)108 354 Q 1.417
(wed you the Person class, and then later the Emplo)-.25 F 1.417
(yee class.)-.1 F 1.417(Each method used to access the hash)6.417 F .954
(\214elds look)108 366 R .954(ed virtually identical.)-.1 F .954
(This should ha)5.954 F 1.255 -.15(ve t)-.2 H .955
(ickled that great programming virtue, Impatience, b).15 F(ut)-.2 E
(for the time, we let Laziness win out, and so did nothing.)108 378 Q
(Proxy methods can cure this.)5 E .109(Instead of writing a ne)108 394.8
R 2.609(wf)-.25 G .109(unction e)-2.609 F -.15(ve)-.25 G .109
(ry time we w).15 F .109(ant a ne)-.1 F 2.609(wd)-.25 G .109
(ata \214eld, we')-2.609 F .109(ll use the autoload mechanism to)-.1 F
1.592(generate \(actually)108 406.8 R 4.092(,m)-.65 G 1.592
(imic\) methods on the \215y)-4.092 F 6.592(.T)-.65 G 4.092(ov)-7.392 G
1.593(erify that we')-4.242 F 1.593(re accessing a v)-.5 F 1.593
(alid member)-.25 F 4.093(,w)-.4 G 4.093(ew)-4.093 G(ill)-4.093 E .096
(check ag)108 418.8 R .096(ainst an)-.05 F F3(_permitted)2.596 E F0 .096
(\(pronounced `)2.596 F(`under)-.74 E .095
(-permitted"\) \214eld, which is a reference to a \214le-scoped)-.2 F
(le)108 430.8 Q .658(xical \(lik)-.15 F -5.657 3.158(eaC \214)-.1 H .659
(le static\) hash of permitted \214elds in this record called)-3.158 F
F3(%fields)3.159 E F0 5.659(.W)C .759 -.05(hy t)-5.659 H .659
(he underscore?).05 F -.15(Fo)108 442.8 S 2.5(rt).15 G
(he same reason as the _CENSUS \214eld we once used: as a mark)-2.5 E
(er that means `)-.1 E(`for internal use only')-.74 E('.)-.74 E(Here')
108 459.6 Q 2.5(sw)-.55 G
(hat the module initialization code and class constructor will look lik)
-2.5 E 2.5(ew)-.1 G(hen taking this approach:)-2.5 E F3(package Person;)
132 476.4 Q(use Carp;)132 488.4 Q(use vars qw\($AUTOLOAD\);)132 500.4 Q
6(#i)12 G(t's a package global)-6 E(my %fields = \()132 524.4 Q 42
(name =>)156 536.4 R(undef,)6 E 48(age =>)156 548.4 R(undef,)6 E 36
(peers =>)156 560.4 R(undef,)6 E(\);)132 572.4 Q(sub new {)132 596.4 Q
(my $that)156 608.4 Q 6(=s)12 G(hift;)-6 E(my $class = ref\($that\))156
620.4 Q/F5 10/Symbol SF<efef>6 E F3($that;)6 E(my $self)156 632.4 Q 6
(={)12 G(_permitted => \\%fields,)180 644.4 Q(%fields,)180 656.4 Q(};)
156 668.4 Q(bless $self, $class;)156 680.4 Q(return $self;)156 692.4 Q
(})132 704.4 Q F0 .371(If we w)108 728.4 R .371(anted our record to ha)
-.1 F .671 -.15(ve d)-.2 H(ef).15 E .371(ault v)-.1 F .371
(alues, we could \214ll those in where current we ha)-.25 F -.15(ve)-.2
G F3(undef)3.021 E F0 .371(in the)2.871 F 157.755(8/Jan/97 perl)72 768 R
(5.003, patch 11)2.5 E(21)184.145 E EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(%fields)108 84 Q F0
(hash.)2.5 E 1.059(Notice ho)108 100.8 R 3.559(ww)-.25 G 3.559(es)-3.559
G -2.25 -.2(av e)-3.559 H 3.559(dar).2 G 1.059
(eference to our class data on the object itself?)-3.559 F 1.06
(Remember that it')6.06 F 3.56(si)-.55 G 1.06(mportant to)-3.56 F 1.147
(access class data through the object itself instead of ha)108 112.8 R
1.147(ving an)-.2 F 3.646(ym)-.15 G 1.146(ethod reference)-3.646 F F1
(%fields)3.646 E F0(directly)3.646 E 3.646(,o)-.65 G(r)-3.646 E
(else you w)108 124.8 Q(on')-.1 E 2.5(th)-.18 G -2.25 -.2(av e)-2.5 H
2.5(ad)2.7 G(ecent inheritance.)-2.5 E 1.054(The real magic, though, is\
 going to reside in our proxy method, which will handle all calls to un\
de\214ned)108 141.6 R .574
(methods for objects of class Person \(or subclasses of Person\).)108
153.6 R .574(It has to be called)5.574 F/F2 9/Times-Roman@0 SF -.495(AU)
3.074 G -.162(TO).495 G(LO).162 E(AD)-.315 E F0 5.573(.A)C -.05(ga)
-5.573 G .573(in, it').05 F(s)-.55 E(all caps because it')108 165.6 Q
2.5(sc)-.55 G
(alled for us implicitly by Perl itself, not by a user directly)-2.5 E
(.)-.65 E F1(sub AUTOLOAD {)132 182.4 Q(my $self = shift;)156 194.4 Q
(my $type = ref\($self\))156 206.4 Q(or croak "$self is not an object";)
228 218.4 Q(my $name = $AUTOLOAD;)156 242.4 Q($name =~ s/.*://;)156
254.4 Q 6(#s)18 G(trip fully-qualified portion)-6 E
(unless \(exists $self->{_permitted}->{$name} \) {)156 278.4 Q
(croak "Can't access `$name' field in class $type";)180 290.4 Q(})156
302.4 Q(if \(@_\) {)156 326.4 Q(return $self->{$name} = shift;)180 338.4
Q 6(}e)156 350.4 S(lse {)-6 E(return $self->{$name};)180 362.4 Q(})156
374.4 Q(})132 386.4 Q F0 .327(Pretty nifty)108 410.4 R 2.827(,e)-.65 G
2.827(h? All)-2.827 F .327(we ha)2.827 F .627 -.15(ve t)-.2 H 2.827(od)
.15 G 2.827(ot)-2.827 G 2.827(oa)-2.827 G .327(dd ne)-2.827 F 2.828(wd)
-.25 G .328(ata \214elds is modify)-2.828 F F1(%fields)2.828 E F0 5.328
(.N)C 2.828(on)-5.328 G .828 -.25(ew f)-2.828 H .328(unctions need be)
.25 F(written.)108 422.4 Q 2.77(Ic)108 439.2 S .27(ould ha)-2.77 F .57
-.15(ve a)-.2 H -.2(vo)-.05 G .27(ided the).2 F F1(_permitted)2.77 E F0
.27(\214eld entirely)2.77 F 2.77(,b)-.65 G .27(ut I w)-2.97 F .27
(anted to demonstrate ho)-.1 F 2.77(wt)-.25 G 2.77(os)-2.77 G .27
(tore a reference)-2.77 F(to class data on the object so you w)108 451.2
Q(ouldn')-.1 E 2.5(th)-.18 G -2.25 -.2(av e)-2.5 H
(to access that class data directly from an object method.)2.7 E/F3 10
/Times-Bold@0 SF -3.888(II)108 474 S -5.558(nn)3.888 G -5.558(hh)5.558 G
-4.438(ee)5.558 G -4.438(rr)4.438 G -2.778(ii)4.438 G -3.328(tt)2.778 G
-4.438(ee)3.328 G 11.116 -5.558(dd A)4.438 H -.5(Au)-1.66 G(ut)-5.058 E
(to)-3.328 E(ol)-4.998 E(lo)-2.778 E(oa)-4.998 E(ad)-4.998 E(de)-5.558 E
(ed)-4.438 E 2.5(dD)-5.558 G(Da)-9.718 E(at)-4.998 E(ta)-3.328 E 2.5(aM)
-4.998 G(Me)-11.938 E(et)-4.438 E(th)-3.328 E(ho)-5.558 E(od)-4.998 E
(ds)-5.558 E(s)-3.888 E F0 .907(But what about inheritance?)108 490.8 R
.907(Can we de\214ne our Emplo)5.907 F .908(yee class similarly?)-.1 F
-1(Ye)5.908 G .908(s, so long as we')1 F .908(re careful)-.5 F(enough.)
108 502.8 Q(Here')108 519.6 Q 2.5(sh)-.55 G .5 -.25(ow t)-2.5 H 2.5(ob)
.25 G 2.5(ec)-2.5 G(areful:)-2.5 E F1(package Employee;)132 536.4 Q
(use Person;)132 548.4 Q(use strict;)132 560.4 Q(use vars qw\(@ISA\);)
132 572.4 Q(@ISA = qw\(Person\);)132 584.4 Q(my %fields = \()132 608.4 Q
54(id =>)156 620.4 R(undef,)6 E 30(salary =>)156 632.4 R(undef,)6 E(\);)
132 644.4 Q F0 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(22)
184.145 E EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF(sub new {)132 84 Q
(my $that)156 96 Q 6(=s)12 G(hift;)-6 E(my $class = ref\($that\))156 108
Q/F2 10/Symbol SF<efef>6 E F1($that;)6 E
(my $self = bless $that->SUPER::new\(\), $class;)156 120 Q
(my\($element\);)156 132 Q(foreach $element \(keys %fields\) {)156 144 Q
($self->{_permitted}->{$element} = $fields{$element};)180 156 Q(})156
168 Q(@{$self}{keys %fields} = values %fields;)156 180 Q(return $self;)
156 192 Q(})132 204 Q F0 1.686(Once we')108 228 R 1.986 -.15(ve d)-.5 H
1.686(one this, we don').15 F 4.186(te)-.18 G -.15(ve)-4.436 G 4.186(nn)
.15 G 1.686(eed to ha)-4.186 F 1.986 -.15(ve a)-.2 H(n).15 E/F3 9
/Times-Roman@0 SF -.495(AU)4.186 G -.162(TO).495 G(LO).162 E(AD)-.315 E
F0 1.686(function in the Emplo)4.186 F 1.686(yee package,)-.1 F
(because we')108 240 Q(ll grab Person')-.1 E 2.5(sv)-.55 G
(ersion of that via inheritance, and it will all w)-2.65 E
(ork out just \214ne.)-.1 E/F4 9/Times-Bold@0 SF -8.494(MM)72 256.8 S
-3.994(ee)8.494 G -2.995(tt)3.994 G -4.498(aa)2.995 G -3.994(cc)4.498 G
-2.5(ll)3.994 G -4.498(aa)2.5 G -3.499(ss)4.498 G -3.499(ss)3.499 G -2.5
(ii)3.499 G -3.994(cc)2.5 G -4.498(aa)3.994 G 5 -2.5(ll T)4.498 H -.828
(To)-3.501 G(oo)-3.67 E(ol)-4.498 E(ls)-2.5 E(s)-3.499 E F0(Ev)108 268.8
Q 1.128(en though proxy methods can pro)-.15 F 1.129(vide a more con)
-.15 F -.15(ve)-.4 G 1.129(nient approach to making more struct-lik).15
F 3.629(ec)-.1 G(lasses)-3.629 E 1.404
(than tediously coding up data methods as functions, it still lea)108
280.8 R -.15(ve)-.2 G 3.904(sab).15 G 1.404(it to be desired.)-3.904 F
-.15(Fo)6.404 G 3.904(ro).15 G 1.404(ne thing, it)-3.904 F .025
(means you ha)108 292.8 R .325 -.15(ve t)-.2 H 2.525(oh).15 G .025
(andle bogus calls that you don')-2.525 F 2.525(tm)-.18 G .025
(ean to trap via your proxy)-2.525 F 5.025(.I)-.65 G 2.526(ta)-5.025 G
.026(lso means you ha)-2.526 F .326 -.15(ve t)-.2 H(o).15 E
(be quite careful when dealing with inheritance, as detailed abo)108
304.8 Q -.15(ve)-.15 G(.).15 E 1.414(Perl programmers ha)108 321.6 R
1.713 -.15(ve r)-.2 H 1.413(esponded to this by creating se).15 F -.15
(ve)-.25 G 1.413(ral dif).15 F 1.413(ferent class construction classes.)
-.25 F(These)6.413 E .378
(metaclasses are classes that create other classes.)108 333.6 R 2.878
(Ac)5.378 G .378(ouple w)-2.878 F .378(orth looking at are Class::T)-.1
F .378(emplate and Alias.)-.7 F(These and other related metaclasses can\
 be found in the modules directory on CP)108 345.6 Q(AN.)-.92 E/F5 10
/Times-Bold@0 SF -7.218(CC)108 368.4 S -2.778(ll)7.218 G -4.998(aa)2.778
G -3.888(ss)4.998 G -3.888(ss)3.888 G -3.328(::)3.888 G -3.328(::)3.328
G 9.916 -6.668(TT e)3.328 H(em)2.23 E(mp)-8.328 E(pl)-5.558 E(la)-2.778
E(at)-4.998 E(te)-3.328 E(e)-4.438 E F0 .966
(One of the older ones is Class::T)108 385.2 R 3.466(emplate. In)-.7 F
-.1(fa)3.466 G .966(ct, its syntax and interf).1 F .966(ace were sk)-.1
F .965(etched out long before)-.1 F .942(perl5 e)108 397.2 R -.15(ve)
-.25 G 3.442(ns).15 G .942(olidi\214ed into a real thing.)-3.442 F .942
(What it does is pro)5.942 F .943(vide you a w)-.15 F .943(ay to `)-.1 F
(`declare')-.74 E 3.443('ac)-.74 G .943(lass as ha)-3.443 F(ving)-.2 E
.823(objects whose \214elds are of a speci\214c type.)108 409.2 R .823
(The function that does this is called, not surprisingly enough,)5.823 F
/F6 10/Times-Italic@0 SF(struct\(\))108 421.2 Q F0(.)A(Here')108 438 Q
2.5(sas)-.55 G(imple e)-2.5 E(xample of using it:)-.15 E F1
(use Class::Template qw\(struct\);)132 454.8 Q(use Jobbie;)132 466.8 Q 6
(#u)12 G(ser-defined; see below)-6 E(struct 'Fred' => {)132 490.8 Q 42
(one =>)156 502.8 R('$',)6 E 36(many =>)156 514.8 R('@',)6 E
(profession => Jobbie,)156 526.8 Q 6(#c)12 G(alls Jobbie->new\(\))-6 E
(};)132 538.8 Q($ob = Fred->new;)132 562.8 Q($ob->one\("hmmmm"\);)132
574.8 Q($ob->many\(0, "here"\);)132 598.8 Q($ob->many\(1, "you"\);)132
610.8 Q($ob->many\(2, "go"\);)132 622.8 Q
(print "Just set: ", $ob->many\(2\), "\\n";)132 634.8 Q
($ob->profession->salary\(10_000\);)132 658.8 Q F0 -1.1(Yo)108 682.8 S
2.59(uc)1.1 G .09
(an declare types in the struct to be basic Perl types, or user)-2.59 F
.091(-de\214ned types \(classes\).)-.2 F .091(User types will be)5.091 F
(initialized by calling that class')108 694.8 Q(s)-.55 E F6(ne)2.5 E
(w\(\))-.15 E F0(method.)2.5 E(Here')108 711.6 Q 3.817(sar)-.55 G(eal-w)
-3.817 E 1.317(orld e)-.1 F 1.317(xample of using struct generation.)
-.15 F(Let')6.317 E 3.817(ss)-.55 G 1.317(ay you w)-3.817 F 1.317
(anted to o)-.1 F -.15(ve)-.15 G 1.317(rride Perl').15 F 3.816(si)-.55 G
1.316(dea of)-3.816 F F6 -.1(ge)108 723.6 S(thostbyname\(\)).1 E F0(and)
3.895 E F6 -.1(ge)3.895 G(thostbyaddr\(\)).1 E F0 1.395(so that the)
3.895 F 3.895(yw)-.15 G 1.395(ould return objects that acted lik)-3.995
F 3.895(eCs)-.1 G 3.895(tructures. W)-3.895 F(e)-.8 E 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(23)184.145 E EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E(don')108 84 Q 2.5(tc)-.18 G
(are about high-f)-2.5 E(alutin')-.1 E/F1 9/Times-Roman@0 SF(OO)2.5 E F0
2.5(gunk. All)2.5 F(we w)2.5 E(ant is for these objects to act lik)-.1 E
2.5(es)-.1 G(tructs in the C sense.)-2.5 E/F2 10/Courier@0 SF
(use Socket;)132 100.8 Q(use Net::hostent;)132 112.8 Q
($h = gethostbyname\("perl.com"\);)132 124.8 Q 6(#o)12 G(bject return)-6
E(printf "perl.com's real name is %s, address %s\\n",)132 136.8 Q
($h->name, inet_ntoa\($h->addr\);)156 148.8 Q F0(Here')108 172.8 Q 2.5
(sh)-.55 G .5 -.25(ow t)-2.5 H 2.5(od).25 G 2.5(ot)-2.5 G
(his using the Class::T)-2.5 E(emplate module.)-.7 E
(The crux is going to be this call:)5 E F2(struct 'Net::hostent' => [)
132 189.6 Q 6(#n)60 G(ote bracket)-6 E 36(name =>)156 201.6 R('$',)6 E
18(aliases =>)156 213.6 R('@',)6 E 12(addrtype =>)156 225.6 R('$',)6 E
12('length' =>)156 237.6 R('$',)6 E 6(addr_list =>)156 249.6 R('@',)6 E
(];)138 261.6 Q F0
(Which creates object methods of those names and types.)108 285.6 Q
(It e)5 E -.15(ve)-.25 G 2.5(nc).15 G(reates a)-2.5 E/F3 10
/Times-Italic@0 SF(ne)2.5 E(w\(\))-.15 E F0(method for us.)2.5 E 1.6 -.8
(We c)108 302.4 T(ould also ha).8 E .3 -.15(ve i)-.2 H
(mplemented our object this w).15 E(ay:)-.1 E F2
(struct 'Net::hostent' => {)132 319.2 Q 6(#n)60 G(ote brace)-6 E 36
(name =>)156 331.2 R('$',)6 E 18(aliases =>)156 343.2 R('@',)6 E 12
(addrtype =>)156 355.2 R('$',)6 E 12('length' =>)156 367.2 R('$',)6 E 6
(addr_list =>)156 379.2 R('@',)6 E(};)138 391.2 Q F0 .237
(and then Class::T)108 415.2 R .237(emplate w)-.7 F .237(ould ha)-.1 F
.536 -.15(ve u)-.2 H .236(sed an anon).15 F .236
(ymous hash as the object type, instead of an anon)-.15 F(ymous)-.15 E
(array)108 427.2 Q 6.031(.T)-.65 G 1.031(he array is f)-6.031 F 1.031
(aster and smaller)-.1 F 3.531(,b)-.4 G 1.031(ut the hash w)-3.731 F
1.031(orks out better if you e)-.1 F -.15(ve)-.25 G 1.031(ntually w).15
F 1.031(ant to do inheri-)-.1 F 2.547(tance. Since)108 439.2 R .047
(for this struct-lik)2.547 F 2.547(eo)-.1 G .047(bject we aren')-2.547 F
2.547(tp)-.18 G .046(lanning on inheritance, this time we')-2.547 F .046
(ll opt for better speed)-.1 F(and size o)108 451.2 Q -.15(ve)-.15 G 2.5
(rb).15 G(etter \215e)-2.5 E(xibility)-.15 E(.)-.65 E(Here')108 468 Q
2.5(st)-.55 G(he whole implementation:)-2.5 E F2(package Net::hostent;)
132 484.8 Q(use strict;)132 496.8 Q(BEGIN {)132 520.8 Q(use Exporter)156
532.8 Q(\(\);)18 E(use vars)156 544.8 Q
(qw\(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS\);)42 E 48(@ISA =)156 556.8 R
(qw\(Exporter\);)6 E 30(@EXPORT =)156 568.8 R
(qw\(gethostbyname gethostbyaddr gethost\);)6 E 12(@EXPORT_OK =)156
580.8 R(qw\()6 E 48($h_name @h_aliases)270 592.8 R 24
($h_addrtype $h_length)270 604.8 R 18(@h_addr_list $h_addr)270 616.8 R
(\);)246 628.8 Q
(%EXPORT_TAGS = \( FIELDS => [ @EXPORT_OK, @EXPORT ] \);)156 640.8 Q(})
132 652.8 Q(use vars)132 664.8 Q(@EXPORT_OK;)36 E F0 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(24)184.145 E EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Courier@0 SF
(use Class::Template qw\(struct\);)132 84 Q(struct 'Net::hostent' => [)
132 96 Q 42(name =>)150 108 R('$',)6 E 24(aliases =>)150 120 R('@',)6 E
18(addrtype =>)150 132 R('$',)6 E 18('length' =>)150 144 R('$',)6 E 12
(addr_list =>)150 156 R('@',)6 E(];)132 168 Q
(sub addr { shift->addr_list->[0] })132 192 Q(sub populate \(@\) {)132
216 Q(return unless @_;)156 228 Q(my $hob = new\(\);)156 240 Q 6(#C)12 G
(lass::Template made this!)-6 E 24($h_name =)156 252 R 78($hob->[0] =)24
F($_[0];)6 E 6(@h_aliases =)156 264 R
(@{ $hob->[1] } = split ' ', $_[1];)6 E($h_addrtype =)156 276 Q 78
($hob->[2] =)24 F($_[2];)6 E 12($h_length =)156 288 R 78($hob->[3] =)24
F($_[3];)6 E 24($h_addr =)156 300 R($_[4];)174 E
(@h_addr_list = @{ $hob->[4] } =)156 312 Q(@_[ \(4 .. $#_\) ];)54 E
(return $hob;)156 324 Q(})132 336 Q(sub gethostbyname \($\))132 360 Q 6
({p)12 G(opulate\(CORE::gethostbyname\(shift\)\) })-6 E
(sub gethostbyaddr \($;$\) {)132 384 Q(my \($addr, $addrtype\);)156 396
Q($addr = shift;)156 408 Q(require Socket unless @_;)156 420 Q
($addrtype = @_ ? shift : Socket::AF_INET\(\);)156 432 Q
(populate\(CORE::gethostbyaddr\($addr, $addrtype\)\))156 444 Q(})132 456
Q(sub gethost\($\) {)132 480 Q
(if \($_[0] =~ /^\\d+\(?:\\.\\d+\(?:\\.\\d+\(?:\\.\\d+\)?\)?\)?$/\) {)
156 492 Q(require Socket;)174 504 Q
(&gethostbyaddr\(Socket::inet_aton\(shift\)\);)174 516 Q 6(}e)156 528 S
(lse {)-6 E(&gethostbyname;)174 540 Q(})156 552 Q(})132 564 Q(1;)132 588
Q F0 -.8(We)108 612 S -1.65 -.5('v e).8 H .858(snuck in quite a f)3.858
F .858
(air bit of other concepts besides just dynamic class creation, lik)-.1
F 3.359(eo)-.1 G -.15(ve)-3.509 G .859(rriding core).15 F .427
(functions, import/e)108 624 R .427
(xport bits, function prototyping, and short-cut function call via)-.15
F F1(&whatever)2.926 E F0 5.426(.T)C .426(hese all)-5.426 F .027
(mostly mak)108 636 R 2.527(es)-.1 G .027(ense from the perspecti)-2.527
F .327 -.15(ve o)-.25 H 2.527(fat).15 G .027(raditional module, b)-2.527
F .028(ut as you can see, we can also use them in)-.2 F
(an object module.)108 648 Q -1.1(Yo)108 664.8 S 3.578(uc)1.1 G 1.077
(an look at other object-based, struct-lik)-3.578 F 3.577(eo)-.1 G -.15
(ve)-3.727 G 1.077
(rrides of core functions in the 5.004 release of Perl in).15 F 8.113
(File::stat, Net::hostent, Net::netent, Net::protoent, Net::serv)108
676.8 R 8.114(ent, T)-.15 F 8.114(ime::gmtime, T)-.35 F(ime::localtime,)
-.35 E .755(User::grent, and User::pwent.)108 688.8 R .755
(These modules ha)5.755 F 1.055 -.15(ve a \214)-.2 H .755
(nal component that').15 F 3.254(sa)-.55 G .754(ll lo)-3.254 F(wer)-.25
E .754(-case, by con)-.2 F -.15(ve)-.4 G(ntion).15 E(reserv)108 700.8 Q
.948(ed for compiler pragmas, because the)-.15 F 3.448(ya)-.15 G -.25
(ff)-3.448 G .949(ect the compilation and change a b).25 F .949
(uilt-in function.)-.2 F(The)5.949 E(y)-.15 E(also ha)108 712.8 Q .3
-.15(ve t)-.2 H(he type names that a C programmer w).15 E(ould most e)
-.1 E(xpect.)-.15 E 157.755(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E
(25)184.145 E EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Times-Bold@0 SF -7.218(DD)108 84 S
-4.998(aa)7.218 G -3.328(tt)4.998 G 9.996 -4.998(aa M)3.328 H(Me)-4.44 E
(em)-4.438 E(mb)-8.328 E(be)-5.558 E(er)-4.438 E(rs)-4.438 E 2.5(sa)
-3.888 G(as)-7.498 E 2.5(sV)-3.888 G -.92(Va)-9.718 G(ar)-4.078 E(ri)
-4.438 E(ia)-2.778 E(ab)-4.998 E(bl)-5.558 E(le)-2.778 E(es)-4.438 E(s)
-3.888 E F0 .869(If you')108 100.8 R .869(re used to C)-.5 F/F2 8
/Times-Roman@0 SF -1(++)-1 -1.2 O F0 .868(objects, then you')3.368 1.2 N
.868(re accustomed to being able to get at an object')-.5 F 3.368(sd)
-.55 G .868(ata members as)-3.368 F 1.03(simple v)108 112.8 R 1.03
(ariables from within a method.)-.25 F 1.03(The Alias module pro)6.03 F
1.031(vides for this, as well as a good bit more,)-.15 F
(such as the possibility of pri)108 124.8 Q -.25(va)-.25 G
(te methods that the object can call b).25 E
(ut folks outside the class cannot.)-.2 E(Here')108 141.6 Q 3.126(sa)
-.55 G 3.126(ne)-3.126 G .626
(xample of creating a Person using the Alias module.)-3.276 F .625
(When you update these magical instance)5.625 F -.25(va)108 153.6 S
(riables, you automatically update v).25 E(alue \214elds in the hash.)
-.25 E(Con)5 E -.15(ve)-.4 G(nient, eh?).15 E/F3 10/Courier@0 SF
(package Person;)132 170.4 Q 6(#t)132 194.4 S
(his is the same as before...)-6 E(sub new {)132 206.4 Q(my $that)162
218.4 Q 6(=s)12 G(hift;)-6 E(my $class = ref\($that\))162 230.4 Q/F4 10
/Symbol SF<efef>6 E F3($that;)6 E(my $self = {)162 242.4 Q 6(NAME =>)180
254.4 R(undef,)6 E 12(AGE =>)180 266.4 R(undef,)6 E(PEERS => [],)180
278.4 Q(};)156 290.4 Q(bless\($self, $class\);)156 302.4 Q
(return $self;)156 314.4 Q(})132 326.4 Q(use Alias qw\(attr\);)132 350.4
Q(use vars qw\($NAME $AGE $PEERS\);)132 362.4 Q(sub name {)132 386.4 Q
(my $self = attr shift;)156 398.4 Q(if \(@_\) { $NAME = shift; })156
410.4 Q 18(return $NAME;)156 422.4 R(})132 434.4 Q(sub age {)132 458.4 Q
(my $self = attr shift;)156 470.4 Q(if \(@_\) { $AGE = shift; })156
482.4 Q 18(return $AGE;)156 494.4 R(})132 506.4 Q(sub peers {)132 530.4
Q(my $self = attr shift;)156 542.4 Q(if \(@_\) { @PEERS = @_; })156
554.4 Q 18(return @PEERS;)156 566.4 R(})132 578.4 Q(sub exclaim {)132
602.4 Q(my $self = attr shift;)156 614.4 Q
(return sprintf "Hi, I'm %s, age %d, working with %s",)156 626.4 Q
($NAME, $AGE, join\(", ", @PEERS\);)180 638.4 Q(})132 650.4 Q
(sub happy_birthday {)132 674.4 Q(my $self = attr shift;)156 686.4 Q
(return ++$AGE;)156 698.4 Q(})132 710.4 Q F0 157.755(8/Jan/97 perl)72
768 R(5.003, patch 11)2.5 E(26)184.145 E EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E .457(The need for the)108 84 R/F1 10
/Courier@0 SF .458(use vars)2.957 F F0 .458(declaration is because what\
 Alias does is play with package globals with the)2.958 F .949
(same name as the \214elds.)108 96 R 2.549 -.8(To u)5.949 H .949
(se globals while).8 F F1 .949(use strict)3.449 F F0 .949(is in ef)3.449
F .949(fect, you ha)-.25 F 1.249 -.15(ve t)-.2 H 3.448(op).15 G .948
(re-declare them.)-3.448 F .222(These package v)108 108 R .222
(ariables are localized to the block enclosing the)-.25 F/F2 10
/Times-Italic@0 SF(attr\(\))2.723 E F0 .223(call just as if you')2.723 F
2.723(du)-.5 G .223(sed a)-2.723 F F2(local\(\))2.723 E F0(on)2.723 E
2.618(them. Ho)108 120 R(we)-.25 E -.15(ve)-.25 G .918 -.4(r, t).15 H
.118(hat means that the).4 F(y')-.15 E .117
(re still considered global v)-.5 F .117(ariables with temporary v)-.25
F .117(alues, just as with)-.25 F(an)108 132 Q 2.5(yo)-.15 G(ther)-2.5 E
F2(local\(\))2.5 E F0(.)A(It w)108 148.8 Q
(ould be nice to combine Alias with something lik)-.1 E 2.5(eC)-.1 G
(lass::T)-2.5 E(emplate or Class::MethodMak)-.7 E(er)-.1 E(.)-.55 E/F3 9
/Times-Bold@0 SF -6.496(NN)108 171.6 S 11.39 -7(OO T)6.496 H(TE).999 E
(ES)-6.001 E(S)-5.002 E/F4 10/Times-Bold@0 SF -7.778(OO)108 199.2 S
-5.558(bb)7.778 G -3.328(jj)5.558 G -4.438(ee)3.328 G -4.438(cc)4.438 G
6.656 -3.328(tt T)4.438 H -.92(Te)-3.34 G(er)-3.518 E(rm)-4.438 E(mi)
-8.328 E(in)-2.778 E(no)-5.558 E(ol)-4.998 E(lo)-2.778 E(og)-4.998 E(gy)
-4.998 E(y)-4.998 E F0 .551(In the v)108 216 R(arious)-.25 E/F5 9
/Times-Roman@0 SF(OO)3.051 E F0 .552
(literature, it seems that a lot of dif)3.051 F .552(ferent w)-.25 F
.552(ords are used to describe only a fe)-.1 F 3.052(wd)-.25 G(if)-3.052
E(ferent)-.25 E 3.166(concepts. If)108 228 R(you')3.166 E .666
(re not already an object programmer)-.5 F 3.165(,t)-.4 G .665
(hen you don')-3.165 F 3.165(tn)-.18 G .665(eed to w)-3.165 F .665
(orry about all these f)-.1 F(anc)-.1 E(y)-.15 E -.1(wo)108 240 S 2.5
(rds. But).1 F(if you are, then you might lik)2.5 E 2.5(et)-.1 G 2.5(ok)
-2.5 G(no)-2.5 E 2.5(wh)-.25 G .5 -.25(ow t)-2.5 H 2.5(og).25 G
(et at the same concepts in Perl.)-2.5 E -.15(Fo)108 256.8 S 4.466(re)
.15 G 1.966(xample, it')-4.616 F 4.466(sc)-.55 G 1.966
(ommon to call an object an)-4.466 F F2(instance)4.467 E F0 1.967
(of a class and to call those objects' methods)4.467 F F2 .09
(instance methods)108 268.8 R F0 5.09(.D)C .09
(ata \214elds peculiar to each object are often called)-5.09 F F2 .09
(instance data)2.59 F F0(or)2.59 E F2 .09(object attrib)2.59 F(utes)-.2
E F0 2.59(,a)C(nd)-2.59 E
(data \214elds common to all members of that class are)108 280.8 Q F2
(class data)2.5 E F0(,)A F2(class attrib)2.5 E(utes)-.2 E F0 2.5(,o)C(r)
-2.5 E F2(static data member)2.5 E(s)-.1 E F0(.)A(Also,)108 297.6 Q F2
.28(base class)2.78 F F0(,)A F2 -.1(ge)2.78 G .28(neric class).1 F F0
2.78(,a)C(nd)-2.78 E F2(super)2.781 E(class)-.37 E F0 .281
(all describe the same notion, whereas)2.781 F F2 .281(derived class)
2.781 F F0(,)A F2(speci\214c)2.781 E(class)108 309.6 Q F0 2.5(,a)C(nd)
-2.5 E F2(subclass)2.5 E F0(describe the other related one.)2.5 E(C)108
326.4 Q/F6 8/Times-Roman@0 SF -1(++)-1 -1.2 O F0 .046(programmers ha)
2.546 1.2 N -.15(ve)-.2 G F2 .046(static methods)2.696 F F0(and)2.546 E
F2 .046(virtual methods)2.546 F F0 2.546(,b)C .046(ut Perl only has)
-2.746 F F2 .046(class methods)2.546 F F0(and)2.546 E F2 .046
(object meth-)2.546 F(ods)108 338.4 Q F0 5.288(.A)C(ctually)-5.288 E
2.788(,P)-.65 G .288(erl only has methods.)-2.788 F .289
(Whether a method gets used as a class or object method is by usage)
5.288 F(only)108 350.4 Q 6.788(.Y)-.65 G 1.788
(ou could accidentally call a class method \(one e)-7.888 F 1.787
(xpecting a string ar)-.15 F 1.787(gument\) on an object \(one)-.18 F
-.15(ex)108 362.4 S(pecting a reference\), or vice v).15 E(ersa.)-.15 E
.561(From the C)108 379.2 R F6 -1(++)-1 -1.2 O F0(perspecti)3.062 1.2 M
-.15(ve)-.25 G 3.062(,a).15 G .562(ll methods in Perl are virtual.)
-3.062 F .562(This, by the w)5.562 F(ay)-.1 E 3.062(,i)-.65 G 3.062(sw)
-3.062 G .662 -.05(hy t)-3.062 H(he).05 E 3.062(ya)-.15 G .562(re ne)
-3.062 F -.15(ve)-.25 G 3.062(rc).15 G(heck)-3.062 E(ed)-.1 E
(for function prototypes in the ar)108 391.2 Q(gument list as re)-.18 E
(gular b)-.15 E(uilt-in and user)-.2 E(-de\214ned functions can be.)-.2
E .68(Because a class is itself something of an object, Perl')108 408 R
3.18(sc)-.55 G .68(lasses can be tak)-3.18 F .68
(en as describing both a `)-.1 F .68(`class as)-.74 F(meta-object')108
420 Q 5.963('\()-.74 G 3.463(also called)-5.963 F F2 3.463
(object factory)5.963 F F0 5.963(\)p)C(hilosoph)-5.963 E 5.963(ya)-.05 G
3.463(nd the `)-5.963 F 3.464(`class as type de\214nition')-.74 F 5.964
('\()-.74 G F2(declaring)-5.964 E F0(beha)108 432 Q(viour)-.2 E 2.5(,n)
-.4 G(ot)-2.5 E F2(de\214ning)2.5 E F0(mechanism\) idea.)2.5 E(C)5 E F6
-1(++)-1 -1.2 O F0(supports the latter notion, b)2.5 1.2 M
(ut not the former)-.2 E(.)-.55 E F3 -5.002(SS)72 448.8 S -6.001(EE)
5.002 G 12.002 -6.001(EE A)6.001 H(AL)-.495 E(LS)-6.001 E(SO)-5.002 E(O)
-7 E F0 .608(The follo)108 460.8 R .608
(wing man pages will doubtless pro)-.25 F .608
(vide more background for this one: the)-.15 F F2(perlmod)3.108 E F0
.608(manpage, the)3.108 F F2(perlr)108 472.8 Q(ef)-.37 E F0 .895
(manpage, the)3.395 F F2(perlobj)3.395 E F0 .896(manpage, the)3.395 F F2
(perlbot)3.396 E F0 .896(manpage, the)3.396 F F2(perltie)3.396 E F0 .896
(manpage, and the)3.396 F F2 -.1(ov)3.396 G(erload).1 E F0(man-)3.396 E
(page.)108 484.8 Q F3 -6.496(CC)72 501.6 S -7(OO)6.496 G -5.497(PP)7 G
-6.496(YY)5.497 G -6.496(RR)6.496 G -3.499(II)6.496 G -7(GG)3.499 G -7
(HH)7 G -6.001(TT)7 G F0(I)108 513.6 Q F2 -.37(re)2.5 G(ally).37 E F0
(hate to ha)2.5 E .3 -.15(ve t)-.2 H 2.5(os).15 G(ay this, b)-2.5 E
(ut recent unpleasant e)-.2 E(xperiences ha)-.15 E .3 -.15(ve m)-.2 H
(andated its inclusion:).15 E F1(Copyright 1996 Tom Christiansen.)132
530.4 Q(All Rights Reserved.)12 E F0 .223(This w)108 554.4 R .223
(ork deri)-.1 F -.15(ve)-.25 G 2.723(si).15 G 2.723(np)-2.723 G .223
(art from the second edition of)-2.723 F F2(Pr)2.723 E -.1(og)-.45 G
-.15(ra).1 G .223(mming P).15 F(erl)-.8 E F0 5.223(.A)C .223
(lthough destined for release as a)-5.223 F .243
(man page with the standard Perl distrib)108 566.4 R .243
(ution, it is not public domain \(nor is an)-.2 F 2.744(yo)-.15 G 2.744
(fP)-2.744 G .244(erl and its docset: pub-)-2.744 F 1.278(lishers be)108
578.4 R -.1(wa)-.25 G 3.778(re\). It').1 F 3.778(se)-.55 G 1.278
(xpected to someday mak)-3.928 F 3.778(ei)-.1 G 1.278(ts w)-3.778 F
1.278(ay into a re)-.1 F 1.278(vision of the Camel Book.)-.25 F 1.277
(While it is)6.277 F(cop)108 590.4 Q .738
(yright by me with all rights reserv)-.1 F .738
(ed, permission is granted to freely distrib)-.15 F .738(ute v)-.2 F
.739(erbatim copies of this)-.15 F .424(document pro)108 602.4 R .423(v\
ided that no modi\214cations outside of formatting be made, and that th\
is notice remain intact.)-.15 F -1.1(Yo)108 614.4 S 2.539(ua)1.1 G .039
(re permitted and encouraged to use its code and deri)-2.539 F -.25(va)
-.25 G(ti).25 E -.15(ve)-.25 G 2.54(st).15 G .04(hereof in your o)-2.54
F .04(wn source code for fun or)-.25 F .398
(for pro\214t as you see \214t.)108 626.4 R .398(But so help me, if in \
six months I \214nd some book out there with a hack)5.398 F .397
(ed-up v)-.1 F(er)-.15 E(-)-.2 E .778
(sion of this material in it claiming to be written by someone else, I')
108 638.4 R .779(ll tell all the w)-.1 F .779(orld that you')-.1 F .779
(re a jerk.)-.5 F .085(Furthermore, your la)108 650.4 R .084
(wyer will meet my la)-.15 F .084(wyer \(or O'Reilly')-.15 F .084(s\) o)
-.55 F -.15(ve)-.15 G 2.584(rl).15 G .084
(unch to arrange for you to recei)-2.584 F .384 -.15(ve y)-.25 H(our).15
E(just deserts.)108 662.4 Q(Count on it.)5 E 157.755(8/Jan/97 perl)72
768 R(5.003, patch 11)2.5 E(27)184.145 E EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(PERL)72 48 Q -.18(TO)-.92 G -.4(OT).18 G 99
(\(1\) Perl).4 F(Programmers Reference Guide)2.5 E(PERL)101.5 E -.18(TO)
-.92 G -.4(OT).18 G(\(1\)).4 E/F1 10/Times-Bold@0 SF -7.218(AA)108 84 S
-4.438(cc)7.218 G -5.558(kk)4.438 G -5.558(nn)5.558 G 7.396 -4.998(oo w)
5.558 H(wl)-2.22 E(le)-2.778 E(ed)-4.438 E(dg)-5.558 E(gm)-4.998 E(me)
-8.328 E(en)-4.438 E(nt)-5.558 E(ts)-3.328 E(s)-3.888 E F0 1.466
(Thanks to Larry W)108 100.8 R 1.466(all, Roderick Schertler)-.8 F 3.967
(,G)-.4 G 1.467(urusamy Sarath)-3.967 F 2.767 -.65(y, D)-.05 H 1.467
(ean Roehrich, Raphael Manfredi, Brent).65 F(Halse)108 112.8 Q 1.3 -.65
(y, G)-.15 H(re).65 E 2.5(gB)-.15 G(acon, Brad Appleton, and man)-2.5 E
2.5(yo)-.15 G(thers for their helpful comments.)-2.5 E 157.755
(8/Jan/97 perl)72 768 R(5.003, patch 11)2.5 E(28)184.145 E EP
%%Trailer
end
%%EOF
