%!PS-Adobe-3.0
%%BoundingBox: 54 72 558 720
%%Creator: Mozilla (NetScape) HTML->PS
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 12
%%PageOrder: Ascend
%%Title: perltie
%%EndComments
%%BeginProlog
[ /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
 /two /three /four /five /six /seven /eight /nine /colon /semicolon
 /less /equal /greater /question /at /A /B /C /D /E
 /F /G /H /I /J /K /L /M /N /O
 /P /Q /R /S /T /U /V /W /X /Y
 /Z /bracketleft /backslash /bracketright /asciicircum /underscore /quoteleft /a /b /c
 /d /e /f /g /h /i /j /k /l /m
 /n /o /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
 /space /exclamdown /cent /sterling /currency /yen /brokenbar /section /dieresis /copyright
 /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf
 /threequarters /questiondown /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde
 /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
 /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
 /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave
 /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis] /isolatin1encoding exch def
/c { matrix currentmatrix currentpoint translate
     3 1 roll scale newpath 0 0 1 0 360 arc setmatrix } bind def
/F0
    /Times-Roman findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f0 { /F0 findfont exch scalefont setfont } bind def
/F1
    /Times-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f1 { /F1 findfont exch scalefont setfont } bind def
/F2
    /Times-Italic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f2 { /F2 findfont exch scalefont setfont } bind def
/F3
    /Times-BoldItalic findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f3 { /F3 findfont exch scalefont setfont } bind def
/F4
    /Courier findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f4 { /F4 findfont exch scalefont setfont } bind def
/F5
    /Courier-Bold findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f5 { /F5 findfont exch scalefont setfont } bind def
/F6
    /Courier-Oblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f6 { /F6 findfont exch scalefont setfont } bind def
/F7
    /Courier-BoldOblique findfont
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding isolatin1encoding def
    currentdict end
definefont pop
/f7 { /F7 findfont exch scalefont setfont } bind def
/rhc {
    {
        currentfile read {
	    dup 97 ge
		{ 87 sub true exit }
		{ dup 48 ge { 48 sub true exit } { pop } ifelse }
	    ifelse
	} {
	    false
	    exit
	} ifelse
    } loop
} bind def

/cvgray { % xtra_char npix cvgray - (string npix long)
    dup string
    0
    {
	rhc { cvr 4.784 mul } { exit } ifelse
	rhc { cvr 9.392 mul } { exit } ifelse
	rhc { cvr 1.824 mul } { exit } ifelse
	add add cvi 3 copy put pop
	1 add
	dup 3 index ge { exit } if
    } loop
    pop
    3 -1 roll 0 ne { rhc { pop } if } if
    exch pop
} bind def

/smartimage12rgb { % w h b [matrix] smartimage12rgb -
    /colorimage where {
	pop
	{ currentfile rowdata readhexstring pop }
	false 3
	colorimage
    } {
	exch pop 8 exch
	3 index 12 mul 8 mod 0 ne { 1 } { 0 } ifelse
	4 index
	6 2 roll
	{ 2 copy cvgray }
	image
	pop pop
    } ifelse
} def
/cshow { dup stringwidth pop 2 div neg 0 rmoveto show } bind def
/rshow { dup stringwidth pop neg 0 rmoveto show } bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
199 686.3 moveto
36 f1
(perltie) show
298.9 686.3 moveto
24 f1
( ) show
16.8 656.1 moveto
24 f3
(how to hide an object class in a simple variable) show
481.5 656.1 moveto
24 f1
( ) show
0 631.1 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
160.7 588.6 moveto
24 f1
(Table of Contents) show
18.1 563.5 moveto
3.3 3.3 c  fill 
28 559.4 moveto
12 f0
(Tying Scalars) show
94.3 559.4 moveto
12 f0
( ) show
46.1 550.2 moveto
3.3 3.3 c  stroke 
56 546.1 moveto
12 f0
(TIESCALAR ) show
46.1 536.9 moveto
3.3 3.3 c  stroke 
56 532.8 moveto
12 f0
(FETCH ) show
46.1 523.6 moveto
3.3 3.3 c  stroke 
56 519.5 moveto
12 f0
(STORE ) show
46.1 510.3 moveto
3.3 3.3 c  stroke 
56 506.2 moveto
12 f0
(DESTROY ) show
18.1 483.7 moveto
3.3 3.3 c  fill 
28 479.6 moveto
12 f0
(Tying Arrays) show
92.3 479.6 moveto
12 f0
( ) show
46.1 470.4 moveto
3.3 3.3 c  stroke 
56 466.3 moveto
12 f0
(TIEARRAY ) show
46.1 457.1 moveto
3.3 3.3 c  stroke 
56 453 moveto
12 f0
(FETCH ) show
46.1 443.8 moveto
3.3 3.3 c  stroke 
56 439.7 moveto
12 f0
(STORE ) show
46.1 430.5 moveto
3.3 3.3 c  stroke 
56 426.4 moveto
12 f0
(DESTROY ) show
18.1 403.9 moveto
3.3 3.3 c  fill 
28 399.8 moveto
12 f0
(Tying Hashes) show
94.3 399.8 moveto
12 f0
( ) show
46.1 390.6 moveto
3.3 3.3 c  stroke 
56 386.5 moveto
12 f0
(TIEHASH ) show
46.1 377.3 moveto
3.3 3.3 c  stroke 
56 373.2 moveto
12 f0
(FETCH ) show
46.1 364 moveto
3.3 3.3 c  stroke 
56 359.9 moveto
12 f0
(STORE ) show
46.1 350.7 moveto
3.3 3.3 c  stroke 
56 346.6 moveto
12 f0
(DELETE ) show
46.1 337.4 moveto
3.3 3.3 c  stroke 
56 333.3 moveto
12 f0
(CLEAR ) show
46.1 324.1 moveto
3.3 3.3 c  stroke 
56 320 moveto
12 f0
(EXISTS ) show
46.1 310.8 moveto
3.3 3.3 c  stroke 
56 306.7 moveto
12 f0
(FIRSTKEY ) show
46.1 297.5 moveto
3.3 3.3 c  stroke 
56 293.4 moveto
12 f0
(NEXTKEY ) show
46.1 284.2 moveto
3.3 3.3 c  stroke 
56 280.1 moveto
12 f0
(DESTROY ) show
28 253.5 moveto
12 f0
(Tying FileHandles) show
117.6 253.5 moveto
12 f0
( ) show
0 231.1 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 188.6 moveto
24 f1
(SYNOPSIS) show
117.3 188.6 moveto
24 f1
( ) show
0 162.1 moveto
10 f4
( tie VARIABLE, CLASSNAME, LIST) show
0 151.6 moveto
10 f4
( untie VARIABLE) show
0 121.6 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 79.1 moveto
24 f1
(DESCRIPTION) show
166.6 79.1 moveto
24 f1
( ) show
pagelevel restore
showpage
%%Page: 2 2
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 697.9 moveto
12 f0
(Prior to release 5.0 of Perl, a programmer could use ) show
251.2 697.9 moveto
12 f2
(dbmopen\(\)) show
303.1 697.9 moveto
12 f0
( to magically connect an on-disk database) show
0 684.1 moveto
12 f0
(in the standard Unix dbm\(3x\) format to a ) show
200.6 684.1 moveto
12 f1
(%HASH) show
246.6 684.1 moveto
12 f0
( in their program. However, their Perl was either) show
0 670.8 moveto
12 f0
(built with one particular dbm library or another, but not both, and you couldn't extend this mechanism to) show
0 657.5 moveto
12 f0
(other packages or types of variables. ) show
0 630.9 moveto
12 f0
(Now you can. ) show
0 604.3 moveto
12 f0
(The ) show
21.6 604.3 moveto
12 f2
(tie\(\)) show
41.5 604.3 moveto
12 f0
( function binds a variable to a class \(package\) that will provide the implementation for access) show
0 591 moveto
12 f0
(methods for that variable. Once this magic has been performed, accessing a tied variable automatically) show
0 577.7 moveto
12 f0
(triggers method calls in the proper class. All of the complexity of the class is hidden behind magic) show
0 564.4 moveto
12 f0
(methods calls. The method names are in ALL CAPS, which is a convention that Perl uses to indicate) show
0 551.1 moveto
12 f0
(that they're called implicitly rather than explicitly--just like the ) show
306.3 551.1 moveto
12 f2
(BEGIN\(\)) show
349.6 551.1 moveto
12 f0
( and ) show
372.9 551.1 moveto
12 f2
(END\(\)) show
404.8 551.1 moveto
12 f0
( functions. ) show
0 524.5 moveto
12 f0
(In the ) show
30.6 524.5 moveto
12 f2
(tie\(\)) show
50.5 524.5 moveto
12 f0
( call, ) show
76.8 524.5 moveto
10 f4
(VARIABLE) show
124.8 524.5 moveto
12 f0
( is the name of the variable to be enchanted. ) show
339 524.5 moveto
10 f4
(CLASSNAME) show
393 524.5 moveto
12 f0
( is the name of a class) show
0 511.2 moveto
12 f0
(implementing objects of the correct type. Any additional arguments in the ) show
357.9 511.2 moveto
12 f0
(LIST) show
383.2 511.2 moveto
12 f0
( are passed to the) show
0 497.9 moveto
12 f0
(appropriate constructor method for that class--meaning ) show
267.2 497.9 moveto
12 f0
(TIESCALAR\(\)) show
341.1 497.9 moveto
12 f0
( , ) show
350.1 497.9 moveto
12 f0
(TIEARRAY\(\)) show
418.7 497.9 moveto
12 f0
( , or ) show
440.6 497.9 moveto
12 f0
(TIEHASH\(\)) show
0 484.6 moveto
12 f0
(. \(Typically these are arguments such as might be passed to the ) show
305.6 484.6 moveto
12 f2
(dbminit\(\)) show
350.2 484.6 moveto
12 f0
( function of C.\) The object) show
0 471.3 moveto
12 f0
(returned by the ``new'' method is also returned by the ) show
262.6 471.3 moveto
12 f2
(tie\(\)) show
282.5 471.3 moveto
12 f0
( function, which would be useful if you) show
0 458 moveto
12 f0
(wanted to access other methods in ) show
167.3 458 moveto
10 f4
(CLASSNAME) show
221.3 458 moveto
12 f0
(. \(You don't actually have to return a reference to a right) show
0 444.7 moveto
12 f0
(``type'' \(e.g. HASH or ) show
112.6 444.7 moveto
10 f4
(CLASSNAME) show
166.6 444.7 moveto
12 f0
(\) so long as it's a properly blessed object.\) ) show
0 418.1 moveto
12 f0
(Unlike ) show
35.6 418.1 moveto
12 f2
(dbmopen\(\)) show
87.5 418.1 moveto
12 f0
(, the ) show
111.1 418.1 moveto
12 f2
(tie\(\)) show
131 418.1 moveto
12 f0
( function will not ) show
217 418.1 moveto
10 f4
(use) show
235 418.1 moveto
12 f0
( or ) show
250.9 418.1 moveto
10 f4
(require) show
292.9 418.1 moveto
12 f0
( a module for you--you need to do that) show
0 404.8 moveto
12 f0
(explicitly yourself. ) show
0 382.4 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 345.5 moveto
18 f1
(Tying Scalars) show
105.5 345.5 moveto
18 f1
( ) show
0 317.6 moveto
12 f0
(A class implementing a tied scalar should define the following methods: TIESCALAR, FETCH,) show
0 304.3 moveto
12 f0
(STORE, and possible DESTROY. ) show
0 277.7 moveto
12 f0
(Let's look at each in turn, using as an example a tie class for scalars that allows the user to do something) show
0 264.4 moveto
12 f0
(like: ) show
0 240.5 moveto
10 f4
(    tie $his_speed, 'Nice', getppid\(\);) show
0 230 moveto
10 f4
(    tie $my_speed,  'Nice', $$;) show
0 195.8 moveto
12 f0
(And now whenever either of those variables is accessed, its current system priority is retrieved and) show
0 182.5 moveto
12 f0
(returned. If those variables are set, then the process's priority is changed! ) show
0 155.9 moveto
12 f0
(We'll use Jarkko Hietaniemi ) show
140.6 155.9 moveto
12 f2
(<) show
148.7 155.9 moveto
12 f2
(Jarkko.Hietaniemi@hut.fi) show
273.7 155.9 moveto
12 f2
(>) show
281.8 155.9 moveto
12 f0
('s BSD::Resource class \(not included\) to) show
0 142.6 moveto
12 f0
(access the PRIO_PROCESS, PRIO_MIN, and PRIO_MAX constants from your system, as well as the) show
0 129.3 moveto
12 f2
(getpriority\(\)) show
59.3 129.3 moveto
12 f0
( and ) show
82.6 129.3 moveto
12 f2
(setpriority\(\)) show
140.5 129.3 moveto
12 f0
( system calls. Here's the preamble of the class. ) show
0 105.4 moveto
10 f4
(    package Nice;) show
0 94.9 moveto
10 f4
(    use Carp;) show
0 84.4 moveto
10 f4
(    use BSD::Resource;) show
pagelevel restore
showpage
%%Page: 3 3
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(    use strict;) show
0 701.4 moveto
10 f4
(    $Nice::DEBUG = 0 unless defined $Nice::DEBUG;) show
0 666.7 moveto
12 f1
(TIESCALAR classname, LIST) show
158.3 666.7 moveto
12 f1
( ) show
28 653.4 moveto
12 f0
(This is the constructor for the class. That means it is expected to return a blessed reference to a) show
28 640.1 moveto
12 f0
(new scalar \(probably anonymous\) that it's creating. For example: ) show
28 616.2 moveto
10 f4
(    sub TIESCALAR {) show
28 605.7 moveto
10 f4
(        my $class = shift;) show
28 595.2 moveto
10 f4
(        my $pid = shift || $$; # 0 means me) show
28 584.7 moveto
10 f4
(        if \($pid !~ /^\\d+$/\) {) show
28 574.2 moveto
10 f4
(            carp "Nice::TieScalar got non-numeric pid $pid" if $^W;) show
28 563.7 moveto
10 f4
(            return undef;) show
28 553.2 moveto
10 f4
(        }) show
28 542.7 moveto
10 f4
(        unless \(kill 0 => $pid\) { # EPERM or ERSCH, no doubt) show
28 532.2 moveto
10 f4
(            carp "Nice::TieScalar got bad pid $pid: $!" if $^W;) show
28 521.7 moveto
10 f4
(            return undef;) show
28 511.2 moveto
10 f4
(        }) show
28 500.7 moveto
10 f4
(        return bless \\$pid => $class;) show
28 490.2 moveto
10 f4
(    }) show
28 456 moveto
12 f0
(This tie class has chosen to return an error rather than raising an exception if its constructor should) show
28 442.7 moveto
12 f0
(fail. While this is how ) show
137.3 442.7 moveto
12 f2
(dbmopen\(\)) show
189.2 442.7 moveto
12 f0
( works, other classes may well not wish to be so forgiving. It) show
28 429.4 moveto
12 f0
(checks the global variable ) show
155.9 429.4 moveto
10 f5
($^) show
167.9 429.4 moveto
10 f4
(W) show
173.9 429.4 moveto
12 f0
( to see whether to emit a bit of noise anyway. ) show
0 402.3 moveto
12 f1
(FETCH this) show
63 402.3 moveto
12 f1
( ) show
28 389 moveto
12 f0
(This method will be triggered every time the tied variable is accessed \(read\). It takes no arguments) show
28 375.7 moveto
12 f0
(beyond its self reference, which is the object representing the scalar we're dealing with. Since in) show
28 361.9 moveto
12 f0
(this case we're just using a SCALAR ref for the tied scalar object, a simple ) show
391.9 361.9 moveto
12 f1
($$) show
403.9 361.9 moveto
12 f0
(self allows the) show
28 348.6 moveto
12 f0
(method to get at the real value stored there. In our example below, that real value is the process ID) show
28 335.3 moveto
12 f0
(to which we've tied our variable. ) show
28 311.4 moveto
10 f4
(    sub FETCH {) show
28 300.9 moveto
10 f4
(        my $self = shift;) show
28 290.4 moveto
10 f4
(        confess "wrong type" unless ref $self;) show
28 279.9 moveto
10 f4
(        croak "usage error" if @_;) show
28 269.4 moveto
10 f4
(        my $nicety;) show
28 258.9 moveto
10 f4
(        local\($!\) = 0;) show
28 248.4 moveto
10 f4
(        $nicety = getpriority\(PRIO_PROCESS, $$self\);) show
28 237.9 moveto
10 f4
(        if \($!\) { croak "getpriority failed: $!" }) show
28 227.4 moveto
10 f4
(        return $nicety;) show
28 216.9 moveto
10 f4
(    }) show
28 182.7 moveto
12 f0
(This time we've decided to blow up \(raise an exception\) if the renice fails--there's no place for us) show
28 169.4 moveto
12 f0
(to return an error otherwise, and it's probably the right thing to do. ) show
0 142.3 moveto
12 f1
(STORE this, value) show
95.6 142.3 moveto
12 f1
( ) show
28 129 moveto
12 f0
(This method will be triggered every time the tied variable is set \(assigned\). Beyond its self) show
28 115.7 moveto
12 f0
(reference, it also expects one \(and only one\) argument--the new value the user is trying to assign. ) show
28 91.8 moveto
10 f4
(    sub STORE {) show
28 81.3 moveto
10 f4
(        my $self = shift;) show
pagelevel restore
showpage
%%Page: 4 4
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
28 711.9 moveto
10 f4
(        confess "wrong type" unless ref $self;) show
28 701.4 moveto
10 f4
(        my $new_nicety = shift;) show
28 690.9 moveto
10 f4
(        croak "usage error" if @_;) show
28 680.4 moveto
10 f4
(        if \($new_nicety < PRIO_MIN\) {) show
28 669.9 moveto
10 f4
(            carp sprintf) show
28 659.4 moveto
10 f4
(              "WARNING: priority %d less than minimum system priority %d",) show
28 648.9 moveto
10 f4
(                  $new_nicety, PRIO_MIN if $^W;) show
28 638.4 moveto
10 f4
(            $new_nicety = PRIO_MIN;) show
28 627.9 moveto
10 f4
(        }) show
28 617.4 moveto
10 f4
(        if \($new_nicety > PRIO_MAX\) {) show
28 606.9 moveto
10 f4
(            carp sprintf) show
28 596.4 moveto
10 f4
(              "WARNING: priority %d greater than maximum system priority %d",) show
28 585.9 moveto
10 f4
(                  $new_nicety, PRIO_MAX if $^W;) show
28 575.4 moveto
10 f4
(            $new_nicety = PRIO_MAX;) show
28 564.9 moveto
10 f4
(        }) show
28 554.4 moveto
10 f4
(        unless \(defined setpriority\(PRIO_PROCESS, $$self, $new_nicety\)\) {) show
28 543.9 moveto
10 f4
(            confess "setpriority failed: $!";) show
28 533.4 moveto
10 f4
(        }) show
28 522.9 moveto
10 f4
(        return $new_nicety;) show
28 512.4 moveto
10 f4
(    }) show
0 477.7 moveto
12 f1
(DESTROY this) show
79.6 477.7 moveto
12 f1
( ) show
28 464.4 moveto
12 f0
(This method will be triggered when the tied variable needs to be destructed. As with other object) show
28 451.1 moveto
12 f0
(classes, such a method is seldom ncessary, since Perl deallocates its moribund object's memory for) show
28 437.8 moveto
12 f0
(you automatically--this isn't C++, you know. We'll use a DESTROY method here for debugging) show
28 424.5 moveto
12 f0
(purposes only. ) show
28 400.6 moveto
10 f4
(    sub DESTROY {) show
28 390.1 moveto
10 f4
(        my $self = shift;) show
28 379.6 moveto
10 f4
(        confess "wrong type" unless ref $self;) show
28 369.1 moveto
10 f4
(        carp "[ Nice::DESTROY pid $$self ]" if $Nice::DEBUG;) show
28 358.6 moveto
10 f4
(    }) show
0 324.4 moveto
12 f0
(That's about all there is to it. Actually, it's more than all there.is to it, since we've done a few nice) show
0 311.1 moveto
12 f0
(things here for the sake of completeness, robustness, and general aesthetics. Simpler TIESCALAR) show
0 297.8 moveto
12 f0
(classes are certainly possible. ) show
0 275.4 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 238.5 moveto
18 f1
(Tying Arrays) show
103.5 238.5 moveto
18 f1
( ) show
0 210.6 moveto
12 f0
(A class implementing a tied ordinary array should define the following methods: TIEARRAY, FETCH,) show
0 197.3 moveto
12 f0
(STORE, and perhaps DESTROY. ) show
0 170.2 moveto
12 f1
(WARNING) show
60.6 170.2 moveto
12 f0
(: Tied arrays are ) show
141.9 170.2 moveto
12 f2
(incomplete) show
194.5 170.2 moveto
12 f0
(. It is also distinctly lacking something for the ) show
417.8 170.2 moveto
10 f5
($#) show
429.8 170.2 moveto
10 f4
(ARRAY) show
459.8 170.2 moveto
12 f0
( access) show
0 156.9 moveto
12 f0
(\(which is hard, as it's an lvalue\), as well as the other obvious array functions, like ) show
395.8 156.9 moveto
12 f2
(push\(\)) show
426.4 156.9 moveto
12 f0
(, ) show
433.3 156.9 moveto
12 f2
(pop\(\)) show
459.2 156.9 moveto
12 f0
(, ) show
465.2 156.9 moveto
12 f2
(shift\(\)) show
493.8 156.9 moveto
12 f0
(,) show
0 143.6 moveto
12 f2
(unshift\(\)) show
40.6 143.6 moveto
12 f0
(, and ) show
66.9 143.6 moveto
12 f2
(splice\(\)) show
102.8 143.6 moveto
12 f0
(. ) show
0 117 moveto
12 f0
(For this discussion, we'll implement an array whose indices are fixed at its creation. If you try to access) show
0 103.7 moveto
12 f0
(anything beyond those bounds, you'll take an exception. \(Well, if you access an individual element; an) show
0 90.4 moveto
12 f0
(aggregate assignment would be missed.\) For example: ) show
pagelevel restore
showpage
%%Page: 5 5
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 711.9 moveto
10 f4
(    require Bounded_Array;) show
0 701.4 moveto
10 f4
(    tie @ary, Bounded_Array, 2;) show
0 690.9 moveto
10 f4
(    $| = 1;) show
0 680.4 moveto
10 f4
(    for $i \(0 .. 10\) {) show
0 669.9 moveto
10 f4
(        print "setting index $i: ";) show
0 659.4 moveto
10 f4
(        $ary[$i] = 10 * $i;) show
0 648.9 moveto
10 f4
(        $ary[$i] = 10 * $i;) show
0 638.4 moveto
10 f4
(        print "value of elt $i now $ary[$i]\\n";) show
0 627.9 moveto
10 f4
(    }) show
0 593.7 moveto
12 f0
(The preamble code for the class is as follows: ) show
0 569.8 moveto
10 f4
(    package Bounded_Array;) show
0 559.3 moveto
10 f4
(    use Carp;) show
0 548.8 moveto
10 f4
(    use strict;) show
0 514.1 moveto
12 f1
(TIEARRAY classname, LIST) show
152.3 514.1 moveto
12 f1
( ) show
28 500.8 moveto
12 f0
(This is the constructor for the class. That means it is expected to return a blessed reference through) show
28 487.5 moveto
12 f0
(which the new array \(probably an anonymous ARRAY ref\) will be accessed. ) show
28 460.9 moveto
12 f0
(In our example, just to show you that you don't ) show
258.9 460.9 moveto
12 f2
(really) show
286.8 460.9 moveto
12 f0
( have to return an ARRAY reference, we'll) show
28 447.6 moveto
12 f0
(choose a HASH reference to represent our object. A HASH works out well as a generic record) show
28 434.3 moveto
12 f0
(type: the ) show
72.6 434.3 moveto
10 f4
({BOUND}) show
114.6 434.3 moveto
12 f0
( field will store the maximum bound allowed, and the C<{ARRAY} field will) show
28 421 moveto
12 f0
(hold the true ARRAY ref. If someone outside the class tries to dereference the object returned) show
28 407.7 moveto
12 f0
(\(doubtless thinking it an ARRAY ref\), they'll blow up. This just goes to show you that you should) show
28 394.4 moveto
12 f0
(respect an object's privacy. ) show
28 370.5 moveto
10 f4
(    sub TIEARRAY {) show
28 360 moveto
10 f4
(        my $class = shift;) show
28 349.5 moveto
10 f4
(        my $bound = shift;) show
28 339 moveto
10 f4
(        confess "usage: tie\(\\@ary, 'Bounded_Array', max_subscript\)") show
28 328.5 moveto
10 f4
(            if @_ || $bound =~ /\\D/;) show
28 318 moveto
10 f4
(        return bless {) show
28 307.5 moveto
10 f4
(            BOUND => $bound,) show
28 297 moveto
10 f4
(            ARRAY => [],) show
28 286.5 moveto
10 f4
(        } => $class;) show
28 276 moveto
10 f4
(    }) show
0 241.3 moveto
12 f1
(FETCH this, index) show
97 241.3 moveto
12 f1
( ) show
28 228 moveto
12 f0
(This method will be triggered every time an individual element the tied array is accessed \(read\). It) show
28 214.7 moveto
12 f0
(takes one argument beyond its self reference: the index whose value we're trying to fetch. ) show
28 190.8 moveto
10 f4
(    sub FETCH {) show
28 180.3 moveto
10 f4
(      my\($self,$idx\) = @_;) show
28 169.8 moveto
10 f4
(      if \($idx > $self->{BOUND}\) {) show
28 159.3 moveto
10 f4
(        confess "Array OOB: $idx > $self->{BOUND}";) show
28 148.8 moveto
10 f4
(      }) show
28 138.3 moveto
10 f4
(      return $self->{ARRAY}[$idx];) show
28 127.8 moveto
10 f4
(    }) show
28 93.6 moveto
12 f0
(As you may have noticed, the name of the FETCH method \(et al.\) is the same for all accesses,) show
28 80.3 moveto
12 f0
(even though the constructors differ in names \(TIESCALAR vs TIEARRAY\). While in theory you) show
pagelevel restore
showpage
%%Page: 6 6
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
28 709.2 moveto
12 f0
(could have the same class servicing several tied types, in practice this becomes cumbersome, and) show
28 695.9 moveto
12 f0
(it's easiest to simply keep them at one tie type per class. ) show
0 668.8 moveto
12 f1
(STORE this, index, value) show
129.6 668.8 moveto
12 f1
( ) show
28 655.5 moveto
12 f0
(This method will be triggered every time an element in the tied array is set \(written\). It takes two) show
28 642.2 moveto
12 f0
(arguments beyond its self reference: the index at which we're trying to store something and the) show
28 628.9 moveto
12 f0
(value we're trying to put there. For example: ) show
28 605 moveto
10 f4
(    sub STORE {) show
28 594.5 moveto
10 f4
(      my\($self, $idx, $value\) = @_;) show
28 584 moveto
10 f4
(      print "[STORE $value at $idx]\\n" if _debug;) show
28 573.5 moveto
10 f4
(      if \($idx > $self->{BOUND} \) {) show
28 563 moveto
10 f4
(        confess "Array OOB: $idx > $self->{BOUND}";) show
28 552.5 moveto
10 f4
(      }) show
28 542 moveto
10 f4
(      return $self->{ARRAY}[$idx] = $value;) show
28 531.5 moveto
10 f4
(    }) show
0 496.8 moveto
12 f1
(DESTROY this) show
79.6 496.8 moveto
12 f1
( ) show
28 483.5 moveto
12 f0
(This method will be triggered when the tied variable needs to be destructed. As with the sclar tie) show
28 470.2 moveto
12 f0
(class, this is almost never needed in a language that does its own garbage collection, so this time) show
28 456.9 moveto
12 f0
(we'll just leave it out. ) show
0 430.3 moveto
12 f0
(The code we presented at the top of the tied array class accesses many.elements of the array, far more) show
0 417 moveto
12 f0
(than we've set the bounds to. Therefore, it will blow up once they try to access beyond the 2nd element) show
0 403.2 moveto
12 f0
(of ) show
12.9 403.2 moveto
12 f1
(@ary) show
41.3 403.2 moveto
12 f0
(, as the following output demonstrates: ) show
0 379.3 moveto
10 f4
(    setting index 0: value of elt 0 now 0) show
0 368.8 moveto
10 f4
(    setting index 1: value of elt 1 now 10) show
0 358.3 moveto
10 f4
(    setting index 2: value of elt 2 now 20) show
0 347.8 moveto
10 f4
(    setting index 3: Array OOB: 3 > 2 at Bounded_Array.pm line 39) show
0 337.3 moveto
10 f4
(            Bounded_Array::FETCH called at testba line 12) show
0 307.3 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 270.4 moveto
18 f1
(Tying Hashes) show
104.5 270.4 moveto
18 f1
( ) show
0 242.5 moveto
12 f0
(As the first Perl data type to be tied \(see ) show
195.3 242.5 moveto
12 f2
(dbmopen\(\)) show
247.2 242.5 moveto
12 f0
(\), associative arrays have the most complete and) show
0 229.2 moveto
12 f0
(useful ) show
32.3 229.2 moveto
12 f2
(tie\(\)) show
52.2 229.2 moveto
12 f0
( implementation. A class implementing a tied associative array should define the following) show
0 215.9 moveto
12 f0
(methods: TIEHASH is the constructor. FETCH and STORE access the key and value pairs. EXISTS) show
0 202.6 moveto
12 f0
(reports whether a key is present in the hash, and DELETE deletes one. CLEAR empties the hash by) show
0 189.3 moveto
12 f0
(deleting all the key and value pairs. FIRSTKEY and NEXTKEY implement the ) show
385.6 189.3 moveto
12 f2
(keys\(\)) show
414.2 189.3 moveto
12 f0
( and ) show
437.5 189.3 moveto
12 f2
(each\(\)) show
0 176 moveto
12 f0
(functions to iterate over all the keys. And DESTROY is called when the tied variable is garbage) show
0 162.7 moveto
12 f0
(collected. ) show
0 136.1 moveto
12 f0
(If this seems like a lot, then feel free to merely inherit from the standard TieHash module for most of) show
0 122.8 moveto
12 f0
(your methods, redefining only the interesting ones. See ) show
267.9 122.8 moveto
12 f2
(TieHash) show
308.5 122.8 moveto
12 f0
( for details. ) show
0 96.2 moveto
12 f0
(Remember that Perl distinguishes between a key not existing in the hash, and the key existing in the) show
0 82.9 moveto
12 f0
(hash but having a corresponding value of ) show
200.9 82.9 moveto
10 f4
(undef) show
230.9 82.9 moveto
12 f0
(. The two possibilities can be tested with the ) show
446.8 82.9 moveto
10 f6
(exists\(\)) show
pagelevel restore
showpage
%%Page: 7 7
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 709.2 moveto
12 f0
(and ) show
20.3 709.2 moveto
10 f6
(defined\(\)) show
74.3 709.2 moveto
12 f0
( functions. ) show
0 682.6 moveto
12 f0
(Here's an example of a somewhat interesting tied hash class: it gives you a hash representing a) show
0 669.3 moveto
12 f0
(particular user's dotfiles. You index into the hash with the name of the file \(minus the dot\) and you get) show
0 656 moveto
12 f0
(back that dotfile's contents. For example: ) show
0 632.1 moveto
10 f4
(    use DotFiles;) show
0 621.6 moveto
10 f4
(    tie %mydots, DotFiles;) show
0 611.1 moveto
10 f4
(    if \( $mydots{profile} =~ /MANPATH/ ||) show
0 600.6 moveto
10 f4
(         $mydots{login}   =~ /MANPATH/ ||) show
0 590.1 moveto
10 f4
(         $mydots{cshrc}   =~ /MANPATH/ \)) show
0 579.6 moveto
10 f4
(     {) show
0 569.1 moveto
10 f4
(        print "you seem to set your manpath\\n";) show
0 558.6 moveto
10 f4
(    }) show
0 524.4 moveto
12 f0
(Or here's another sample of using our tied class: ) show
0 500.5 moveto
10 f4
(    tie %him, DotFiles, 'daemon';) show
0 490 moveto
10 f4
(    foreach $f \( keys %him \) {) show
0 479.5 moveto
10 f4
(        printf "daemon dot file %s is size %d\\n",) show
0 469 moveto
10 f4
(            $f, length $him{$f};) show
0 458.5 moveto
10 f4
(    }) show
0 424.3 moveto
12 f0
(In our tied hash DotFiles example, we use a regular hash for the object containing several important) show
0 411 moveto
12 f0
(fields, of which only the ) show
119.9 411 moveto
10 f4
({LIST}) show
155.9 411 moveto
12 f0
( field will be what the user thinks of as the real hash. ) show
28 383.9 moveto
12 f1
(USER) show
60 383.9 moveto
12 f0
( ) show
56 370.6 moveto
12 f0
(whose dot files this object represents ) show
28 343.5 moveto
12 f1
(HOME) show
66 343.5 moveto
12 f0
( ) show
56 330.2 moveto
12 f0
(where those dotfiles live ) show
28 303.1 moveto
12 f1
(CLOBBER) show
86.6 303.1 moveto
12 f1
( ) show
56 289.8 moveto
12 f0
(whether we should try to change or remove those dot files ) show
28 262.7 moveto
12 f1
(LIST) show
56 262.7 moveto
12 f0
( the hash of dotfile names and content mappings ) show
0 236.1 moveto
12 f0
(Here's the start of ) show
89.3 236.1 moveto
12 f2
(Dotfiles.pm) show
144.9 236.1 moveto
12 f0
(:. ) show
0 212.2 moveto
10 f4
(    package DotFiles;) show
0 201.7 moveto
10 f4
(    use Carp;) show
0 191.2 moveto
10 f4
(    sub whowasi { \(caller\(1\)\)[3] . '\(\)' }) show
0 180.7 moveto
10 f4
(    my $DEBUG = 0;) show
0 170.2 moveto
10 f4
(    sub debug { $DEBUG = @_ ? shift : 1 }) show
0 146.5 moveto
12 f0
(For our example, we want to able to emit debugging info to help in tracing during development. We) show
0 133.2 moveto
12 f0
(keep also one convenience function around internally to help print out warnings; ) show
389.9 133.2 moveto
12 f2
(whowasi\(\)) show
439.9 133.2 moveto
12 f0
( returns the) show
0 119.9 moveto
12 f0
(function name that calls it. ) show
0 93.3 moveto
12 f0
(Here are the methods for the DotFiles tied hash. ) show
pagelevel restore
showpage
%%Page: 8 8
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 708.7 moveto
12 f1
(TIEHASH classname, LIST) show
143 708.7 moveto
12 f1
( ) show
28 695.4 moveto
12 f0
(This is the constructor for the class. That means it is expected to return a blessed reference through) show
28 682.1 moveto
12 f0
(which the new object \(probably but not necessarily an anonymous hash\) will be accessed. ) show
28 655.5 moveto
12 f0
(Here's the constructor: ) show
28 631.6 moveto
10 f4
(    sub TIEHASH {) show
28 621.1 moveto
10 f4
(        my $self = shift;) show
28 610.6 moveto
10 f4
(        my $user = shift || $>;) show
28 600.1 moveto
10 f4
(        my $dotdir = shift || '';) show
28 589.6 moveto
10 f4
(        croak "usage: @{[&whowasi]} [USER [DOTDIR]]" if @_;) show
28 579.1 moveto
10 f4
(        $user = getpwuid\($user\) if $user =~ /^\\d+$/;) show
28 568.6 moveto
10 f4
(        my $dir = \(getpwnam\($user\)\)[7]) show
28 558.1 moveto
10 f4
(                || croak "@{[&whowasi]}: no user $user";) show
28 547.6 moveto
10 f4
(        $dir .= "/$dotdir" if $dotdir;) show
28 537.1 moveto
10 f4
(        my $node = {) show
28 526.6 moveto
10 f4
(            USER    => $user,) show
28 516.1 moveto
10 f4
(            HOME    => $dir,) show
28 505.6 moveto
10 f4
(            LIST    => {},) show
28 495.1 moveto
10 f4
(            CLOBBER => 0,) show
28 484.6 moveto
10 f4
(        };) show
28 474.1 moveto
10 f4
(        opendir\(DIR, $dir\)) show
28 463.6 moveto
10 f4
(                || croak "@{[&whowasi]}: can't opendir $dir: $!";) show
28 453.1 moveto
10 f4
(        foreach $dot \( grep /^\\./ && -f "$dir/$_", readdir\(DIR\)\) {) show
28 442.6 moveto
10 f4
(            $dot =~ s/^\\.//;) show
28 432.1 moveto
10 f4
(            $node->{LIST}{$dot} = undef;) show
28 421.6 moveto
10 f4
(        }) show
28 411.1 moveto
10 f4
(        closedir DIR;) show
28 400.6 moveto
10 f4
(        return bless $node => $self;) show
28 390.1 moveto
10 f4
(    }) show
28 355.9 moveto
12 f0
(It's probably worth mentioning that if you're going to filetest the return values out of a readdir,) show
28 342.6 moveto
12 f0
(you'd better prepend the directory in question. Otherwise, since we didn't ) show
385.6 342.6 moveto
12 f2
(chdir\(\)) show
418.9 342.6 moveto
12 f0
( there, it would) show
28 329.3 moveto
12 f0
(have been testing the wrong file. ) show
0 302.2 moveto
12 f1
(FETCH this, key) show
87 302.2 moveto
12 f1
( ) show
28 288.9 moveto
12 f0
(This method will be triggered every time an element in the tied hash is accessed \(read\). It takes) show
28 275.6 moveto
12 f0
(one argument beyond its self reference: the key whose value we're trying to fetch. ) show
28 249 moveto
12 f0
(Here's the fetch for our DotFiles example. ) show
28 225.1 moveto
10 f4
(    sub FETCH {) show
28 214.6 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 204.1 moveto
10 f4
(        my $self = shift;) show
28 193.6 moveto
10 f4
(        my $dot = shift;) show
28 183.1 moveto
10 f4
(        my $dir = $self->{HOME};) show
28 172.6 moveto
10 f4
(        my $file = "$dir/.$dot";) show
28 162.1 moveto
10 f4
(        unless \(exists $self->{LIST}->{$dot} || -f $file\) {) show
28 151.6 moveto
10 f4
(            carp "@{[&whowasi]}: no $dot file" if $DEBUG;) show
28 141.1 moveto
10 f4
(            return undef;) show
28 130.6 moveto
10 f4
(        }) show
28 120.1 moveto
10 f4
(        if \(defined $self->{LIST}->{$dot}\) {) show
28 109.6 moveto
10 f4
(            return $self->{LIST}->{$dot};) show
28 99.1 moveto
10 f4
(        } else {) show
28 88.6 moveto
10 f4
(            return $self->{LIST}->{$dot} = `cat $dir/.$dot`;) show
28 78.1 moveto
10 f4
(        }) show
pagelevel restore
showpage
%%Page: 9 9
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
28 711.9 moveto
10 f4
(    }) show
28 677.7 moveto
12 f0
(It was easy to write by having it call the Unix cat\(1\) command, but it would probably be more) show
28 664.4 moveto
12 f0
(portable to open the file manually \(and somewhat more efficient\). Of course, since dot files are a) show
28 651.1 moveto
12 f0
(Unixy concept, we're not that concerned. ) show
0 624 moveto
12 f1
(STORE this, key, value) show
119.6 624 moveto
12 f1
( ) show
28 610.7 moveto
12 f0
(This method will be triggered every time an element in the tied hash is set \(written\). It takes two) show
28 597.4 moveto
12 f0
(arguments beyond its self reference: the index at which we're trying to store something, and the) show
28 584.1 moveto
12 f0
(value we're trying to put there. ) show
28 557.5 moveto
12 f0
(Here in our DotFiles example, we'll be careful not to let them try to overwrite the file unless) show
28 544.2 moveto
12 f0
(they've called the ) show
116.3 544.2 moveto
12 f2
(clobber\(\)) show
160.9 544.2 moveto
12 f0
( method on the original object reference returned by ) show
413.8 544.2 moveto
12 f2
(tie\(\)) show
433.7 544.2 moveto
12 f0
(. ) show
28 520.3 moveto
10 f4
(    sub STORE {) show
28 509.8 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 499.3 moveto
10 f4
(        my $self = shift;) show
28 488.8 moveto
10 f4
(        my $dot = shift;) show
28 478.3 moveto
10 f4
(        my $value = shift;) show
28 467.8 moveto
10 f4
(        my $file = $self->{HOME} . "/.$dot";) show
28 457.3 moveto
10 f4
(        my $user = $self->{USER};) show
28 446.8 moveto
10 f4
(        croak "@{[&whowasi]}: $file not clobberable") show
28 436.3 moveto
10 f4
(            unless $self->{CLOBBER};) show
28 425.8 moveto
10 f4
(        open\(F, "> $file"\) || croak "can't open $file: $!";) show
28 415.3 moveto
10 f4
(        print F $value;) show
28 404.8 moveto
10 f4
(        close\(F\);) show
28 394.3 moveto
10 f4
(    }) show
28 360.1 moveto
12 f0
(If they wanted to clobber something, they might say: ) show
28 336.2 moveto
10 f4
(    $ob = tie %daemon_dots, 'daemon';) show
28 325.7 moveto
10 f4
(    $ob->clobber\(1\);) show
28 315.2 moveto
10 f4
(    $daemon_dots{signature} = "A true daemon\\n";) show
28 281 moveto
12 f0
(Where the clobber method is simply: ) show
28 257.1 moveto
10 f4
(    sub clobber {) show
28 246.6 moveto
10 f4
(        my $self = shift;) show
28 236.1 moveto
10 f4
(        $self->{CLOBBER} = @_ ? shift : 1;) show
28 225.6 moveto
10 f4
(    }) show
0 190.9 moveto
12 f1
(DELETE this, key) show
94.3 190.9 moveto
12 f1
( ) show
28 177.6 moveto
12 f0
(This method is triggered when we remove an element from the hash, typically by using the) show
28 164.3 moveto
12 f2
(delete\(\)) show
64.6 164.3 moveto
12 f0
( function. Again, we'll be careful to check whether they really want to clobber files. ) show
28 140.4 moveto
10 f4
(    sub DELETE   {) show
28 129.9 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 119.4 moveto
10 f4
(        my $self = shift;) show
28 108.9 moveto
10 f4
(        my $dot = shift;) show
28 98.4 moveto
10 f4
(        my $file = $self->{HOME} . "/.$dot";) show
28 87.9 moveto
10 f4
(        croak "@{[&whowasi]}: won't remove file $file") show
28 77.4 moveto
10 f4
(            unless $self->{CLOBBER};) show
pagelevel restore
showpage
%%Page: 10 10
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
28 711.9 moveto
10 f4
(        delete $self->{LIST}->{$dot};) show
28 701.4 moveto
10 f4
(        unlink\($file\) || carp "@{[&whowasi]}: can't unlink $file: $!";) show
28 690.9 moveto
10 f4
(    }) show
0 656.2 moveto
12 f1
(CLEAR this) show
63.6 656.2 moveto
12 f1
( ) show
28 642.9 moveto
12 f0
(This method is triggered when the whole hash is to be cleared, usually by assigning the empty list) show
28 629.6 moveto
12 f0
(to it. ) show
28 603 moveto
12 f0
(In our example, that would remove all the user's dotfiles! It's such a dangerous thing that they'll) show
28 589.7 moveto
12 f0
(have to set CLOBBER to something higher than 1 to make it happen. ) show
28 565.8 moveto
10 f4
(    sub CLEAR    {) show
28 555.3 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 544.8 moveto
10 f4
(        my $self = shift;) show
28 534.3 moveto
10 f4
(        croak "@{[&whowasi]}: won't remove all dotfiles for $self->{USER}") show
28 523.8 moveto
10 f4
(            unless $self->{CLOBBER} > 1;) show
28 513.3 moveto
10 f4
(        my $dot;) show
28 502.8 moveto
10 f4
(        foreach $dot \( keys %{$self->{LIST}}\) {) show
28 492.3 moveto
10 f4
(            $self->DELETE\($dot\);) show
28 481.8 moveto
10 f4
(        }) show
28 471.3 moveto
10 f4
(    }) show
0 436.6 moveto
12 f1
(EXISTS this, key) show
88.3 436.6 moveto
12 f1
( ) show
28 423.3 moveto
12 f0
(This method is triggered when the user uses the ) show
259.6 423.3 moveto
12 f2
(exists\(\)) show
294.2 423.3 moveto
12 f0
( function on a particular hash. In our) show
28 410 moveto
12 f0
(example, we'll look at the ) show
155.9 410 moveto
10 f4
({LIST}) show
191.9 410 moveto
12 f0
( hash element for this: ) show
28 386.1 moveto
10 f4
(    sub EXISTS   {) show
28 375.6 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 365.1 moveto
10 f4
(        my $self = shift;) show
28 354.6 moveto
10 f4
(        my $dot = shift;) show
28 344.1 moveto
10 f4
(        return exists $self->{LIST}->{$dot};) show
28 333.6 moveto
10 f4
(    }) show
0 298.9 moveto
12 f1
(FIRSTKEY this) show
83 298.9 moveto
12 f1
( ) show
28 285.6 moveto
12 f0
(This method will be triggered when the user is going to iterate through the hash, such as via a) show
28 272.3 moveto
12 f2
(keys\(\)) show
56.6 272.3 moveto
12 f0
( or ) show
72.5 272.3 moveto
12 f2
(each\(\)) show
103.1 272.3 moveto
12 f0
( call. ) show
28 248.4 moveto
10 f4
(    sub FIRSTKEY {) show
28 237.9 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 227.4 moveto
10 f4
(        my $self = shift;) show
28 216.9 moveto
10 f4
(        my $a = keys %{$self->{LIST}};) show
28 206.4 moveto
10 f4
(        each %{$self->{LIST}}) show
28 195.9 moveto
10 f4
(    }) show
0 161.2 moveto
12 f1
(NEXTKEY this, lastkey) show
123 161.2 moveto
12 f1
( ) show
28 147.9 moveto
12 f0
(This method gets triggered during a ) show
202.6 147.9 moveto
12 f2
(keys\(\)) show
231.2 147.9 moveto
12 f0
( or ) show
247.1 147.9 moveto
12 f2
(each\(\)) show
277.7 147.9 moveto
12 f0
( iteration. It has a second argument which is) show
28 134.6 moveto
12 f0
(the last key that had been accessed. This is useful if you're carrying about ordering or calling the) show
28 121.3 moveto
12 f0
(iterator from more than one sequence, or not really storing things in a hash anywhere. ) show
28 94.7 moveto
12 f0
(For our example, we our using a real hash so we'll just do the simple thing, but we'll have to) show
28 81.4 moveto
12 f0
(indirect through the LIST field. ) show
pagelevel restore
showpage
%%Page: 11 11
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
28 705.5 moveto
10 f4
(    sub NEXTKEY  {) show
28 695 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 684.5 moveto
10 f4
(        my $self = shift;) show
28 674 moveto
10 f4
(        return each %{ $self->{LIST} }) show
28 663.5 moveto
10 f4
(    }) show
0 628.8 moveto
12 f1
(DESTROY this) show
79.6 628.8 moveto
12 f1
( ) show
28 615.5 moveto
12 f0
(This method is triggered when a tied hash is about to go out of scope. You don't really need it) show
28 602.2 moveto
12 f0
(unless you're trying to add debugging or have auxiliary state to clean up. Here's a very simple) show
28 588.9 moveto
12 f0
(function: ) show
28 565 moveto
10 f4
(    sub DESTROY  {) show
28 554.5 moveto
10 f4
(        carp &whowasi if $DEBUG;) show
28 544 moveto
10 f4
(    }) show
0 509.8 moveto
12 f0
(Note that functions such as ) show
132.9 509.8 moveto
12 f2
(keys\(\)) show
161.5 509.8 moveto
12 f0
( and ) show
184.8 509.8 moveto
12 f2
(values\(\)) show
223.4 509.8 moveto
12 f0
( may return huge array.values when used on large objects,) show
0 496.5 moveto
12 f0
(like DBM files. You may prefer to use the ) show
205.9 496.5 moveto
12 f2
(each\(\)) show
236.5 496.5 moveto
12 f0
( function to iterate over such. Example: ) show
0 472.6 moveto
10 f4
(    # print out history file offsets) show
0 462.1 moveto
10 f4
(    use NDBM_File;) show
0 451.6 moveto
10 f4
(    tie\(%HIST, NDBM_File, '/usr/lib/news/history', 1, 0\);) show
0 441.1 moveto
10 f4
(    while \(\($key,$val\) = each %HIST\) {) show
0 430.6 moveto
10 f4
(        print $key, ' = ', unpack\('L',$val\), "\\n";) show
0 420.1 moveto
10 f4
(    }) show
0 409.6 moveto
10 f4
(    untie\(%HIST\);) show
0 379.6 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 342.7 moveto
18 f1
(Tying FileHandles) show
141.5 342.7 moveto
18 f1
( ) show
0 314.8 moveto
12 f0
(This isn't implemented yet. Sorry; maybe someday. ) show
0 292.4 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 249.9 moveto
24 f1
(SEE ALSO) show
116.7 249.9 moveto
24 f1
( ) show
0 220.7 moveto
12 f0
(See ) show
20.3 220.7 moveto
12 f2
(DB_File) show
61.6 220.7 moveto
12 f0
( or ) show
77.5 220.7 moveto
12 f2
(Config) show
110.1 220.7 moveto
12 f0
( for some interesting ) show
212 220.7 moveto
12 f2
(tie\(\)) show
231.9 220.7 moveto
12 f0
( implementations. ) show
0 198.3 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
0 155.8 moveto
24 f1
(BUGS) show
65.3 155.8 moveto
24 f1
( ) show
0 126.6 moveto
12 f0
(Tied arrays are ) show
74.9 126.6 moveto
12 f2
(incomplete) show
127.5 126.6 moveto
12 f0
(. It is also distinctly lacking something for the ) show
350.8 126.6 moveto
10 f5
($#) show
362.8 126.6 moveto
10 f4
(ARRAY) show
392.8 126.6 moveto
12 f0
( access \(which is hard,) show
0 113.3 moveto
12 f0
(as it's an lvalue\), as well as the other obvious array functions, like ) show
321.1 113.3 moveto
12 f2
(push\(\)) show
351.7 113.3 moveto
12 f0
(, ) show
358.6 113.3 moveto
12 f2
(pop\(\)) show
384.5 113.3 moveto
12 f0
(, ) show
390.5 113.3 moveto
12 f2
(shift\(\)) show
419.1 113.3 moveto
12 f0
(, ) show
425.1 113.3 moveto
12 f2
(unshift\(\)) show
465.7 113.3 moveto
12 f0
(, and) show
0 100 moveto
12 f2
(splice\(\)) show
35.9 100 moveto
12 f0
(. ) show
0 77.6 moveto
504 0 rlineto 0 -1.4 rlineto -504 0 rlineto closepath  fill 
pagelevel restore
showpage
%%Page: 12 12
%%BeginPageSetup
/pagelevel save def
54 0 translate
%%EndPageSetup
newpath 0 72 moveto 504 0 rlineto 0 648 rlineto -504 0 rlineto  closepath clip newpath
0 683.1 moveto
24 f1
(AUTHOR) show
105.3 683.1 moveto
24 f1
( ) show
0 653.9 moveto
12 f0
(Tom Christiansen ) show
pagelevel restore
showpage
%%EOF
