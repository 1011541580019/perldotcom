
<!-- This week on perl5-porters (23 April 2000) -->

<br />
<!::field::date::><br />      </P>

<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Meta_Information_">Meta-Information </a>
  <li><a href="#Brief_Update">Brief Update</a>
  <li><a href="#p5p_to_become_Refereed?">p5p to become Refereed?</a>
  <li><a href="#perlretut_and_perlrequick">perlretut and perlrequick</a>
  <li><a href="#Threading_Hilarity">Threading Hilarity</a>
  <li><a href="#Line_Disciplines">Line Disciplines</a>
  <li><a href="#Older_Discussion_of_Disciplines">Older Discussion of Disciplines</a>
  <li><a href="#Big_Line_Numbers">Big Line Numbers</a>
  <li><a href="#Pseudohash_Field_Names_Hash_Performance_and_map_Performance">Pseudohash Field Names, Hash Performance, and map Performance</a>
  <li><a href="#C_with_Embedded_Perl">C with Embedded Perl</a>
  <li><a href="#Unreachable_code">`Unreachable' code.</a>
  <li><a href="#sprintf_Precision">sprintf Precision</a>
  <li><a href="#SDF_Replacement">SDF Replacement</a>
  <li><a href="#Various">Various</a>
</ul>

<P>

<H3><a name="Notes">Notes</a></H3>

<H4><a name="Meta_Information_">Meta-Information </a></H4>

</P>

<P>

The most recent report will always be available at 
<a href="http://www.perl.com/p5pdigest.cgi">http://www.perl.com/p5pdigest.cgi </a>.
</P>

<P>
You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
<H3><a name="Brief_Update">Brief Update</a></H3>

</P>

<P>

Since last time, Perl 5.6.0 has been released.  As you can see, the
version-numbering scheme has been changed.  If it had not been
changed, this would have been 5.006, or maybe 5.006_00.  
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-03/msg02596.html">Announcement for version 5.6.0</a></P>

<P>
In the wake of this, list traffic was very high with various small bug
reports and configuration problems.  It has since quieted down.
</P>

<P>
Another major contributor to the high volume in late March and early
April was a huge amount of whining and recrimination about whether or
not 5.6.0 wasn't any good.  Gosh, p5p at its worst.  Sarathy works
like a dog to get 5.6.0 ready, and then <i>after</i> the release everyone
started whining.
</P>

<P>
On the one hand were people complaining about bugs and how it was
unstable and saying that nobody was going to switch, and there were
some accusations that Sarathy was part of a Microsoft conspiracy to
sabotage Perl.  Blah blah blah.  Then on the other hand were a lot of
people saying that the changes were not significant enough to warrant
a new version number.  
</P>

<P>
(To this last point, I think 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00042.html">Tom's reply </a> answers the point most effectively.  The tone is characteristic of
most of the entire discussion.)
</P>

<P>
You would think that at most one set of these assertions could be
plausible; either Microsoft is trying to sabotage Perl by forcing a
premature, unstable release, <i>or</i> the changes are too small to be
worth releasing.  You might think this, but you would be mistaken.
</P>

<P>
Now let's close the book on this particularly disgraceful chapter.
<H3><a name="p5p_to_become_Refereed?">p5p to become Refereed?</a></H3>

</P>

<P>

Partly as a result of the long, tedious, and irrelevant flamefest that
took up so much time and energy in March and April, Sarathy proposed
that the list be `refereed'.  This is a little different from
moderation:   Most people's messages go through normally, but if the
referees agree, then messages in a certain thread or from a certain
subscriber have to pass a moderator before they are sent to the list.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00574.html">Read the actual proposal before you make up your mind.</a></P>

<P>

The following discussion was gratifyingly free of manifestoes,
ultimatums, accusations, soapboxing, etc.
<blockquote><b>Sarathy:</b> Many good people are not here anymore.  Chip left, but has been brave enough to run a new list in an attempt to rediscover the old perl5-porters as we knew it.  Jarkko disappeared, disgusted by all the name-calling and lurid behavior.  Andy is gone too, thanks to useless arguments, personality  clashes, and FUD-mongering.  We simply cannot afford this. </blockquote> </P>

<P>

A sideline here was that Jarkko expressed a desire that someone else
pick up the Configure pumpkin.  If you want to pick up the Configure
pumpkin, contact Jarkko.
</P>

<P>

<blockquote><b>Jarkko:</b> We need to educate more pumpkin holders. </blockquote> <H3><a name="perlretut_and_perlrequick">perlretut and perlrequick</a></H3>

</P>

<P>

While I wasn't doing reports, Mark Kvale submitted a draft of a 
<CODE>perlretut</CODE> man page which would be a tutorial for regular expression beginners.
 (Maybe you haven't noticed that the existing 
<CODE>perlre</CODE> man page is incomprehensible unless you've been using 
<CODE>sed</CODE> for three years already.)  I complained that 
<CODE>perlretut</CODE> was much too long, and Mark obligingly produced a cut-down version, 
<CODE>perlrequick</CODE>.  
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00321.html">perlretut</a></P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00444.html">perlrequick</a><H3><a name="Threading_Hilarity">Threading Hilarity</a></H3>

</P>

<P>

Dan Sugalski discovered that the 
<CODE>lock()</CODE> function is not thread safe.  I nominate this for Funniest
 Unintentional Perl Source Joke of 2000.
</P>

<P>
This started off another debate between Dan and Sarathy about the best
appraoch for Perl threads.  Dan's patch added a mutex to <i>every</i> SV;
Sarathy objected to this.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00624.html">The thread starts here.</a><blockquote><b>Dan Sugalski:</b> Whenever there's any sharing you have to deal with this.<br> <b>Sarathy:</b> Sorry, I don't have a VISA to enter the Land of Conclusions just now. :-) <br> <b>Dan:</b> And apparently nobody's granted a visa to enter the Land Of Even Partially  Working Alternatives in the past two years either. </blockquote> </P>

<P>

<a
href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00699.html">Sarathy's
reply</a><p>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00773.html">Discussion continued later in a second thread.</a></P>

<P>

The discussion was really interesting, and I didn't understand all of
it.  If someone wants to contribute a more detailed discussion of the
issues for my next report, I'd be grateful to get it.
<H3><a name="Line_Disciplines">Line Disciplines</a></H3>

</P>

<P>

Simon Cozens did some work on the promised 'line disciplines' feature
that didn't quite materialize in 5.6.0.  It's a proof-of-concept, and
it's not quite finished.  The idea is that you could associate a Perl
(or XS) function with a filehandle, and then any time you read from
the filehandle, the function is called to transform the input somehow.
Typical transformations: Turn CRLF into LF for Windows machines; turn
some national character set like ISO-2022 into 
Unicode or vice versa.
</P>

<P>
The rudiments of this are in Perl 5.6.0; see for example the
documentation for 
<CODE>binmode()</CODE> in 5.6.0.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00807.html">Simon's message.</a></P>

<P>

<H3><a name="Older_Discussion_of_Disciplines">Older Discussion of Disciplines</a></H3>

<a href="http://www.perl.com/pub/1999/11/p5pdigest/THISWEEK-19991107.html#Record_Separators_that_Contain_NUL">Previous discussion part I</a></P>

<P>

<a
href="http://www.perl.com/pub/1999/11/p5pdigest/THISWEEK-19991114.html#More_About_Line_Disciplines">Previous
discussion part II</a><p>

<a href="http://www.perl.com/pub/1999/11/p5pdigest/THISWEEK-19991128.html#Discussion_of_Line_Disciplines_Continues">Previous discussion part III</a></P>

<P>

<H3><a name="Big_Line_Numbers">Big Line Numbers</a></H3>

</P>

<P>

James Jurach reported that when your program is more than 65,535 lines
long, Perl reports the wrong line numbers for errors.  It turns out
that the line numbers are stored in the op node, and are only 16 bits
long, to save space.  (In a 64Kline program, 32-bit line numbers would
consume and extra 128Kb space.)  James submitted a patch that makes
32-bit line numbers a compile-time option.
<H3><a name="Pseudohash_Field_Names_Hash_Performance_and_map_Performance">Pseudohash Field Names, Hash Performance, and map Performance</a></H3>

</P>

<P>

Benjamin Tilly brought up a number of interesting points.  First, the
error message that 
says 
<CODE>No such array field</CODE> for a pseudohash does not say what the problem field name is.  And
second, that hash performance could degrade more gracefully than it
does at present if, when the linked list in a bucket got too long, it
was replaced with a binary search tree.
</P>

<P>
However, he did not provide patches for either of these things.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00610.html">Benjamin's article</a></P>

<P>
Later, Benjamin reported that 
<CODE>map</CODE> is quite slow in some cases, even slower than an all-Perl function to
 do the same 
thing.  It appears that the 
<CODE>grep</CODE> function, which 
<CODE>map</CODE> is based on, is optimized to be fast in cases where the result list
is no longer than the argmuent list.  For 
<CODE>grep</CODE>, this is all cases.  But is it not always true for 
<CODE>map</CODE>, the typical example being
</P>

</P><PRE>
        %hash = map {($_ => 1)} @array;
</PRE>

<P>
Benjamin suggested how this might be fixed, but unfortunately did not
provide a patch.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00647.html">Benjamin's other article</a></P>

<P>
Benjamin also reported a bug in 
<CODE>Math::BigInt</CODE>; it crashes with 
<CODE>Out of memory!</CODE> when it shouldn't.  Hugo van der Sanden confirmed, and found a
 smaller test case:
</P>

</P><PRE>
        perl -we 'use Math::BigInt ":constant"; for ($n = 1; $n < 10; $n++) { 1 }'
</PRE>

<P>

<H3><a name="C_with_Embedded_Perl">C with Embedded Perl</a></H3>

</P>

<P>

Vadim Konovalov came up with a very simple and convenient way to embed
Perl code into a C program.  It's a simple preprocessor that works
alongside the regular C preprocessor.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00492.html">Read about it.</a></P>

<P>

<H3><a name="Unreachable_code">`Unreachable' code.</a></H3>

</P>

<P>
Someone named Zefram took issue with the part of the manual that says
</P>

</P><PRE>
        [goto] also can't be used to go into a construct that is
        optimized away.
</PRE>

<P>
His example:
</P>

</P><PRE>
	if(0) {
	  FOO:
	    print"foo\n";
	    exit
	} 
	print "1\n";
	goto FOO;
</PRE>

<P>
Here the 
<CODE>if</CODE> block is optimized away, so the program prints 
<CODE>1</CODE> and then aborts with 
<CODE>Can't find label FOO</CODE>.  Zefram rightly points out that he is not supposed to know what
might or might not be optimized away, and that there should at least
be a compile-time warning in this case.  He also says:
<blockquote>Unreachable code elimination is a good thing.  But if code has a label in front of it then there's a fair chance that it's not unreachable.</blockquote> </P>

<P>

Hard to argue with that.  However, there were no followups.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00573.html">The original message.</a><H3><a name="sprintf_Precision">sprintf Precision</a></H3>

</P>

<P>

Someone wrote in (again) asking why 
<CODE>sprintf("%.0f", 0.5)</CODE> yielded 0 and not 1.  I wouldn't mention this, except that it
 attracted a followup from John Peacock, who said he was writing a 
<CODE>Math::FixedPrecision</CODE> module that might help with this sort of problem.  It sounds
 interesting, and might be worth a look.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00766.html">Read about it.</a></P>

<P>

<H3><a name="SDF_Replacement">SDF Replacement</a></H3>

</P>

<P>
Some time ago, Ian Clatworthy developed a document format called SDF,
the Simple Document Format.   It's a markup language that's easy to
read, like POD, but more powerful, but also convertible to many other
formats.  (In some cases it uses POD as an intermediate format.)
</P>

<P>
Ian announced to p5p that he was working on a successor to SDF, called
ANEML.  He did this because he thought we'd be interested (I'm
certainly interested) and because he thought someone might volunteer
to help him.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-04/msg00810.html">Many details are here.</a></P>

<P>

<H3><a name="Various">Various</a></H3>

</P>

<P>

A large collection of bug reports, bug fixes, non-bug reports,
questions, and answers.    No spam this time.
</P>

<P>

Until next time I remain, your humble and obedient
servant, 
</P>

<P>

</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200004+@plover.com">Mark-Jason Dominus</a>

