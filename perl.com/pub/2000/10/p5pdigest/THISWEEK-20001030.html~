
<h2>This week on perl5-porters (23-30 Oct 2000)</h2>
<!::field::id-author::before=by+::>
<br />
<!::field::date::>
<br />


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#sprintf_Parameter_Re_ordering">sprintf Parameter Re-ordering</a>
  <li><a href="#The_Dangers_and_bugs_of_Unicode">The Dangers (and bugs) of Unicode</a>
  <li><a href="#Self_Tying_Is_Broken">Self-Tying Is Broken</a>
  <li><a href="#Configure_Confused_By_Changing_Architectures">Configure Confused By Changing Architectures</a>
  <li><a href="#Encode"><code>Encode</code></a>
  <li><a href="#Switch">Switch</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>simon@brecon.co.uk</CODE></P>

<P>
This was a bit of a Unicode-heavy week; maybe it's because that's what I
particularly notice, or maybe it's because it's the most broken bit.
<H3><a name="sprintf_Parameter_Re_ordering">sprintf Parameter Re-ordering</a></H3>

</P>

<P>

Jarkko got around to implementing a 
<CODE>sprintf</CODE> which lets you reorder the parameters, so that you can now say:
</P>

<P>
<PRE>
        printf &quot;%2\$d %1\$d\n&quot;, 12, 34;           
        # will print &quot;34 12\n&quot;
</PRE>
</P>

<P>
There was some discussion as to whether that's the right way to do it,
but that's the way libc seems to do it, so we should too.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-10/msg00962.html">Read about it.</a></P>

<P>
  
<H3><a name="The_Dangers_and_bugs_of_Unicode">The Dangers (and bugs) of Unicode</a></H3>

</P>

<P>
Jarkko mentioned an
<a href="http://www.counterpane.com/crypto-gram-0007.html#9">article about Unicode security</a> in Bruce Schneier's Counterpoint. It's a load of scaremongering about how Unicode can
 never be secure, apparently. 
</P>

<P>
Now, I have to admit that I think this is bogus, but 
Jarkko also pointed out Markus Kuhn's 
<a href="http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8">Unicode information</a> which is really worth reading. There was some discussion about exactly
how bogus it was.
</P>

<P>[ Dominus here:  I didn't think Bruce was scaremongering.  To
understand Bruce's 
point, consider a CGI program written in Perl and running in taint
mode.  It gets a user input, which it plans to use as a filename, and
it wants to untaint the input.  The usual advice you get is to have a
list of acceptable characters, say <code>[0-9A-Za-z]</code> and to
reject the input if it contains some other sort of character.  </p>

<p>[ Now, as I understand it, Bruce's point is that this strategy is
going to be a lot more dangeous in the Unicode world, because there
will be many occasions on which restricting inputs to be just
<code>[A-Za-z0-9]</code> will be unacceptable.  Restricting input to "just
letters and digits" is much, much more complicated under Unicode, because there are
<em>thousands</em> of different characters that could be letters or
digits.  Bruce also points out that although we have decades of
experience in dealing with the (relatively few) oddities and escape
codes that are found in ASCII, we have little experience with the much
more complicated semnatics of Unicode, which includes issues like byte
ordering and normalization.  I now return you to Simon Cozens. ]</p>

<P>
In other Unicode news, Jarkko also noted that  
<CODE>\x{some number}</CODE> should always produce a UTF8 string, no matter whether or not  
<CODE>use utf8</CODE> is in effect. I had a horrible feeling of deja vu, and churned out a
patch. There was some discussion from Jarkko and Andreas about the use
of the 
<CODE>use utf8</CODE> pragma; basically, it's supposed to become a no-op, so we shouldn't be
adding any more functionality to it right now.
<H3><a name="Self_Tying_Is_Broken">Self-Tying Is Broken</a></H3>

</P>

<P>

Steffen Bayer has noticed that removing the capacity to tie an object to
itself breaks his 
<a href="http://search.cpan.org/doc/STBEY/Data-Locations-4.4/Locations.pm">Data::Locations</a> module: he was using it to make filehandles which were also objects. (A
really cool idea, but undocumented and unsupported.)
</P>

<P>
There followed a long and fairly acrimonious thread, but a 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-10/msg01139.html">sensible conclusion</a>: Jarkko reallowed self-ties on scalars. Marc Lehmann tried to stir up
trouble by asking what should be done about pseudohashes. Jarkko got it
right:
<BR><blockquote>Yes.  They should die.  How's that for a polemic statement? :-)</blockquote><BR></P>

<P>
Unsurprisingly, nobody disagreed.
<H3><a name="Configure_Confused_By_Changing_Architectures">Configure Confused By Changing Architectures</a></H3>

</P>

<P>

Nicholas Clarke found that if you reuse your 
<CODE>Policy.sh</CODE> between updating your source tree, things break. Doctor, it hurts when
I do that.
</P>

<P>
He also noted that if you change your architecture (for instance, from
using threads to not using threads) then sometimes Configure doesn't
pick up the change. Don't reuse your  
<CODE>config.sh</CODE> if you do this.
</P>

<P>
On a vaguely similar note, Merijn Brand found that doing a 
<CODE>make okfile</CODE> would cause Perl to be rebuilt; he and Nicholas Clark did some
debugging, and Nicholas eventually found the problem and fixed it - a
little problem with auto-generated files and dependencies.
<H3><a name="Encode"><code>Encode</code></a></H3>

</P>

<P>

Work on the <code>Encode</code> module to convert character sets continues, and it's
really looking good now. (Everyone say &quot;thank you&quot; to Nick, who's also
doing superb work on line disciplines!) 
</P>

<p>
[ Dominus again:  What Nick is doing is so interesting that I thought
it deserved special mention.  Nick wrote a replacement standard I/O
package and embedded it into Perl.  This continues Perl's trend
towards providing its own functionality in areas traditionally covered
by the C library, and removing dependence on the various broken
libraries that are provided by vendors.
This has happened already with <code>sprintf</code> and
<code>qsort</code>. <a
href="http://www.perl.com/pub/2000/10/p5pdigest/THISWEEK-20001023.html#More_than_256_Files__sysopen">Last
week's item about the limit of 256 open files under Solaris</a> shows
that even basic functions on major platforms can be impaired.</p>

<p>[ In any case, it became clear a while ago that to support Unicode
properly, Perl was going to have to have a custom stdio package, and
Nick's work is a big first step in that direction.  <a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-10/msg01323.html">Read
more</a>. -- D. ]</p>

<P>
Peter Prymmer's did an excellent job and created an EBCDIC-&gt;Unicode
mapping with it; Nick came up with a POD translation of the
documentation on 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-10/msg01122.html">how Encode's mapping files work</a>. (We stole them from Tcl! Ha!)
</P>

<P>
The thread wandered off into discussion of what the Unicode characters 
<CODE>0x0000</CODE> and 
<CODE>0xFFFF</CODE> mean. Don't just guess, see the 
<a href="http://www.unicode.org/unicode/faq/">Unicode FAQ</a>!
<H3><a name="Switch">Switch</a></H3>

</P>

<P>

Jarkko considered adding Damian Conway's  
<CODE>switch</CODE> module into core; the module simulates the 
<CODE>switch</CODE> statement you'll see in many other languages. Damian's old version is
available from 
<a href="http://search.cpan.org/doc/DCONWAY/Switch-1.00/Switch.pm">CPAN</a>, but he should be working on a new version in line with 
<a href="http://dev.perl.org/rfc/22.html">his Perl 6 RFC</a>. Tim worried about Perl 5 appearing to bless a particular switch
semanting before Larry had decided anything - Jarkko said that Damian
would get it right anyway, and Andy pointed out that it would encourage
people to play with it.
</P>

<P>
As he mentioned, there are three ways we could do it: use the Perl
module and a source filter, convert the module to XS and use a source
filter, or hack at the tokeniser and parser. Nobody wanted to do the
latter option, since Hugo pointed out that it probably wouldn't be worth
it due to the emergence of Perl 6. It might not happen, but if it does,
it'll probably happen with an XS module. 
<H3><a name="Various">Various</a></H3>

</P>

<P>

There was one flame this week. It was from me. Oops. Sorry, Steffen!
</P>

<P>
Oh, and I messed up last week - I said that 
<CODE>sysopen</CODE> used 
<CODE>fopen</CODE>, but as Mark-Jason Dominus explains:
<BR><blockquote>Contrary to what you say, <code>sysopen()</code> doesn't call <code>fopen()</code>.  It calls
through <code>Perl_do_open9</code>, and the real <code>open()</code>ing occurs at <code>doio.c:161</code> in
the <code>PerlLIO_open3</code> call, which is a macro that (on unix systems)
invokes the true <code>open()</code>, not <code>fopen()</code>.  This <code>open()</code> call succeeds, and
returns a file descriptor.  The problem behavior occurs later, at line
188, when Perl calls <code>fdopen()</code> to associate a standard I/O stream with
the open descriptor.  This is the call that fails.
</blockquote></P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>
