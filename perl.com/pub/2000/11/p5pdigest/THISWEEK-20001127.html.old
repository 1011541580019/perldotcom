</P>

<P>


<!-- This week on perl5-porters (21--27 Nov 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Regexp_Engine">Regexp Engine</a>
  <li><a href="#SOCKS_and_Sockets">SOCKS and Sockets</a>
  <li><a href="#for_map_and_grep">for, map and grep</a>
  <li><a href="#Encode_Licensing">Encode Licensing</a>
  <li><a href="#PERL5OPT">PERL5OPT</a>
  <li><a href="#Unicode_on_Big_Iron">Unicode on Big Iron</a>
  <li><a href="#Carp">Carp</a>
  <li><a href="#SvTEMP">SvTEMP</a>
  <li><a href="#Locales_and_floats">Locales and Floats</a>
  <li><a href="#Low_hanging_fruit">Low-Hanging Fruit</a>
  <li><a href="#Miscellaneous">Miscellaneous</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an e-mail version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>simon@brecon.co.uk</CODE></P>

<P>
This week was very busy, and saw nearly 400 posts. Unfortunately, I was
also very busy, so this report is slightly late. 
<H3><a name="Regexp_Engine">Regexp Engine</a></H3>

</P>

<P>

First, Jarkko has this to say about his progress with the 
<a href="http://www.perl.com/pub/2000/11/p5pdigest/THISWEEK-20001120.html#Fixing_The_Regexp_Engine">polymorphic regular expression node</a> problem:
<blockquote></P>

<P>
To this I can add that if so far I had been happily bouncing around
the strange lands of Reg-Ex and shouting back &quot;Dragons?  What dragons?&quot;
to people frantically waving their hands (safely beyond the borders,
funny that)... now I can attest to nasty monsters being fully alive,
and full of flame ... the match variables are now under control
(I *think*) -- but the character classes are mean, mostly because the
data structures implementing them are so different between the byte
and character cases, merging the code using them is, errrm, fun?
I'm currently dodging core dumps falling from the sky, but I think
I'm running in generally right direction ...
</blockquote></P> 

<P>
Ilya also questioned the methodology of merging character and byte
nodes, and Jarkko explained further what he was doing. 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01077.html">Read about it.</a><H3><a name="SOCKS_and_Sockets">SOCKS and Sockets</a></H3>

</P>

<P>

Jens Hamisch noticed a problem with the SOCKS support: Perl had aliased 
<CODE>close</CODE> to 
<CODE>fclose</CODE> without making a distinction between file and socket cases. SOCKS
provides wrapper functions around a lot of the I/O library, but it
expects people to call 
<CODE>close</CODE> rather than
<CODE>fclose</CODE> on sockets. 
</P>

<P>
Jens provided a patch, but it only seemed to scratch the surface, so Nick 
suggested that, since others had pointed out that playing 
<CODE>stdio</CODE> on sockets was not exactly recommended, we should work the SOCKS
support into our 
<CODE>stdio</CODE> emulation as part of PerlIO.
</P>

<P>
The thread continued to discuss the finer intricacies of PerlIO, 
<CODE>stdio</CODE> and SOCKS support; if that's your thing,
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01181.html">Read about it.</a><H3><a name="for_map_and_grep">for, map and grep</a></H3>

</P>

<P>

There was a long discussion, prompted by Jarkko, about how it would be 
nice if 
<CODE>for</CODE> could be used more like 
<CODE>map</CODE> or  
<CODE>grep</CODE>, and vice versa, allowing you to say things like:
</P>

</P><PRE>
    map $a { $_ += $a } @array
    grep $a { ... grep $b { $a + $b } } @array
</PRE>

<P>
and also
</P>

</P><PRE>
    for (@a) { ... } if $thing
    $total += $_ for @a if $thing
    
This led to a general discussion of dream syntax for post-expression
modifiers, including things such as:
</PRE>

</P><PRE>
    do_this if $that unless $the_other
</PRE>

<P>
There was no concensus or any patches, but it was fun anyway.
</P>

<P>
It also spawned an interesting sub-thread, which related to the fact
that the implementation of 
<CODE>qw//</CODE> has changed and now the values it produces are read-only in a 
<CODE>for</CODE> loop, hence things like
</P>

</P><PRE>
    map { s/foo/bar/; $_ } qw(good food) 
</PRE>

<P>
now produce an error. Some people thought this was bad, some thought it
was good, some thought it was a bug fix, others thought it was an
unnecessary semantic change. A suggestion was to have some kind of
copy-on-write method so that changing a value in an iterator creates a
copy of the value that is no longer read-only.
</P>

<P>
The whole thread eventually came down to the fact that everyone wants
``Perl to Do What They Mean,'' but ``What They Mean May Not Be What Other
People Mean.''
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg00989.html">Read about it.</a></P>

<P>

<H3><a name="Encode_Licensing">Encode Licensing</a></H3>

</P>

<P>
Remember I told you that we used the Encode files from Tcl? Well, as
Nick was preparing documentation on the file format for the conversion
tables, Jarkko spotted the license. Oops! 
</P>

<P>
While Tcl is open-source, the terms it's distributed under aren't the
same terms as Perl, so there was some ooh-ing and aah-ing about whether
it could be let in there. Sarathy piped up and said we should do the
same as we did for 
<CODE>File::Glob</CODE> - include the data, and keep the licensing terms as part of that 
extension.
<H3><a name="PERL5OPT">PERL5OPT</a></H3>

</P>

<P>

Dominus noted that the environment variable 
<CODE>PERL5OPT</CODE>, which claims to behave exactly like switches on the Perl command
command line, doesn't actually behave like that: 
</P>

</P><PRE>
    PERL5OPT=-a -b perl program.pl
</PRE>

<P>
actually turns out to be interpreted as 
</P>

</P><PRE>
    perl '-a -b' program.pl
</PRE>

<P>
which meant that you couldn't have more than one 
<CODE>-M</CODE> clause. It also turned out (as reported to me by Rich Lafferty) that
</P>

</P><PRE>
    PERL5OPT='-Mstrict; print "Hello\n"'
</PRE>

<P>
has rather unpleasant results, and there was some discussion as to
whether this was a security problem.
</P>

<P>
Your humble author produced a patch to have the variable interpreted
properly, and Dominus came up with a neat set of tests; however, both
patch and test appeared to be slightly buggy, so that's not quite
resolved just yet.
<H3><a name="Unicode_on_Big_Iron">Unicode on Big Iron</a></H3>

</P>

<P>

Peter Prymmer has been making OS/390 Perl better; it now passes a
whopping 94.12 percent of its tests. However, I complained that the reason that
it was passing some of those was that we were hiding the fact that
Unicode didn't work. There was some, uhm, heated debate before we all
ascertained that we really did want Unicode to work, and we looked into
the problems that are stopping it. 
</P>

<P>
The nice thing about Unicode for ASCII machines is that the bottom 128
characters are the same, so you don't even need to think about
them. The nasty thing about Unicode for EBCDIC machines is that they're
not ASCII machines, and so there has to be some kind of translation
going on. The plan is to introduce an array that converts EBCDIC to
ASCII, and we'll see where that gets us.
<H3><a name="Carp">Carp</a></H3>

</P>

<P>

Ben Tilly has been thinking for a while about the 
<CODE>Carp</CODE> module; it has convoluted and messy internal semantics. 
</P>

<P>
Here's how the problem comes about: Carp has to report errors on behalf of 
your module - let's call it module 
<CODE>A</CODE> - but from the point of view of code that uses module A. OK, so far? 
</P>

<P>
However, what happens if the error messages are not generated
by module 
<CODE>A</CODE> directly, but are lexical warnings produced by the 
<CODE>warnings</CODE> pragma? Obviously, you don't want 
<CODE>Carp</CODE> to be churning out warnings that claim to come from the guts of 
<CODE>warnings.pm</CODE>. So, 
<CODE>Carp</CODE> has to know to skip over certain modules that are internal to
Perl, and go further up the stack. There's an undocumented
variable that allows you to skip over stack frames, but Ben considers
this messy, and with good reason.
</P>

<P>
Worse, it's possible to get infinite loops when package inheritance
comes into play. Ben is working on ideas on how to
get around it, and Hugo and others have been helping him think about
this.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01297.html">Read about it.</a></P>

<P>

<H3><a name="SvTEMP">SvTEMP</a></H3>

</P>

<P>
If you say 
</P>

</P><PRE>
        sub foo { "a" } @foo=(foo())[0,0];
</PRE>

<P>
you might be surprised to find that your array only has one element. The
problem is that when a subroutine returns a list, the SV members of the
list are marked as temporary, on the assumption that something is going
to scoop them up and use them. This saves us making copies of the SVs
and then throwing them away later. Unfortunately, what happened here is
that 
<CODE>foo</CODE> returned a single value, which something did indeed scoop up and use.
When the second part of the slice tries to take another value, there's
nothing on the list.
</P>

<P>
Benjamin Holzman had a look at this and produced a patch that turned
off the 
<CODE>SvTEMP</CODE> marking of anything about to be used in an array assignment. Sarathy
pointed out that this wasn't exactly right, because 
<CODE>SvTEMP</CODE> means several different things. Benjamin tried again, using another bit
to indicate whether the value could be stolen without a copy.
Sarathy was concerned by the use of a &quot;whole bit&quot; for this task, and
suggested a simpler answer: checking for both 
<CODE>SvTEMP</CODE> and also participation in an array assign:
</P>

</P><PRE>
     SvTEMP(sv) && !(PL_op && PL_op->op_type == OP_AASSIGN)
</PRE>

<P>
Bejamin then revised his patch, which Jarkko applied.
<H3><a name="Locales_and_floats">Locales and Floats</a></H3>

</P>

<P>

There's a horrible problem with locales: (Jarkko would argue that
locales are horrible problems) 
[printf &quot;%e&quot;] should probably be locale-aware in the scope of
<CODE>use locale</CODE>. This means that, theoretically, it should be tainted, because locale
data can be corrupted.
</P>

<P>
So what about 
<CODE>print 0.0+$x</CODE> - that also does a floating-point conversion. Should that be locale-aware under 
<CODE>use locale</CODE>? Should it be automatically tainted? This was a tricky discussion, and
it seems it's a problem that's been hanging around for a long time,
and probably won't be solved soon. You can, however,
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01310.html">take a look at the thread for yourself</a>.
<H3><a name="Low_hanging_fruit">Low-Hanging Fruit</a></H3>

</P>

<P>

Here are a couple of jobs that people can look into if they have a 
spare moment:
</P>

<P>
Hugo found that 
<CODE>make distclean</CODE> was creating some 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01306.html">dangerously long shell lines</a>. Andreas found a 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg00995.html">scoping bug with %H</a>, and Ilya replied explaining
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01168.html">how to fix it</a>. This 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-11/msg01332.html">report of a segfault</a> could be worth waving a debugger over.
<H3><a name="Miscellaneous">Miscellaneous</a></H3>

</P>

<P>

Jarkko said &quot;Thanks, applied&quot; 15 times this week.
</P>

<P>
Until next week, I remain your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>

