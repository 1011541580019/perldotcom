

<!-- <a name="what's wrong with this picture">What's Wrong With This Picture?</a> -->

<br />
<!::field::date::><p><table width="180" cellspacing="0" cellpadding="4" align="right" border="1"><tr><td align="center" valign="top" bgcolor="#6699cc">
<font color="#ffffff">Table of Contents</td>
</tr>

<tr>
<td>
<p class="fine">
&#149;<a href="#control flow puzzle">Control Flow Puzzle</a><br />
&#149;<a href="#pattern matching">Pattern Matching</a><br />
&#149;<a href="#synthetic variables">Synthetic Variables</a><br />
&#149;<a href="#send more code">Send More Code</a><br />

</td>
</tr>
</p>
</table>


<p>Astute readers had a number of comments about last week's
<a href="http://www.perl.com/pub/2000/11/repair3.html"><cite>Program Repair Shop and Red Flags</cite></a> article.</p> 

<h3><a name="control flow puzzle">Control Flow Puzzle</a></h3> 



<p>In the article, I had a section of code that looked like this:</p> 
<pre>
            $_ = &lt;INFO&gt; until !defined($_) || /^(\* Menu:|\037)/;
            return @header if !defined($_) || /^\037/;</pre> 
			
<p>I disliked the structure and especially the repeated tests.  I played
with it, changing it to</p> 
<pre>
        while (&lt;INFO&gt;) {
          last if /^\* Menu:/;
          return @header if /^\037/;
        }
        return @header unless defined $_;</pre> 
<p>and then used Simon Cozens' suggestion of</p> 
<pre>
        do { 
          $_ = &lt;INFO&gt;; 
          return @header if /^\037/ || ! defined $_ 
        } until /^\* Menu:/ ;</pre> 
		
<p>This still bothered me, because <code>do...until</code> is unusual.
But I was out of time, so that's what I used.</p> 

<p>Readers came up with two interesting alternatives.
Jeff Pinyan suggested:</p> 

<pre>
        while (&lt;INFO&gt;) {
          last if /^\* Menu:/;
          return %header if /^\037/ or eof(INFO);
        }</pre> 
		
<p>This is perfectly straightforward, and the only reason I didn't think
of it was because of my prejudice against <code>eof()</code>.  In the article, I
recommended avoiding <code>eof()</code>, and that's a good rule of thumb.  But
in this case, I think it was probably the wrong way to go.</p> 

<p>After I saw Jeff's solution, I thought more about <code>eof()</code> and tried
to remember what its real problems are.  The conclusion I came to is
that the big problem with <code>eof()</code> occurs when you use it on a
filehandle that is involved in an interactive dialogue, such as a
terminal.</p> 

<p>Consider code like this:</p> 
<pre>
        my ($name, $fav_color);
        print &quot;Enter your name: &quot;;
        chomp($name = &lt;STDIN&gt;);
        unless (eof(STDIN)) {
          print &quot;Enter your favorite color: &quot;;
          chomp($fav_color = &lt;STDIN&gt;);
        }
</pre> 

<p>This seems straightforward, but it doesn't work.  (Try it!)  After 
user enters their name, we ask for <code>eof()</code>.  This tries to read
another character from <code>STDIN</code>, which means that the program is
waiting for user input <i>before</i> printing the second prompt!  The
program hangs forever at the <code>eof</code> test, and the only way it can
continue is if the user clairvoyantly guesses that they are supposed
to enter their favorite color.  If they do that, then the program will
print the prompt and immediately continue.  Not very useful behavior!
And under some circumstances, this can cause deadlock.</p> 

<p>However, in the example program I was discussing, no deadlock is
possible because the information flows in only one direction - from a
file into the program.  So the use of <code>eof()</code> would have been safe.</p> 

<p>Ilya Zakharevich suggested a solution that I like even better:</p> 
<pre>
      while (&lt;INFO&gt;) {
          return do_menu() if /^\* Menu:/;
          last if /^\037/;
      }
      return %header;</pre> 
	  
<p>Here, instead of requiring the loop to fall through to process the
menu, we simply put the menu-processing code into a subroutine and
process it inside the loop.</p> 

<p>Ilya also pointed out that the order of the tests in the original code
is backward:</p> 

<pre>
	return @header if /^\037/ || ! defined $_</pre> 

<p>It should have looked like this:</p> 

<pre>
	return @header if ! defined $_  || /^\037/;</pre> 

<p>Otherwise, we're trying to do a pattern-match operation on a possibly
undefined value.</p> 

<p>Ilya also suggested another alternative:</p> 
<pre>
    READ_A_LINE: {
      return %header if not defined ($_ = &lt;INFO&gt;) or /^\037/;
      redo READ_A_LINE unless /^\* Menu:/;
    }</pre> 
	
<p>Randal Schwartz suggested something similar.  This points out a
possible rule of thumb: When Perl's control-flow constructions don't
seem to be what you want, try decorating a bare block.</p> 

<h3><a name="oops!">Oops!</a></h3> 

<p>I said:</p> <blockquote> now invoke the function like this:

<pre>
	$object = Info_File-&gt;new('camel.info');
</pre> </blockquote>  

<p>Unfortunately, the function in question was named <code>open_info_file</code>,
not <code>new</code>.  The call should have been</p> 

<pre>
	$object = Info_File-&gt;open_info_file('camel.info');</pre> 

<p>I got the call right in my test program (of <em>course</em> I had a test
program!) but then mixed up the name when I wrote the article.  Thanks
to Adam Turoff for spotting this.</p> 

<h3><a name="pattern matching">Pattern Matching</a></h3> 

<p>In the article, I replaced this:</p> 
<pre>
	($info_file) = /File:\s*([^,]*)/;
        ($info_node) = /Node:\s*([^,]*)/;
        ($info_prev) = /Prev:\s*([^,]*)/;
        ($info_next) = /Next:\s*([^,]*)/;
        ($info_up)   = /Up:\s*([^,]*)/;</pre> 
		
<p>With this:</p> 

<pre>
	for my $label (qw(File Node Prev Next Up)) {
          ($header{$label}) = /$label:\s*([^,]*)/;
        }</pre> 
		
<p>Then I complained that Perl must recompile the regex each time
through the loop, five times per node.  Ilya pointed out
the obvious solution:</p> 

<pre>
	 $header{$1} = $2 
	     while /(File|Node|Prev|Next|Up):\s*([^,]*)/g;
</pre> 

<p>I wish I had thought of this, because you can produce it almost
mechanically.  In fact, I think my original code betrays a red flag
itself.  Whenever you have something like this:</p> 

<pre>
	for $item (LIST) {
          something involving m/$item/;
        }</pre> 
		
<p>this is a red flag, and you should consider trying to replace it with
this:</p> 

<pre>
	my $pat = join '|', LIST;
        Something involving m/$pat/o;</pre> 
		
<p>As a simple example, consider this common construction:</p> 

<pre>
	@states = ('Alabama', 'Alaska', ..., 
	           'West Virginia', 'Wyoming');
        $matched = 0;
        for $state (@states) {
          if ($input =~ /$state/) { 
            $matched = 1; last;
          }
        }</pre> 
		
<p>It's more efficient to use this instead:</p> 

<pre>
	my $pat = join '|', @states;
        $matched = ($input =~ /$pat/o);</pre> 
		
<p>Applying this same transformation to the code in my original program
yields Ilya's suggestion.</p> 

<h3><a name="synthetic variables">Synthetic Variables</a></h3> 

<p>My code looked like this:</p> 

<pre>
	while (&lt;INFO&gt;) {
          return 1 if /^\037/;    # end of node, success.
          next unless /^\* \S/;   # skip non-menu-items
          if (/^\* ([^:]*)::/) {  # menu item ends with ::
              $key = $ref = $1;
          } elsif (/^\* ([^:]*):\s*([^.]*)[.]/) {
              ($key, $ref) = ($1, $2);
          } else {
              print STDERR &quot;Couldn't parse menu item\n\t$_&quot;;
              next;
          }
          $info_menu{$key} = $ref;
        }</pre> 
		
<p>Ilya pointed out that in this code, <code>$key</code> and <code>$ref</code> may be synthetic variables.  A synthetic variable isn't intrinsic to
the problem you're trying to solve; rather, they're an artifact of the
way the problem is expressed in a programming language.  I think
<code>$key</code> and <code>$ref</code> are at least somewhat natural, because the problem
statement <em>does</em> include menu items with names that refer to nodes,
and <code>$key</code> is the name of a menu item and <code>$ref</code> is the node it
refers to.  But some people might prefer Ilya's version:</p> 

<pre>
       while (&lt;INFO&gt;) {
           return 1 if /^\037/;        # end of node, success.
           next unless s/^\* (?=\S)//; # skip non-menu-items
           $info_menu{$1} = $1, next if /^([^:]*)::/; 
           $info_menu{$1} = $2, next if /^([^:]*):\s*(.*?)\./;
           print STDERR &quot;Couldn't parse menu item\n\t* $_&quot;;
       }</pre> 
	   
<p>Whatever else you say about it, this reduces the code from eleven
lines to six, which is good.</p> 

<h3><a name="old news">Old News</a></h3> 

<p>Finally, a belated correction.  In the <em>second</em> <a href="http://www.perl.com/pub/2000/06/commify.html"><cite>Repair Shop and Red Flags Article</cite></a> way back in June, I got the notion that you shouldn't use string
operations on numbers.  While I still think this is good advice, I
then tried to apply it outside of the domain in which it made sense.</p> 

<p>I was trying to transform a number like 12345678 into an array like 
<code>('12', ',', '345', ',', '678')</code>.  After discussing several strategies, all
of which worked, I
ended with the following nonworking code:</p> 

<pre>
	sub convert {
          my ($number) = shift;
          my @result;
          while ($number) {
            push @result, ($number % 1000) , ',';
            $number = int($number/1000);
          }
          pop @result;      # Remove trailing comma
          return reverse @result;
        }</pre> 
		
<p>If you ask this subroutine to convert the number 1009, you get <code>('1',
',', '9')</code>, which is wrong; it should have been <code>(1, ',', '009')</code>.
Many people wrote to point this out; I think Mark Lybrand was
the first.  Oops!  Of course, you can fix this with <code>sprintf</code>, but
really the solutions I showed earlier in the article are better.</p> 

<p>The problem here is that I became too excited about my new idea.  
I still think it's usually a red flag to treat a number like a
string.  But there's an exception:  When you are formatting a number
for output, you <em>have</em> to treat it like a string, because output is
always a string.  I think Charles Knell hit the nail on the head here:</p> 

<blockquote> By inserting commas into the returned value, you ultimately
        treat the number as a string. Why not just give in and admit
        you're working with a string.
</blockquote> 

<p>Thanks, Charles.</p> 

<p>People also complained that the subroutine returns a rather peculiar
list instead of a single scalar, but that was the original author's
decision and I didn't want to tamper with it without being sure why he
had done it that way.  People also took advantage of the opportunity
to send in every bizarre, convoluted way they would think of to
accomplish the same thing (or even a similar thing), often saying
something like this:</p>

 <blockquote> You are doing way too much work!  Why don't you simply use
        this, like everyone else does?
<pre>
	sub commify {
          $_ = shift . '*';
          &quot;nosehair&quot; while s/(.{1,3})\*/*,$1/;
          substr($_,2);
        }
</pre> </blockquote>

<p>I think this just shows that all code is really simple if you already
happen to understand it.</p>

<h3><a name="send more code">Send More Code</a></h3> 

<p>Finally, thanks to everyone who wrote in, especially the people I
didn't mention.  These articles have been quite popular, and I'd like
to continue them.  But that can't happen unless I have code to
discuss.  So if you'd like to see another ``Red Flags'' article, please
consider sending me a 20- to 50-line section of your own code.  If you
do, I won't publish the article without showing it to you beforehand.</p>  
