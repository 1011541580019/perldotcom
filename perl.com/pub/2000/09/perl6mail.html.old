<!-- Guide to the Perl 6 Working Groups -->



<br />

<!::field::date::><table border="1" width="200" align="right" cellpadding="3">
<tr>

<td bgcolor="#6699cc" align="center"><font color="#ffffff"><b>Table of Contents</b></font></td>

</tr>

<tr>

<td>

&#149;<a href="#announcements and overviews">Announcements and Overviews</a></li>

<br />&#149;<a href="#internals">Internals</a></li>

<br />&#149;<a href="#language">Language</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languagedata">perl6-language-data</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languagedatetime">perl6-language-datetime</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageerrors">perl6-language-errors</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageflow">perl6-language-flow</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageio">perl6-language-io</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languagemlc">perl6-language-mlc</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageobjects">perl6-language-objects</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageregex">perl6-language-regex</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languagestrict">perl6-language-strict</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languagesubs">perl6-language-subs</a></li>

<br />&nbsp;&nbsp;&#149;<a href="#perl6languageunlink">perl6-language-unlink</a></li>





<br />&#149;<a href="#miscellaneous">Miscellaneous</a></li>

</td>

</tr>

</table>



<!-- INDEX END -->



<p>Larry said at the Perl conference this summer that the old model of

Perl development was not working well any more.  That model had one

giant mailing list, <code>perl5-porters</code>, on which everything

pertaining to Perl 5 was discussed.</p>



<p>After the conference, a new mailing list, called

<code>bootstrap</code>, was set up to discuss how Perl 6 design and

development should be organized.  The <code>bootstrap</code>

discussion set up a number of "working groups," each with its own

mailing list, and each with a chairperson charged with maintaining

order on their mailing list, promoting discussion, and producing

weekly activity reports.</p>



<p>The <code>bootstrap</code> list also set up a "request for

comments" process.  Anyone who wants to make a proposal about what

Perl 6 should become is required to write up a formal proposal, called

an <code>RFC</code>, and submit it to the Perl 6 librarian.  The RFC

is then discussed by the appropriate working group.  The idea is that

this will discourage people from floating quarter-baked ideas --

having to write up an RFC will motivate people to think through their

ideas a little better so that they are at least half-baked.</p>



<p>One problem with the <code>perl5-porters</code> model was that the

same topics would come up over and over every few months.  The hope is

that a repository of old proposals will make it easier to recognize

when a topic has come up before.</p>



<p>The Perl 6 development site at <a 

href="http://dev.perl.org/">http://dev.perl.org/</a> has information

about the RFCs and the working groups.</p>



<p>All the mailing lists are hosted on <code>perl.org</code>.  Most

are archived at <code>www.mail-archive.com</code>.  For example, the

<code>perl6-announce</code> list is archived at <a 

href="http://www.mail-archive.com/perl6-announce@perl.org/">http://www.mail-archive.com/perl6-announce@perl.org/</a>

.  Summaries of some mailing lists are available at <a 

href="http://dev.perl.org/summary/">http://dev.perl.org/summary/</a>.

A description of the main Perl 6 mailing lists and working groups

follows:</p>



<!-- <a name="announcements and overviews">Announcements and Overviews</a> -->



<p>Until this week, <code>perl6-announce</code> received announcements

of new Perl 6 mailing lists, working group weekly summaries, and new

RFCs.  But nobody expected that so many RFCs would be posted so

quickly.  In the past few days, the RFC traffic has been moved to a

secondary list, <code>perl6-annnounce-rfc</code>.</p>



<p><code>perl6-meta</code> replaced the old <code>bootstrap</code>

list. Discussion concerns how mailing lists are run, RFC formatting

issues, and other meta-topics.</p>



<p><code>perl6-all</code> is supposed to carry <em>every</em> message

from <em>every</em> list, so don't subscribe unless you want a

<em>lot</em> of mail.</p>



<!-- <a name="internals">Internals</a> -->



<p>The main internals mailing list is <code>perl6-internals</code>,

which is chaired by Dan Sugalski.  This is the only list seriously

discussing implementation instead of interface issues, so it is

probably more worthy of attention.  (Discussion on the other lists

often gets rather pie-in-the-sky because the participants are not

constrained by the limitations of reality.)</p>



<p>Topics interest include alternative garbage collection methods and

a <code>vtable</code> structure for Perl variables.  The hope is that

if you don't like the way Perl hashes work, you will be able to plug

in your own implementation, which is presently impossible.  (This was

also one of the major goals of Topaz.)  There have also been a lot of

flames about whether to take the socket functions out of the core,

whether to take the trigonometry functions out of the core, etc.</p>



<h2><a name="language">Language</a></h2>



<p>This large family of mailing lists is the repository for everyone's

half-baked ideas about what Perl 6 should look like to the Perl 6

programmer.  Traffic on <code>perl6-language</code> itself is high,

and would be enormous, except that much of the traffic has been spun

off to a dozen or so sublists.  The remaining topics are

miscellaneous. Recent highlights include ``Perl should support an

interactive mode'' and ``<code>chop()</code> should be dropped.''</p>



<p>The sublists of <code>perl6-language</code> include:</p>



<p>

<h3><a name="perl6languagedata">perl6-language-data</a></h3>



<p>Data and data types.  Much of the discussion here has concerned

matrices and the best way to express matrix operations in Perl.  The

PDL (Perl Data Language) group has a number of RFCs out asking for

Perl to provide better support for true, C-style arrays.</p>



<p>



<h3><a name="perl6languagedatetime">perl6-language-datetime</a></h3>

<p>Date and time representations and other issues.  This list has carried

very little traffic.</p>



<p>

<h3><a name="perl6languageerrors">perl6-language-errors</a></h3>



<p>Error handling and exceptions.  Most of the traffic on this list

has concerned built-in exception objects for Perl.</p>



<p>



<h3><a name="perl6languageflow">perl6-language-flow</a></h3>



<p>Flow control syntax.  Most of the discussion on this list has been

about the language interface to threads, but there have been some

other conversations.  One suggestion is to add an automatic loop

counter to Perl, so that</p>



<pre>

        for (@array) {

          print &quot;$_ is element number $COUNTER\n&quot;

        }</pre>



<p>would print each element of the array with its index.  Part of the

discussion from <code>perl6-language-errors</code> about exception

handling has found its way over here.</p>



<p>

<h3><a name="perl6languageio">perl6-language-io</a></h3>



<p>Input and output.  Surprisingly, this list seems to be discussing

mostly trivia.  One proposal removes the <code>format</code> feature

from the core, placing it into a module.  Another proposal wants to

make <code>&gt;blah blah blah&lt;</code> synonymous with <code>print

&quot;blah blah blah&quot;</code>.  Another wants to rename

<code>STDIN</code>, <code>STDOUT</code>, and <code>STDERR</code>.</p>



<p>

<h3><a name="perl6languagemlc">perl6-language-mlc</a></h3>



<p>This list was created with a specific mandate to discuss the issue

of multi-line comments for two weeks and to report back with the

results.  The results: No consensus was reached.  The list is now

closed.</p>



<p>

<h3><a name="perl6languageobjects">perl6-language-objects</a></h3>



<p>Object-oriented programming features.  Some of the more interesting

proposals: constructor and destructor methods should be called

hierarchically.  (This means that if class <code>A</code> inherits

from <code>B</code>, then <code>B</code>'s constructor should

automatically call <code>A</code>'s before it runs itself.)  Private

keys and methods for objects.</p>



<p>The point of many of the proposals seems to be to make Perl look more

like C++ or like Java.</p>



<p>



<h3><a name="perl6languageregex">perl6-language-regex</a></h3>



<p>Regexes and matching syntax and the <code>tr///</code> operator.  A

number of threads here have focused on getting rid of the

<code>=~</code> operator and making pattern matching and replacement

syntax more normal.  Other proposals have tried to clean up some of

Perl's less felicitous regex features, such as

<code>$&amp;</code>.</p>



<p>

<h3><a name="perl6languagestrict">perl6-language-strict</a></h3>



<p>This list was set up to discuss the relationship of Perl 6 to the

<code>use strict</code> pragma.  Some of the issues it discussed were

whether <code>strict 'vars'</code> should be the default and whether

variables could be lexical by default.  The list is now closed.  There

was supposed to be a summary, but I didn't see it.</p>



<p>

<h3><a name="perl6languagesubs">perl6-language-subs</a></h3>

<p>Issues related to subroutines and subroutine calls and return values.

There has been a lot of discussion of lvalue subroutines.  An lvalue

subroutine is one that can be placed on the left-hand side of an <code>=</code>

operator:</p>

<pre>

        mysub(...) = ... ;</pre>

<p>This is frequently useful in connection with object-oriented styles,

where you might like to write something like this:</p>

<pre>

        $car-&gt;color = 'red';</pre>

<p>



<h3><a name="perl6languageunlink">perl6-language-unlink</a></h3>



<p>This list was given a fixed amount of time to determine whether the

<code>unlink</code> function should be renamed to something more

intuitive.  The list is closed.</p>



<h2><a name="miscellaneous">Miscellaneous</a></h2>



<p><code>perl6-build</code> discusses the configuration and build

process.</p> <p><code>perl-qa</code>, led by Michael Schwern,

concerns quality assurance, bug tracking, and testing.  
 Note that unlike the others, the mailing list name has no 
<code>6</code> in it.  Many of

Michael's ideas about how to find and track bugs can be implemented

for Perl 5 regardless of what happens to Perl 6, so if you're looking

for some real work to do right away, this would be a good list to

join. </p>



<p><code>perl6-stdlib</code> is supposed to carry proposals relating

to Perl's standard modules, but it has had very little traffic.</p>

<p><code>perl6-licenses</code> is carrying discussion about licensing

and free software issues.</p>

