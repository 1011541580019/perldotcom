<!-- This week on perl5-porters (5--11 June 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Byte_Order_Marks">Byte-Order Marks</a>
  <li><a href="#Magic_Auto_Decrement">Magic Auto-Decrement</a>
  <li><a href="#Bug_Reports">Bug Reports</a>
  <ul>
  <li><a href="#Core_Dump_I">Core Dump I</a>
  <li><a href="#Core_Dump_II">Core Dump II</a>
 <!--  <li><a href="#Exit_status_obliterated_by_system_after_exit">Exit status obliterated by <code>system()</code> after <code>exit()</code></a>-->
  <li><a href="#Class::Struct_objects_misbehave_with__gt;isa"><code>Class::Struct</code> objects misbehave with </code>-&gt;isa()</code></a>
  <li><a href="#Data::Dumper_Weirdness"><code>Data::Dumper</code> Weirdness</a>
  <li><a href="#Blessed_coderefs_never_DESTROYed">Blessed coderefs never <code>DESTROY</code>ed</a>
  <li><a href="#Code_compiled_incorrectly">Code compiled incorrectly</a>
  </ul>
  <li><a href="#MacPerl_Test_Suite_Patches">MacPerl Test Suite Patches</a>
  <li><a href="#Why__is_not_ignored_in_comments_in_x_constructions">Why <code>/</code> is not ignored in comments in <code>/.../x</code> constructions</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
Next week's report will be late, since I will be bending space and
time to attend both San Diego Usenix 
<em>and</em> YAPC.  If the fabric of the universe survives my ill-advised meddling,
the reports should resume the following week.
</P>

<P>
This was the quietest week I can remember.    Very little seemed to happen.
<H3><a name="Byte_Order_Marks">Byte-Order Marks</a></H3>

</P>

<P>

Unicode files may  begin with  the special Unicode character U+FEFF.
That is so that if the byte order gets reversed somehow (as with a
big-endian to little-endian transformation) you can recognize that
that has happened because the initial character will be U+FFFE, which
is guaranteed to never be assigned.
</P>

<P>
Tim Burlowski saved a Perl program file with the UTF8 encoding
under windows, 
and when he tried to run the script, Perl complained about the initial
U+FEFF.  (
<CODE>Unrecognized character \xEF...</CODE>, because U+FEFF encodes to 
<CODE>"\xEF\xBB\xBF"</CODE> under UTF-8.)  Tim asked if Perl shouldn't know to ignore this.
Sarathy agreed, and Simon provided a patch, which also enables Perl to
read a UTF-16-encoded source code file.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00193.html">The patch. </a><H3><a name="Magic_Auto_Decrement">Magic Auto-Decrement</a></H3>

</P>

<P>

Someone asked why there isn't one.  This sparked a long discussion of
how it might work.  (What is 
<CODE>'a'--</CODE>?  What is 
<CODE>'aAa00'--</CODE>?)
</P>

<P>
There was a lot of idle discussion, and no patch, so probably nobody
really cares.
<H3><a name="Bug_Reports">Bug Reports</a></H3>

</P>

<P>

Richard Foley coughed up a lot of bug reports that had gotten lost
somehow.  So there was a lot of miscellaneous stuff.  Some of the bug
reports related to configuration errors, and some were genuine.  Some
attracted patches, others did not.  It seemed to me that this batch of
bug reoprts contained more than the usual number of weird oddities.
For example:
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00182.html">Weird oddity.</a></P>

<P>
Some of the non-oddities that remain unfixed follow.  In an attempt to
encourage more people to try to fix bugs, I tried here to
select some bugs that seemed not too difficult to solve. 
So if you have ever wanted to become a Perl core hacker and you wanted
a not-too-hard task to start on, the following bugs might be good
things to work on.
</P>

<P>
If you are interested in trying to fix one of these, and you need
help, or you don't know how to start, please do send me email and I
will try to assist you.
<H4><a name="Core_Dump_I">Core Dump I</a></H4>

</P>

<P>

Here is a bug that makes Perl dump core.  Sarathy reduced
Wolfgang Laun's small test case to a very small test case. 
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00145.html">Test Case.</a></P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00262.html">Another Test Case.</a><H4><a name="Core_Dump_II">Core Dump II</a></H4>

</P>

<P>

Here is another  core dump, this one on an improper pseudohash reference.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00126.html">Test Case.</a>

<!--
<H4><a name="Exit_status_obliterated_by_system_after_exit">Exit status obliterated by <code>system()</code> after <code>exit()</code></a></H4>

</P>


<P>
If you call 
<CODE>system()</CODE> in an 
<CODE>END</CODE> block or in a 
<CODE>DESTROY</CODE> call during final destruction, the program's exit status (as supplied
 to 
<CODE>exit</CODE>) is destroyed.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00172.html">Test Case.</a>
-->

<H4><a name="Class::Struct_objects_misbehave_with__gt;isa"><code>Class::Struct</code> objects misbehave with </code>-&amp;gt;isa()</code></a></H4>

</P>

<P>

If 
<CODE>$foo</CODE> is a 
<CODE>Class:Struct</CODE> object, and you call 
<CODE>->isa('UNIVERSAL')</CODE> on it, you get the correct answer (true) the first time, and the
 wrong answer (false) on subsequent calls.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00191.html">Test Case.</a></P>

<P>

<H4><a name="Data::Dumper_Weirdness"><code>Data::Dumper</code> Weirdness</a></H4>

</P>

<P>
Victor Insogna got weird output from 
<CODE>Data::Dumper</CODE>.  The test cae is very simple but it's not entirely clear to me
whether the bug is in 
<CODE>Data::Dumper</CODE> itself or if Perl is actually constructing a bizarre value.  
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00214.html">Test Case.</a></P>

<P>

<H4><a name="Blessed_coderefs_never_DESTROYed">Blessed coderefs never <code>DESTROY</code>ed</a></H4>

</P>

<P>

</P>

<P>
Rocco Caputo reported that if you bless a coderef into a package with
a destructor function, the destructor is never called, not even at
program termination.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00276.html">Test Case.</a></P>

<P>

<H4><a name="Code_compiled_incorrectly">Code compiled incorrectly</a></H4>

</P>

<P>
Barrie Slaymaker reported that in 5.6.0,
</P>

</P><PRE>
        1 while ( $a = ( $b ? 1 : 0 ) )
</PRE>

<P>
appears to be compiled as if you had written 
</P>

</P><PRE>
        '???' while defined($a = $b ? 1 : 0)
</PRE>

<P>
apparently as an incorrect application of the same transformation that
makes
</P>

</P><PRE>
        while (readdir D) 
</PRE>

<P>
into 
</P>

</P><PRE>
        while (defined(readdir D))
</PRE>

<P>

<H3><a name="MacPerl_Test_Suite_Patches">MacPerl Test Suite Patches</a></H3>

</P>

<P>
Peter Prymmer sent a big patch that attempts to make the test suite
work better on Macintoshes by replacing a lot of Unix-style pathnames
like 
<CODE>'../lib'</CODE> with constructions of the form 
<CODE>($^O eq 'MacOS') ? '::lib:' : '../lib'</CODE>.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00258.html">The patch.</a></P>

<P>
 
<H3><a name="Why__is_not_ignored_in_comments_in_x_constructions">Why <code>/</code> is not ignored in comments in <code>/.../x</code> constructions</a></H3>

</P>

<P>
People are often surprised that 
</P>

</P><PRE>
        $string =~ m/a+
                     foo  # some comment here that mentions /
                     w{3}
                    /x;
</PRE>

<P>
is a syntax error; the 
<CODE>/</CODE> in the 'comment' terminates the regex prematurely.  They expected it
to be ignored, since it is in a comment. 
</P>

<P>
The way Perl handles 
<CODE>/.../x</CODE> is that it parses the regex as usual, and locates the terminating
slash as usual, and then hands off the regex to the regex engine for
parsing,  with a flag saying 'by the way, this regex was marked with
the 
<CODE>/x</CODE> modifier.  The regex is then parsed accordingly.  But The main Perl
 parser is totally unaware of the meaning of 
<CODE>/x</CODE> and in particular it uses the same old logic to determine where the
 end of the regex is, and doesn't realize that it is supposed to
 ignore the 'comment'.  In other words, the comment is a comment for
 the regex compiler, but not for the Perl parser.
</P>

<P>
This is well-known to many people, and I mention it here because Ben
Tilly came up with a really nice example of why this problem can't be
'fixed'.  Here it is:
</P>

</P><PRE>
        if ($foo =~ /#/) {
          # Do something
        }
        # Time passes
        print "eg.  In DOS you would use /x instead of -x\n";
</PRE>

<P>

</P>

<P>
Now, where does that regex end?
<H3><a name="Various">Various</a></H3>

</P>

<P>

A large collection of bug reports, and a small collection of bug
fixes, non-bug reports, questions, answers, and spam.  No flames and
little discussion.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200006+@plover.com">Mark-Jason Dominus</a>

