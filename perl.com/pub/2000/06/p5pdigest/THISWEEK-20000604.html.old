<P>


<!-- This week on perl5-porters (29 May--4 June 2000) -->

<br />
<!::field::date::><br /></P>



<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Ilya_Quits">Ilya Quits</a>
  <li><a href="#B::Bytecode_is_Ineffective"><code>B::Bytecode</code> is Ineffective</a>
  <li><a href="#Bens_map_Patch">Ben's <code>map</code> Patch</a>
  <li><a href="#split_Oddities"><code>split</code> Oddities</a>
  <li><a href="#scalar_Operator_Doesnt"><code>scalar</code> Operator Doesn't</a>
  <li><a href="#perlmodlib"><code>perlmodlib</code></a>
  <li><a href="#perlnewmod"><code>perlnewmod</code></a>
  <li><a href="#Method_Lookup_Caching">Method Lookup Caching</a>
  <li><a href="#Perl_in_Russia">Perl in Russia</a>
  <li><a href="#Eudora_Problem">Eudora Problem</a>
  <li><a href="#h2xs_Backward_Compatibility"><code>h2xs</code> Backward Compatibility</a>
  <li><a href="#Various">Various</a>
</ul>
      <H3><a name="Notes">Notes</a></H3>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
This week's report is late because I got back from Vancouver very
early Thursday morning.  Fortunately there were only 166 messages last
week.
<H3><a name="Ilya_Quits">Ilya Quits</a></H3>

</P>

<P>

At the end of the week, Ilya announced that he was departing p5p.
This is a terrible loss to the Perl community.
</P>

<P>
Thank you, Ilya, for your tremendous contributions over the years and
for all your hard work.  Good luck in the future.
<H3><a name="B::Bytecode_is_Ineffective"><code>B::Bytecode</code> is Ineffective</a></H3>

</P>

<P>

Benjamin Stuhl reported that he had been working on 
<CODE>B::Bytecode</CODE>, but that it yielded a negative performance win.  He says:
<blockquote><b>Benjamin:</b> The costs of having to do 3-4 times as much I/O  (<code>Math::Complex</code> compiles to 300+ K from 80K) more than outweigh the costs of  parsing the code.<p> To put it bluntly, I have serious doubts about the utility of <code>B::Bytecode</code>. </blockquote> </P>

<P>

Nick Ing-Simmons said that had had similar doubts for some time.  But
he also pointed out that with 
<CODE>B::Bytecode</CODE> you can compile all your source files into one bytecode file and ship
 it in one piece.
<blockquote><b>Nick:</b> I have a low-tech <code>B::Script</code> module which collects all the <code>*.pm</code> files used  by a "script" into one file and adds a wrapper which overrides <code>require</code> so that text is read from embedded hash rather than file system. </blockquote></P>

<P>

Tim Bunce suggested compresing the bytecode.  Stephen Zander recalled
that Nicholas Clark had posted an almost-complete solution in October,
1998.  Nicholas suggested that the final problems might be soluble
once line disciplines are implemented.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg01109.html">Root of this thread</a></P>

<P>

In other 
<CODE>B::Bytecode</CODE> news, Benjamin Stuhl posted a patch that adds several features and
 generates smaller bytecodes.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00057.html">Patch.</a></P>

<P>

</P>

<P>

<H3><a name="Bens_map_Patch">Ben's <code>map</code> Patch</a></H3>

</P>

<P>
Back in April Ben Tilly submitted a patch for 
<CODE>map</CODE> that was intended to make it perform better in the common case where
the result was larger than the input.  Sarathy said that he thought a
better solution was possible, and provided some details about how it
might work.  The question is when to extend the stack to accomodate
the results of each iteration of the 
<CODE>map</CODE>, and when to relocate the new items (which are placed at the top of
the stack) to below the remaining arguments (which need to be at the
top of the stack at the beginning of each iteration.)
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg01154.html">Sarathy's message.</a></P>

<P>
Ben Tilly disagreed; he said that he had subsequently decided that his
patch was doing the best possible thing, and that he had considered
Sarathy's approches and decided that there was no good improvement,
because the overhead of keeping track of extra information would be at
least as big as the gain from not copying as many stack items.
</P>

<P>
Ilya said that Sarathy's solution seemed too complicated:  The
simplest thing to do is to pre-extend the stack at the beginning,
leave all the result items on the top, and move them all down at once
when the 
<CODE>map</CODE> is finished.
</P>

<P>
Sarathy ended the discussion by saying:
<blockquote><b>Sarathy:</b> Anyway, I think the best way tosettle the question is by implementing  it.  Anyone up for it?</blockquote> </P>

<P>

If you're interested in trying, but you don't know how to get started,
send me a note and I'll try to help.
<H3><a name="split_Oddities"><code>split</code> Oddities</a></H3>

</P>

<P>

Yitzchak Scott-Thoennes reported two bugs in 
<CODE>split</CODE>: First, if you use the 
<CODE>?...?</CODE> delimiters, it is supposed to split to 
<CODE>@_</CODE> even in list context, but does not.  Mike Guy reported that this
 worked in Perl 4 but apparently broken in Perl 5.000.    He submitted
 a documentation patch to announce that the feature has been
discontinued.  Then some discussion followed concerning use of 
<CODE>split</CODE> in scalar context, which is useful, because it delivers the number of
 fields, but which produces an annoying warning.  Ilya pointed out
 that he had submitted a patch to fix this but it was ignored.
</P>

<P>
Yitzchak's second bug was that the following construction does not
deliver the 
<CODE>Use of implicit split to @_ is deprecated</CODE> warning as you would expect:
</P>

</P><PRE>
        eval "split //, '1:2:3'; 1";
</PRE>

<P>
Apparently the key here is that the 
<CODE>eval</CODE> is in void context.  There was no discussion and no patch.
<H3><a name="scalar_Operator_Doesnt"><code>scalar</code> Operator Doesn't</a></H3>

</P>

<P>

Yitzchak also pointed out that if you use the 
<CODE>scalar</CODE> operator in void context, it provides void context to its argument,
 not scalar context.  Ilya said this was not a bug, because a void
 context is a special case of scalar context.  Simon Cozens disagreed
 and provided a patch.
<H3><a name="perlmodlib"><code>perlmodlib</code></a></H3>

</P>

<P>

Simon Cozens sent in a program to generate the 
<CODE>perlmodlib</CODE> man page automatically.
<H3><a name="perlnewmod"><code>perlnewmod</code></a></H3>

</P>

<P>

Simon also sent in a new
<CODE>perlnewmod</CODE> manual page, which explains how to write a module and submit it to
 CPAN.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg01095.html">Read it.</a></P>

<P>
If you have suggestions about 
<CODE>perlnewmod</CODE>, please mail Simon.
</P>

<P>

<H3><a name="Method_Lookup_Caching">Method Lookup Caching</a></H3>

</P>

<P>
Ben Tilly sent a long note about how to speed up inheritance and
method lookups, but Sarathy replied that adding more solution hacks
would be premature, since at present nobody knows why method calls are
actually slow.  Someone should have investigated this a long time ago.
If you are interested in investigating this but do not know how to
begin, please send me email.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg01102.html">Read about it.</a></P>

<P>

<H3><a name="Perl_in_Russia">Perl in Russia</a></H3>

</P>

<P>
Alexander S. Tereschenko posted on 
<CODE>comp.lang.perl.misc</CODE> that he and his team would translate most of the Perl 
documentation set into Russian; the article was forwarded to p5p. 
<H3><a name="Eudora_Problem">Eudora Problem</a></H3>

</P>

<P>

Apparently Eudora has a clever feature that inserts extra spaces at
the beginning of some lines when you compose a message in word-wrap
mode.  This means if you use Eudora to send in a patch, there is a good
chance that the patch will not work.
</P>

<P>
If you use Eudora to send patches, make sure the word-wrap setting is
turned off.
<H3><a name="h2xs_Backward_Compatibility"><code>h2xs</code> Backward Compatibility</a></H3>

</P>

<P>

Robert Spier pointed out that the 5.6 version of 
<CODE>h2xs</CODE> is not usable with any earlier version of Perl, because it generates 
<CODE>our</CODE> declarations and 
<CODE>use warnings</CODE> declarations.  It makes sense to use the 5.6 
<CODE>h2xs</CODE> with an earlier Perl, because  the new release of 
<CODE>h2xs</CODE> has been so improved.  Robert later provided a patch (which he
subsequently revised) that adds a 
<CODE>-b</CODE> backward-compatibility flag to 
<CODE>h2xs</CODE>.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00147.html">The patch.</a></P>

<P>

<H3><a name="Various">Various</a></H3>

</P>

<P>
A medium-sized collection of bug reports, bug fixes, non-bug reports,
questions, answers, and a small amount of spam.   No flames.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<P>

</P>

<P>

</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200006+@plover.com">Mark-Jason Dominus</a>
