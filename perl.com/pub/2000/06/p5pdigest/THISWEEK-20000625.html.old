</P>

<P>


<!-- This week on perl5-porters (19--25 Jun 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Method_Lookup_Speedup_">Method Lookup Speedup </a>
  <li><a href="#trCU_and_trUC_Removed"><code>tr///CU</code> and <code>tr///UC</code> Removed</a>
  <li><a href="#is_utf8_string"><code>is_utf8_string</code></a>
  <li><a href="#Byte_Order_Marks_Return">Byte-Order Marks Return</a>
  <li><a href="#packU"><code>pack("U")</code></a>
  <li><a href="#Lexical_variables_and_eval">Lexical variables and <code>eval()</code></a>
  <li><a href="#FILEGV"><code>FILEGV</code></a>
  <li><a href="#perlhacktut"><code>perlhacktut</code></a>
  <li><a href="#perlutilpod"><code>perlutil.pod</code></a>
  <li><a href="#Missing_Methods">Missing Methods</a>
  <li><a href="#Suppress_prototype_mismatch_warnings">Suppress prototype mismatch warnings</a>
  <li><a href="#Autoloaded_Constants_not_Inlined">Autoloaded Constants not Inlined</a>
  <li><a href="#libpm"><code>lib.pm</code></a>
  <li><a href="#use_English"><code>use English</code></a>
  <li><a href="#Numeric_opens_in_IPC::Open3">Numeric opens in <code>IPC::Open3</code></a>
  <li><a href="#Regex_Bug">Regex Bug</a>
  <li><a href="#Foo_isa_Foo"><code>Foo isa Foo</code></a>
  <li><a href="#READMEhpux"><code>README.hpux</code></a>
  <li><a href="#my___PACKAGE___obj_"><code>my __PACKAGE__ $obj</code> ...</a>
  <li><a href="#asdgasdfasd">asdgasdfasd</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>


</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
This week's report is a little late because I went to San
Diego Usenix, and then I went to YAPC in Pittsburgh (probably the only
person on the continent stupid enough to try to do both) and then I
went back to Philadelphia and was driven to Washington DC for a party
and came back on the train.  
</P>

<P>
I was going to say it was a quiet week on the list.  But it wasn't.
It was merely a low-traffic week.  It wasn't quiet at all; all sort of
useful and interesting stuff was posted, and there was an unusually
high signal-to-noise ratio.  
</P>

<P>
This week has been named 'Doug MacEachern and Simon Cozens' week.
Thank you Doug and Simon, and also everyone else who contributed to
the unusually high signal-to-noise ratio this week.
</P>

<P>

<H3><a name="Method_Lookup_Speedup_">Method Lookup Speedup </a></H3>

</P>

<P>
More discussion of Doug's patch of last week. 
</P>

<P>

<a href="http://www.perl.com/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Method_Call_Speedups">Previous summary</a></P>

<P>
Last week, some people pointed out
that it would fail in the presence of code that modifies 
<CODE>@ISA</CODE> at runtime; Sarathy suggested a pragma that would promise that this
 would not happen.  Nick suggested that 
<CODE>use base</CODE> could do that.
</P>

<P>
Doug submitted an updated patch.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00491.html">Updated patch</a></P>

<P>

</P>

<P>
For your delectation, Simon Cozens wrote up an extensive explanation
of the patch and how it works, including many details about the Perl
internals.  If you are interested in the Perl internals (and you
should be) then this is strongly recommended reading.
</P>

<P>

<a href="http://www.perl.com/pub/2000/06/dougpatch.html">The explanation.</a></P>

<P>
I would like very much to run other articles of the same type in the
future.  This should be construed as a request for people to
contribute them.  They don't have to be as complete or detailed as
Simon's.
</P>

<P>
Thank you very much, Simon.
</P>

<P>

<H3><a name="trCU_and_trUC_Removed"><code>tr///CU</code> and <code>tr///UC</code> Removed</a></H3>

</P>

<P>
Simon, who has been working on the line discipline feature, got rid
of the nasty 
<CODE>tr///CU</CODE> feature, which Larry had already decided was a bad idea and should be
 eliminated.  
<H3><a name="is_utf8_string"><code>is_utf8_string</code></a></H3>

</P>

<P>

Simon also added a function named 
<CODE>is_utf8_string</CODE> that checks a string to make sure it is valid UTF8.  The plan is that
 if Perl is reading a putatively UTF8 file, it can check the input
 before setting the UTF8 flag on the resulting scalar.
</P>

<P>

<H3><a name="Byte_Order_Marks_Return">Byte-Order Marks Return</a></H3>

</P>

<P>
Simon submitted an improved patch for this.  This one just has the lexer use 
<CODE>tell()</CODE> to see if the putative byte-order mark is at the very beginning of
the file.  
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00466.html">The new patch</a></P>

<P>

<a href="http://www.perl.com/pub/2000/06/p5pdigest/THISWEEK-20000618.html#Byte_Order_Marks_Continue">Previous summary</a></P>

<P>

<H3><a name="packU"><code>pack("U")</code></a></H3>

</P>

<P>
A few weeks ago there was discussion of what this should do.
</P>

<P>

<a href="http://www.perl.com/pub/2000/05/p5pdigest/THISWEEK-20000528.html#packU">Previous summary</a></P>

<P>
Simon submitted a patch that implemented an idea of Larry's:  That a 
<CODE>U</CODE> at the beginning of the pack template indicates that the result of 
<CODE>pack</CODE> will be a UTF8 string; anything else indicates a byte string.  THis
 means (for example) that you can put 
<CODE>U0</CODE> at the beginning of any pattern to force it to produce UTF8; if you
 want to start with 
<CODE>U</CODE>  but have the result be bytes, add a do-nothing 
<CODE>C0</CODE> at the beginning instead.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00467.html">The patch.</a><H3><a name="Lexical_variables_and_eval">Lexical variables and <code>eval()</code></a></H3>

</P>

<P>

Yitzchak Scott-Thoennes reported on a number of puzzles related to the
interaction of these features, including:
</P>

</P><PRE>
        { my $x; sub incx { eval '++$x' } }
</PRE>

<P>
Here 
<CODE>incx</CODE> apparently increments the lexical variable; he expected it to
 increment the global variable.  (Rationale:  The lexical variable
 should be optimized away.)
</P>

<P>
Rick Delaney referred to
<a href="http://www.deja.com/[ST_rn=ps]/getdoc.xp?AN=545654855&fmt=text">a relevant article by Ilya in clp.misc.</a></P>

<P>

Yitzchak says that code in a subroutine should not be able to alter
lexical variables in a more outer scope, unless it is a closure, which 
<CODE>incx</CODE> here is not.  Rick presents the following counterexample:
</P>

<P>

</P>

</P><PRE>
        my $Pseudo_global = 2;
</PRE>

</P><PRE>
        sub double {
          my ($x) = @_;
          eval '$x * $Pseudo_global';
        }
</PRE>

<P>
Discussion seemed inconclusive.  No patches were offered.
</P>

<P>
I said that I had done some research a while back about what Scheme
and Common Lisp do in this sort of case, and that I would report back
with a summary, but I have not done so.
</P>

<P>

<H3><a name="FILEGV"><code>FILEGV</code></a></H3>

</P>

<P>
There was some discussion about the 
<CODE>FILEGV</CODE> macro.  When Perl compiles the op tree, the line and file information
 is stored in a GV.  Or rather, it used to be so; now, if you compile
 with ithreads, it just uses strings.  There were some macros, 
<CODE>*FILEGV</CODE>, to access this GV, but according to Sarathy, they was mostly used to
get at the filename, and there is a more straightforward macro family, 
<CODE>*FILE</CODE>, which gets the filename directly.  Doug MacEachern wanted to use the
original macro in 
<CODE>B::Graph</CODE>, although I was not sure why; Sarathy said that probably 
<CODE>B::Graph</CODE> needed to be fixed.
</P>

<P>

<H3><a name="perlhacktut"><code>perlhacktut</code></a></H3>

</P>

<P>
Simon contributed the first half of a document titled 
<CODE>perlhacktut</CODE>, a tutorial on hacking the Perl core.  It talks about how to get
started and what to read, provides an overview of Perl's large
subsystems, and the begining of a discussions of Perl's basic data
types and op trees.
</P>

<P>
If you are interested in the Perl internals (and you should be) then
this is strongly recommended reading.  (Gosh, that sounds familiar.)
</P>

<P>

</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00577.html">First draft.</a></P>

<P>

<H3><a name="perlutilpod"><code>perlutil.pod</code></a></H3>

</P>

<P>

Simon also contributed a document describing the utility programs that cmoe
packaged with Perl, such as 
<CODE>perldoc</CODE>, 
<CODE>pod2html</CODE>, 
<CODE>roffitall</CODE>, and 
<CODE>a2p</CODE>.
</P>

<P>
Quite a busy week for Simon.  
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00505.html"><code>perlutil</code></a></P>

<P>

<H3><a name="Missing_Methods">Missing Methods</a></H3>

</P>

<P>
Martyn Pierce pointed out that if you have code like this:
</P>

</P><PRE>
        Foo->new('...');
</PRE>

<P>
it might fail for two reasons:  because the 
<CODE>Foo</CODE> class does not define that method, or because you forgot to put 
<CODE>use Foo</CODE> in your program.  In both cases the message is 
</P>

</P><PRE>
        Can't locate object method "new" via package "Foo" ...
</PRE>

<P>
Martyn suggested that in the second case, it could add a remark like
</P>

</P><PRE>
        (perhaps you forgot to load module "Foo"?)
</PRE>

<P>
However, he did not provide a patch.
</P>

<P>
I also wonder why it says 'object method' when it is clearly a class
method.  I did not provide a patch either.  This would be an excellent
first patch for someone who wanted to get started patching.  Write to
me if you are interested in looking into it but do not know where to
begin. 
</P>

<P>

<H3><a name="Suppress_prototype_mismatch_warnings">Suppress prototype mismatch warnings</a></H3>

</P>

<P>
Doug MacEachern discovered lots and lots of subroutine declarations in 
<CODE>Socket.pm</CODE> that were there only to predeclare a bunch of autoloaded constants
 like 
<CODE>AF_INET</CODE>.  The only purpose for the declarations was to prevent 'prototype
mismatch' warnings from occurring when the constants were actually
autoloaded at run time.  He then put in a patch to suppress the
warning, if it appears that the subroutine will be autoloaded later,
and removed the 20K of constant sub declarations in 
<CODE>Socket.pm</CODE>.
<H3><a name="Autoloaded_Constants_not_Inlined">Autoloaded Constants not Inlined</a></H3>

</P>

<P>

Doug also discovered that these autoloaded constants' values are not
inlined, because the code that uses them is compiled before the
subroutine is loaded.  Doug produced a patch to 
<CODE>Exporter.pm</CODE> that lets you specify a name with a leading 
<CODE>+</CODE> sign in the 
<CODE>use</CODE> line to indicate that the subroutine should be invoked once (and
 hence autoloaded) immediately, when the module is loaded, so that
 they can be inlined into the following code.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00573.html">The patch.</a></P>

<P>

<H3><a name="libpm"><code>lib.pm</code></a></H3>

</P>

<P>

Doug MacEachern decided that it was a shame that 
<CODE>lib.pm</CODE> has to pull in all of 
<CODE>Config.pm</CODE>, so he recast 
<CODE>lib.pm</CODE> as a script, 
<CODE>lib.pm.PL</CODE>, which generates the real 
<CODE>lib.pm</CODE> at install time, inserting the appropriate values of 
<CODE>$CONFIG</CODE> variables inline.  
</P>

<P>
(Many other utilities, such as 
<CODE>perlcc</CODE> and 
<CODE>pod2html</CODE>, are generated this way at present.  Do 
<CODE>ls */*.PL</CODE> in the source directory to see a list.)
<H3><a name="use_English"><code>use English</code></a></H3>

</P>

<P>

Barrie Slaymaker contributed a patch so that you can now say
</P>

</P><PRE>
        use English '-no_match_english';
</PRE>

<P>
and it will import all the usual long names for the punctuation
variables, 
<em>except</em>  for 
<CODE>$`</CODE>, 
<CODE>$&</CODE>, and 
<CODE>$'</CODE>, which slow down your regexes.  If you don't supply this flag, then
those  variables are separately aliased via an 
<CODE>eval</CODE> statement.
</P>

<P>
This has been a long time coming---I thought it had been done already.
</P>

<P>
There was a long sidetrack from having to do with some unimportant
style issue, which should have been carried out in private email, or
not at all.
<H3><a name="Numeric_opens_in_IPC::Open3">Numeric opens in <code>IPC::Open3</code></a></H3>

</P>

<P>

Frank Tobin submitted a patch that allows the user of 
<CODE>IPC::Open3</CODE> to request that any of the 'files' to be opened be an already open
 file descriptor, analogous to the way 
<CODE>open FH, "<&=3"</CODE> works with regular 
<CODE>open</CODE>. 
</P>

<P>

<H3><a name="Regex_Bug">Regex Bug</a></H3>

</P>

<P>
Ian Flanigan found a very upsetting bug in the regex engine.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00627.html">Read about it.</a><H3><a name="Foo_isa_Foo"><code>Foo isa Foo</code></a></H3>

</P>

<P>

Johan Vromans complained that
</P>

</P><PRE>
        my $r = "Foo";
        UNIVERSAL::isa($r, "Foo::");
</PRE>

<P>
returns true.  Johan does not like that 
<CODE>$r</CODE> (which is a string) 
is reported to be a member of class 
<CODE>Foo</CODE>.  It was pointed out that the manual explicitly says that 
<CODE>UNIVERSAL::isa]</CODE> may be called as a class method, to determine whether one class was a
 subclass of another, in which case it could be invoked as
</P>

</P><PRE>
        Foo->isa('Foo')
</PRE>

<P>
which is essentially the same as Johan's example, and which returns
true because the class 
<CODE>Foo</CODE> is (trivially) 
a subclass of itself.
</P>

<P>
Johan said 'Yuck.'
</P>

<P>

<H3><a name="READMEhpux"><code>README.hpux</code></a></H3>

</P>

<P>
Jeff Okamoto updated it again.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00531.html">Here it is.</a><H3><a name="my___PACKAGE___obj_"><code>my __PACKAGE__ $obj</code> ...</a></H3>

</P>

<P>

Doug MacEachern submitted a patch to enable this.  The patch came in
just barely before the end-of-the week cutoff, and has already been a
lot of discussion of it in the past two days, so I am going to defer
talking about it any more until my next report.
</P>

<P>
Should you want to look at it before then, 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00628.html">here it is.</a></P>

<P>

<H3><a name="asdgasdfasd">asdgasdfasd</a></H3>

</P>

<P>

Some anonymous person running as root submitted a bug report (with 
<CODE>perlbug</CODE>) that only said 'asdgasdfasd'.  Martyn Pearce replied that it was not
a bug, but a feature.
</P>

<P>

<H3><a name="Various">Various</a></H3>

</P>

<P>
A large collection of bug reports, bug fixes, non-bug reports,
questions, answers, and a very small amount and spam.  No serious
flamage however.  
</P>

<P>
This is the end of the month, so I will summarize: I filed 97 messages
in the 
<CODE>junk</CODE> folder, 311 in the 
<CODE>misc</CODE> folder, and 329 messages in 45
various other folders pertaining to particular topics.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200006+@plover.com">Mark-Jason Dominus</a>

