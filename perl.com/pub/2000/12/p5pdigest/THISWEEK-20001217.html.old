</P>

<P>


<!-- This week on perl5-porters (10--17 Dec 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Object_creation_and_destruction">Object creation and destruction</a>
  <li><a href="#More_cool_PerlIO_stuff">More cool PerlIO stuff</a>
  <li><a href="#What_to_do_with_bugs">What to do with bugs</a>
  <li><a href="#UV_Preserving_Arithmetic">UV Preserving Arithmetic</a>
  <li><a href="#Code_checkers">Code checkers</a>
  <li><a href="#Precedence">Precedence</a>
  <li><a href="#Reminder_about_the_FAQ">Reminder about the FAQ</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>perl-thisweek-YYYYMM@simon-cozens.org</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
<H3><a name="Object_creation_and_destruction">Object creation and destruction</a></H3>

</P>

<P>

Ilya came up with 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00800.html">another startling patch </a> this week, but this one was a
little more complex: he estimates, however, that it &quot;decreases the
overhead of creation/destruction of objects 3-4 times&quot;. It does this by
applying the same &quot;handler&quot; mechanism that operator overloading uses to 
<CODE>DESTROY</CODE> methods. He also says that &quot;other handlers can be easily done the same
 way&quot;, which (I think) means that similar speed-ups are possible in 
<CODE>BEGIN</CODE> and 
<CODE>END</CODE> blocks.
<H3><a name="More_cool_PerlIO_stuff">More cool PerlIO stuff</a></H3>

</P>

<P>

Nick has been working his magic yet again; you can now say
</P>

</P><PRE>
    use Encode;
    open($fh,"&lt;encoding(iso8859-7)",$greek) 
      || die "Cannot open $greek:$!";
</PRE>

<P>
This makes me ecstatically happy. 
</P>

<P>
He also suggested it should be possible to use a scalar as data to be
read from a filehandle, something I imagine every programmer's wanted to
do at least once in their life. That is:
</P>

</P><PRE>
    $data = "...";
    open FH, "<", \$data or die "This really can't happen";
    while (<FH>) {
        ...
    }
</PRE>

<P>
While he hasn't coded this yet, it shouldn't be very difficult, and
would be a nice general solution to all sorts of problems.
<H3><a name="What_to_do_with_bugs">What to do with bugs</a></H3>

</P>

<P>

Jarkko pointed out that there was a problem in the bug process, in that
bugs can very easily be forgotten about without a trace, and there's no
feedback between us and the bug reporter. We obviously want to fix this,
so there's communication with the reporter, and so we make sure that
every bug is dealt with and doesn't get forgotten.
</P>

<P>
Richard Foley suggested sending out a reminder of open bugs to the bug
admins and p5p; there was then some wonderful set theory mathematics
about which categories of currently open bugs we should start the ball
rolling with and how many there were. This process will definitely
happen with bugs submitted from now on, though.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00274.html">Read about it.</a></P>

<P>

<H3><a name="UV_Preserving_Arithmetic">UV Preserving Arithmetic</a></H3>

</P>

<P>

Nicholas Clark's great work with UV/IV preserving arithmetic (You know,
so that 
<CODE>$a=3; $b=5; $a + $b</CODE> results in an IV, not an NV) seems to have collapsed around his feet.
 It seemed like everything was going well, after a couple of 70-odd K patches
starting 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00499.html">this thread</a> managed to get the whole thing working quickly and accurately, but then
 Jarkko discovered it was giving nasty results on some platforms. Helmut
 Jarausch found it
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00800.html">failing on Irix</a>, and Jarkko was having it cause strange problems on Digital Unix. The
patches have been pulled out of the repository temporarily, and Nick is
reportedly looking for access to &quot;something slightly more esoteric than 
FreeBSD&quot;.
</P>

<P>
STOP PRESS! This from Nick:
<blockquote></P>

<P>
Jarkko and I worked hard at hammering out the problems - I was relying
on strtoul behaviour when presented with a number with leading &quot;-&quot;
working everywhere the way it does on FreeBSD, linux (and Irix Jarkko
reports) but it didn't work that way on Digital Unix, and that's where
his nasty problems came from. I re-wrote that bit of code in sv.c to
avoid even passing in the string with the leading &quot;-&quot; and with this
solution it works everywhere we've tested, and seems to be in the
repository as of yesterday (Saturday)
</blockquote><H3><a name="Code_checkers">Code checkers</a></H3>

</P>

<P>

<a href="http://www.perl.com/pub/2000/12/p5pdigest/THISWEEK-20001203.html">Last time</a> I asked: 
<blockquote></P>

<P>
   (Hey, maybe someone would like to try writing a program that
  automatically extracts example code from the documentation and
  makes sure it compiles?)
</blockquote></P>

<P>
Well, Tels did it, and produced 
<CODE>Pod::Checker::Code</CODE>; initially, it checked the synopsis and examples sections of module
documentation, but I suggested it should be extended to the example code
in 
<CODE>/pod</CODE>. Tels duly did that, but this raised another question: how to mark up
the code appropriately so that it can be checked? Various ideas were
raised, the most promising being
</P>

</P><PRE>
    =code perl
</PRE>

</P><PRE>
    =back
</PRE>

<P>
I don't think anything was actually decided; check the 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00640.html">rest of the thread</a> for details.
<H3><a name="Precedence">Precedence</a></H3>

</P>

<P>

Jeff Pinyan reminded us again that the output of
</P>

</P><PRE>
    $x = 10;
    print ++$x / $x;
</PRE>

<P>
is not what you might expect; Johan Vromans trumped this with
</P>

</P><PRE>
    $i = 1; @a = ($i++, $i++, $i++, $i++, $i++);
    $i = 0; @b = (++$i, ++$i, ++$i, ++$i, ++$i);
    print "@a\n@b\n";
</PRE>

<P>
Now, we all know that if you do things with multiple side-effects at the
same time, Weird Things occur. However, there was some argument as to
whether this ought to be the case. Johan said:
<blockquote></P>

<P>
I expect
</P>

<P>
   $x = 10; print ++$x / $x--;
</P>

<P>
to produce the same output as:
</P>

<P>
   $x = 10;
   $x1 = sub { ++$x };
   $x2 = sub { $x-- };
   print $x1-&gt;() / $x2-&gt;();
</P>

<P>
If not, it's a bug, or we'd better have a _good_
explanation.
</blockquote></P>

<P>
Various people disagreed; it's not just a question of side-effects, but
also a question of the order of evaluation of operands. C leaves the
order of evaluation undefined, but do we want Perl to go this way?
Nicholas Clark maintained that keeping the order undefined allows for
flexibility in the implementation: if we promise a certain evaluation
order, but then someone comes up with a huge speed increase hack which
jiggles the evaluation order, we can't use it. John Peacock summed it up
rather differently: &quot;Doctor, it hurts when I do this!&quot;.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00443.html">Read about it.</a></P>

<P>

<H3><a name="Reminder_about_the_FAQ">Reminder about the FAQ</a></H3>

</P>

<P>
Daniel Stutz asked how to get the latest development sources, (Answer:
read perlhack, it tells you - well, the perlhack in the latest
development sources does...) and also complained that &quot;it's very hard to
find information about P5P&quot;. Various people pointed out that P5P is
mentioned in the first part of the Perl FAQ, and I finally remembered to
post the FAQ. 
</P>

<P>
Do you know about the P5P FAQ? You should. Email 
<CODE>perl5-porters-faq@perl.org</CODE> for a copy, or read it 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-12/msg00835.html">here.</a><H3><a name="Various">Various</a></H3>

</P>

<P>

Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>

