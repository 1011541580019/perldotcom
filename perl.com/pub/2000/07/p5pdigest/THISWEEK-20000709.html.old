</P>

<P>


<!-- This week on perl5-porters (3--9 July 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <ul>
  <li><a href="#NEW__RDF_Available">NEW!  RDF Available</a>
  </ul>
  <li><a href="#Bug_Database">Bug Database</a>
  <li><a href="#buildtoc"><code>buildtoc</code></a>
  <li><a href="#use_namespace"><code>use namespace</code></a>
  <li><a href="#Unicode_Input_Solution">Unicode Input Solution</a>
  <li><a href="#tra_z_0"><code>tr/a-z-0//</code></a>
  <li><a href="#Mutual_use">Mutual <code>use</code></a>
  <li><a href="#sprintf_tests"><code>sprintf</code> tests</a>
  <li><a href="#Complex_Expressions_in_Formats">Complex Expressions in Formats</a>
  <li><a href="#Threading_Failure_Test_Case">Threading Failure Test Case</a>
  <li><a href="#What_does_changing_PL_sh_path_do">What does changing <code>PL_sh_path</code> do?</a>
  <li><a href="#UNTIE_Method"><code>UNTIE</code> Method</a>
  <li><a href="#Sarathy_Fixes_a_Bug_that_Nobody_Knew_Existed">Sarathy Fixes a Bug that Nobody Knew Existed</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

<H4><a name="NEW__RDF_Available">NEW!  RDF Available</a></H4>

</P>

<P>
Starting with last week's report, you can get an RDF for each report by replacing
the 
<CODE>.html</CODE> in the filename with 
<CODE>.rdf</CODE>.  
</P>

<P>
The current report will always be available from 
<a href="http://www.perl.com/p5pdigest.cgi">http://www.perl.com/p5pdigest.cgi</a>.  The RDF for the current report will always be available from 
<a href="http://www.perl.com/p5pdigest.cgi?s=rdf">http://www.perl.com/p5pdigest.cgi?s=rdf</a>.
</P>

<P>
You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
Next week's report will be a little early, because I'm going to try to
get it out before the big Perl conference.   Then the following report
will be a little late, because I will have just gotten back from the
big Perl conference.
</P>

<P>

<H3><a name="Bug_Database">Bug Database</a></H3>

</P>

<P>
Alan Burlison reporterd a minor bug in 
<CODE>h2xs</CODE>, and pointed out that it had been fixed betwen 5.005_03 and 5.6.0,
and also that there were at least three open tickets in the bug
database that appear to have been resolved by this fix.  He suggested
that the database support an interest list for each bug, and send mail
to everyone on the interest list when there was a status change for
their bug.   Richard Foley said he would look into this.
</P>

<P>
This led to a large discussion about the bug database and bug tracking
generally.  Simon said that he thought the entire bug system needed a
complete overhaul.  Specifically, he said he wanted to see the two (or
three) bug databases replaced by a single database; ownership of
tickets by people who are addressing the bugs, with automatic
reversion to the `unowned' pile if the owner doesn't take some
periodic action such as responding to an automatic email; weekly
automatic reports to p5p on outstanding tickets and to ticket owners.
</P>

<P>
Richard Foley replied that some of this is in progress, or is easy.
For example, other bug databases can send email into his perlbugtron
to enter their bugs there.  Also he can set up a cron job to sent p5p
a weekly status report.  But it's not clear that such a report would
be useful unless someone cleas up the existing database, checking over
all the outstanding bugs, closing the ones that are fixed in 5.6.0,
weeding out the non-bugs, merging reports that appear to be the same
bug, and soforth.  Nat Torkington mentioned that he had started to do
this a few months ago, but stopped, because the job is so big.
</P>

<P>
Nat then pointed out that this would be a good way for beginning p5p
people to gain expertise.  Sarathy agreed that the biggest problems
appeared not to be technical, but that there is no bug champion who
has taken responsibility for taking care of the database.  I mentioned
that I had been planning to take this up after the conference this
month, and had been moving into the job stealthily by reportong on
open bugs in these reports, and encouraging people to try to fix them.
Several people volunteered to help categorize bugs and close tickets.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00205.html">Alan Burlison described his imagined bug lifecycle.</a></P>

<P>
Summary of Alan's ideas:
<ol><li></P>

<P>
The bug is reported.
<li>The bug is routed to the 'triage' person for its category.
<li>A registered bugfixer is assigned the bug from a queue or unassigned bugs.
<li>The bugfixer fixes the bug and mails in a patch.  
</ol></P>

<P>
Simon suggested that one way to prevent the problem from getting worse
is to let people close tickets by email.  If a bug fixer cc's their
patch to an address like 
<CODE>close-##bugid##@bugs.perl.org</CODE>, that could automatically close the ticket.  Richard appeared to be
willing to support this.
</P>

<P>
Simon also mentioned that he is starting up a 
<a href="http://sourcetalk.perlhacker.org/">web site</a> for discussion of the Perl source code and internals and nurturing of
 new Perl core hackers.
</P>

<P>
There was some discussion of alternate bug tracking systems, including
Debian's, which is reputed to be good, but the consensus seemed to be
that it was not appropriate for Perl.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00108.html">Root of this thread.</a></P>

<P>

<H3><a name="buildtoc"><code>buildtoc</code></a></H3>

</P>

<P>
Jarkko did some work on 
<CODE>pod/buildtoc</CODE>, which is the program that constructs the 
<CODE>perltoc</CODE> man page.  He made a long list of pods that had been added but which
 were not in 
<CODE>buildtoc</CODE>'s list of files to include.
Jes&uacute;s Quiroga sent his list of pods that are in the 5.6.0 
distribution---there are 326 of them.  There was some discussion about
what to do with the many miscellaneous and platform-specific items,
but no clear conclusion.
</P>

<P>
Jarkko also reordered the brief table of contents that is in 
<CODE>perl.pod</CODE>.  I am glad; it was always embarassing to be teaching a class of Perl
beginners, to proudly say ''Look, if you do 
<CODE>man perl</CODE> you get a list of the other manuals,'' and then to see three different
 versions of 
<CODE>perldelta</CODE> there at the top of the list.  There was a little discussion about
 how to order the items, and about whether or not 
<CODE>perlbook.pod</CODE> should remain in the distribtution.
</P>

<P>

<H3><a name="use_namespace"><code>use namespace</code></a></H3>

</P>

<P>
Alan Burlison wants to be able to say 
</P>

</P><PRE>
        use namespace Sun::Solaris;
</PRE>

<P>
and then have
</P>

</P><PRE>
        my $obj = Foo::Bar->new(...);
</PRE>

<P>
be interpreted as if he had written
</P>

</P><PRE>
        my $obj = Sun::Solaris::Foo::Bar->new(...);
</PRE>

<P>
instead.  This is very similar to a suggestion that Michael King made
last year, except that Michael also had some other ideas that were
unpalatable.
</P>

<P>

<a href="http://www.perl.com/pub/1999/10/p5pdigest/THISWEEK-19991017.html#bundling">Previous discussion.</a></P>

<P>

Alan said he would be willing to try to implement this, but first he
wanted to hear people's comments about whether it was advisable.
</P>

<P>
Graham suggested that the 
<CODE>namespace</CODE> pragma would not modify the meaning of constructions like this:
</P>

</P><PRE>
        my $obj = Foo::Bar->new(...);
</PRE>

<P>
but rather, only those that looked like this:        
</P>

</P><PRE>
        my $obj = ::Foo::Bar->new(...);
</PRE>

<P>
Then you would still be able to use other modules, even in the scope of 
<CODE>use namespace</CODE>.  He also pointed out that to work properly it would have to have a
lexical scope.  A bunch of other possible semantics were discussed,
all of which seemed to me to be obviously The Wrong Thing.  
</P>

<P>
There was a tangent discussion about the uses of 
<CODE>__PACKAGE__</CODE>.
</P>

<P>

<H3><a name="Unicode_Input_Solution">Unicode Input Solution</a></H3>

</P>

<P>

Simon reported a clever suggestion from the Perl-Unicode mailing list.
Some systems, such as Windows, store system data like directory
entries in unicode.  You'd like to flag such inputs as UTF8 when they
are read in.  The suggestion was to piggyback this atop the tainting
mechanism.  At present, there's a macro which, if taint mode is on,
turns on the taint flag on the input scalar for every input Perl reads
from any source.  Simon posted a patch which extends the macro so that
if 
<CODE>use utf8</CODE> is in scope, and the string is a valid UTF8 string, Perl will also
 set the 
<CODE>UTF8</CODE> flag on the scalar.   Since presumably everything is already checked for
 taintedness when it's read in, this automatically puts the check for
UTF8-ness everywhere also.
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00026.html">Read about it.</a></P>

<P>

<H3><a name="tra_z_0"><code>tr/a-z-0//</code></a></H3>

</P>

<P>
I reported that this is equivalent to 
<CODE>tr/a-y//</CODE>, because the ranges are expanded inline from left to right, so the
original 
<CODE>tr</CODE> becomes 
<CODE>tr/abcdefghijklmnopqrstuvwxyz-0//</CODE>, and then the 
<CODE>z-0</CODE> is discarded (because there are no characters between 
<CODE>z</CODE> and 
<CODE>0</CODE>.  Sometime later, I sent a patch, and also sent a patch that forbids 
<CODE>X-Y</CODE> when 
<CODE>X</CODE> occurs after 
<CODE>Y</CODE>.   The latter was already a fatal error in a regex character class;
it turns out that the code for range parsing in  
<CODE>tr</CODE> is totally separate from the analogous range parsing code for regexes.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00054.html">Patch #1.  </a><a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00095.html">Patch #2.</a></P>

<P>

<H3><a name="Mutual_use">Mutual <code>use</code></a></H3>

</P>

<P>
Alan Burlison wanted to know what to do when he needs to have two
modules, each of which 
<CODE>use</CODE>s the other.  Various solutions were proposed, mostly of the form
'Don't do that'.  THe currect answer in Alan's case was to factor out
the part of B that was needed by A into a separate module, C, and have
A 
<CODE>use</CODE> C and B 
<CODE>use</CODE> A.
<H3><a name="sprintf_tests"><code>sprintf</code> tests</a></H3>

</P>

<P>

Sarathy pointed out a problem with Dominic Dunlop's excellent 
<CODE>sprintf</CODE> tests:  Not all systems produce output with exactly two digits of
 exponent information, so many tests fail on Windows systems, for
 example.  (The C standard only requires that there be 
 at least two digits.)  Dominic said he would think about what to do
 about this, but has not said anything about it since then.
</P>

<P>

<H3><a name="Complex_Expressions_in_Formats">Complex Expressions in Formats</a></H3>

</P>

<P>
H. Merijn Brand fixed a bug that he reported last month:  Complex
expressions like 
<CODE>$h{foo}[1]</CODE> were misparsed when they appeared in 
<CODE>format</CODE> lines.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-06/msg00194.html">Original bug report</a></P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00084.html">The patch.</a></P>

<P>

Thank you very much, Merijn!
<H3><a name="Threading_Failure_Test_Case">Threading Failure Test Case</a></H3>

</P>

<P>

Lincoln Stein sent a smallish program that hangs inside the thread
library.  Persons wishing to be deemed heroic should investigate this.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-07/msg00099.html">Test case.</a><H3><a name="What_does_changing_PL_sh_path_do">What does changing <code>PL_sh_path</code> do?</a></H3>

</P>

<P>

Bryan C. Warnock asked what would happen if he were to change 
<CODE>PL_shell_path</CODE> to point to some shell that was not Bourne-compatible.  Nobody
 answered, possibly because nobody has tried before.
</P>

<P>
If Bryan reports back later I will mention it.
</P>

<P>

<H3><a name="UNTIE_Method"><code>UNTIE</code> Method</a></H3>

</P>

<P>
Brian S. Julin expressed a wish for an 
<CODE>UNTIE</CODE> method which would be called automatically when you untie a tied
 variable.  I said I had wanted such a thing for a long time (since
at least early 1998, apparently) but I did not provide a patch.
<H3><a name="Sarathy_Fixes_a_Bug_that_Nobody_Knew_Existed">Sarathy Fixes a Bug that Nobody Knew Existed</a></H3>

</P>

<P>

Several, actually.  Mostly memory leaks.
</P>

<P>
Thanks.
<H3><a name="Various">Various</a></H3>

</P>

<P>

A large collection of bug reports, bug fixes, non-bug reports,
questions, answers, and a small amount of spam.  The only flames were
from that idiot who can't figure out how to unsubscribe.  I'm sure
you've met him before.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200007+@plover.com">Mark-Jason Dominus</a>

