</P>

<P>


<!-- This week on perl5-porters (8--15 May 2000) -->

<br />
<!::field::date::><br /><ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Regex_Stress_Testing">Regex Stress Testing</a>
  <li><a href="#Another_Thread_Safing_Patch">Another Thread-Safing Patch</a>
  <li><a href="#Enormous_perldoc_discussion_winds_up">Enormous <code>perldoc</code> discussion winds up</a>
  <li><a href="#Build_patches_for_OS2">Build patches for OS/2</a>
  <li><a href="#Regex_Engine">Regex Engine</a>
  <li><a href="#Method_calls_on_unblessed_references">Method calls on unblessed references</a>
  <li><a href="#Version_Tuples_Broken?">Version Tuples Broken?</a>
  <li><a href="#Negative_Subscripts_for_Tied_Arrays">Negative Subscripts for Tied Arrays</a>
  <li><a href="#Upcoming_corrections">Upcoming corrections</a>
  <li><a href="#Various">Various</a>
</ul>

      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com"><tt>p5p-digest-subscribe@plover.com</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>mjd-perl-thisweek-YYYYMM@plover.com</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
It was tempting to just post `nothing happened this week'.  Lots of
small patches to fix various 5.6.0 misbehaviors, and reports of new
5.6.0 misbehaviors.  An unusual number of people who should have known
better posting requests for dumb trivial features.  Low traffic.  Few
big discussions.
<H3><a name="Regex_Stress_Testing">Regex Stress Testing</a></H3>

</P>

<P>

Jarkko Hietaniemi wrote a module called 
<CODE>Regex::PreSuf</CODE> which accepts a list of words and builds a regex that recognizes only
those words.  Mike Giroux suggested that the large regexes generated
by this module could be used to stress-test the regex engine.  (Avi
Finkel's 
<CODE>String::REPartition</CODE> module might be used similarly.)
</P>

<P>
Ilya said it would be better to add the trie code from 
<CODE>Regex::PreSuf</CODE> to the regex engine.  Jarkko replied that he would prefer to eat live
 rattlesnakes.
</P>

<P>

<H3><a name="Another_Thread_Safing_Patch">Another Thread-Safing Patch</a></H3>

</P>

<P>
Dan Sugalski sent a replacement for his patch that makes the 
<CODE>lock()</CODE> function thread-safe.  It also exposes 
<CODE>lock()</CODE> functionality to XS subroutines, and some other things.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00352.html">See the patch.</a></P>

<P>
Also in thread news: A user posted a message asking why threads
weren't fully supported, and Dan replied at some length.  (Summary:
Because it's hard.) 
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00382.html">Dan's reply.</a><blockquote><b>Marek Rouchal:</b> Bottom line: I'd be very happyabout fully working threads in Perl 5.6.1<p><b>Dan Sugalski:</b>You and me both. :) I wouldn't hold my breath.<p></blockquote> </P>

<P>

<H3><a name="Enormous_perldoc_discussion_winds_up">Enormous <code>perldoc</code> discussion winds up</a></H3>

</P>

<P>

As quickly as it arrived, last week's discussion of docmuentation
issues has ended.  The only discussion of note this week was a message
from Mark Fisher with a reference to a 1971 paper that compared
automatic indexing with manual indexing.  Would-be indexers should
probably take a look at this.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00387.html">Mark's message.</a></P>

<P>

<a href="http://cs-tr.cs.cornell.edu/Dienst/UI/2.0/Describe/ncstrl.cornell/TR71-115">Gerald Salton's paper.</a><H3><a name="Build_patches_for_OS2">Build patches for OS/2</a></H3>

</P>

<P>

Rocco Caputo made some changes to fix the build process on OS/2.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00357.html">Read about it.</a><H3><a name="Regex_Engine">Regex Engine</a></H3>

</P>

<P>

In the course of trying to investigate a bug in the regex engine, Hugo
van der Sanden critiqued the code style and comments.  This led to a
brief but interesting discussion about the code there.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00271.html">Original bug report</a></P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-05/msg00362.html">Hugo's critique message</a><H3><a name="Method_calls_on_unblessed_references">Method calls on unblessed references</a></H3>

</P>

<P>

John Tobey submitted a patch to enable
</P>

</P><PRE>
        $r->method(arg, ...)
</PRE>

<P>
when 
<CODE>$r</CODE> is unblessed.  If I understand correctly, the method is looked up in
a package  named 
<CODE>HASH</CODE> or 
<CODE>ARRAY</CODE> or whatever.
</P>

<P>
Randal said that this had come up some years ago, and the consensus
was not to do it, since it would make erroneous method calls harder to
catch. 
</P>

<P>
I was not able to find this discussion.  John found a 1996 message
from Tim Bunce that referred to an even earlier discussion of this
same idea.  (Tim submitted a patch similar to John's.)  If anyone can
dig up a pointer to the original discussion, please let me know.
</P>

<P>

<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/9607/msg00750.html">Tim's really old message.</a><H3><a name="Version_Tuples_Broken?">Version Tuples Broken?</a></H3>

</P>

<P>

Ian Phillipps pointed out two problems with version tuples.   But Ilya
said that no, the problem was not with the tuples, but with the
results produced by the 
<CODE>unpack</CODE> and 
<CODE>print</CODE> functions when extracting the result.  Mike Guy then pointed out that
</P>

</P><PRE>
        (256.255.254 . 257.258.259) eq (256.255.254.257.258.259)
</PRE>

<P>
is 
<em>false</em>.</P>

<P>
Sarathy said that this is because 
<CODE>eq</CODE> is broken; it'll be fixed in 5.6.1.
<H3><a name="Negative_Subscripts_for_Tied_Arrays">Negative Subscripts for Tied Arrays</a></H3>

</P>

<P>

Michael Schwern complained that if you have a tied array, and you do
</P>

</P><PRE>
        $array[-1]
</PRE>

<P>
Perl does not call 
<CODE>$o->FETCH(-1)</CODE>, but rather instead it calls 
<CODE>$o->FETCHSIZE()</CODE> to find out how long the array is, say 80 elements, and then invokes 
<CODE>$o->FETCH(79)</CODE> to get the last element.  Nick Ing-Simmons, the author of the tied
 array implementation, said that
that was how it 
was supposed to work, and changing it will break existing code.
<H3><a name="Upcoming_corrections">Upcoming corrections</a></H3>

</P>

<P>

Brad Appleton, the author of the 
<CODE>Pod::Parser</CODE> module suite, felt that some of my comments from the previous report
were unfair.  In particular, he says that the current 
<CODE>Pod::Parser</CODE> implementation is incomplete, was designed for flexibility rather
 than speed, and he is sure that large speed gains could be easily
had. 
Brad is preparing a long and informative reply, which I
 expect to include in next week's report.
</P>

<P>

<H3><a name="Various">Various</a></H3>

</P>

<P>
A large collection of bug reports, bug fixes, non-bug reports,
questions, answers, and a small amaount of flamage and spam. 
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<P>

</P>

<P>

</P>

<P>

</P>

<P>

</P>

<hr>

<a href="mailto:mjd-perl-thisweek-200005+@plover.com">Mark-Jason Dominus</a>

