
<!-- This week on perl5-porters (13--19 Feb 2001) -->

<br />
<!::field::date::><br />
      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:perl5-porters-digest-subscribe@netthink.co.uk"><tt>perl5-porters-digest-subscribe@netthink.co.uk</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>perl-thisweek-YYYYMM@simon-cozens.org</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
We saw about 325 messages this week, not including test results. Note
that the mailing list for this summary has moved over to NetThink,
joining the Perl 6 summary which you can subscribe to by sending a
message to 
<a href="mailto:perl6-digest-subscribe@netthink.co.uk"><tt>perl6-digest-subscribe@netthink.co.uk</tt>.</a><H3><a name="Unicode_Fun">Unicode Fun</a></H3>

</P>

<P>

You know I can't resist it; there were three fairly big Unicode threads this
week. 
</P>

<P>
I kicked off by providing a patch which enables Unicode literals of the
form 
<CODE>U+89AB</CODE>. Jarkko and Andreas reasonably complained that we have enough magical token 
types already; I countered by suggesting 
<CODE>v0x89AB</CODE>, but haven't produced a patch yet. Philip Newton pointed out that this
was pretty much the same as 
<CODE>"\x{89AB"</CODE>, so was probably not necessary, however a few people found it
intuitive, so I'll look at it when the next supply of tuits arrives.
</P>

<P>
Jarkko, meanwhile, found a really, really weird Unicode bug related to
string sharing in hash keys and certain 64 bit platforms. The code
</P>

</P><PRE>
    use utf8;
    $FOO{BAR};
</PRE>

<P>
produced a warning about cleaning up the string when 
<CODE>perl</CODE> exits.
</P>

<P>
I say &quot;certain platforms&quot;, but it proved very difficult indeed to
reproduce, and Jarkko finally tracked it down with a combination of
brute force and finesse. 
</P>

<P>
There were a number of problems of understanding with versions and vstrings this
week; several serious, and one silly. Firstly, 
<CODE>$]</CODE> generates 5.006, rather than 5.6; Perl still juggles the two versioning
conventions, but this means that 
</P>

</P><PRE>
    if ($] < 5.6) ... 
</PRE>

<P>
doesn't do the right thing. You should remember that 
<CODE>$]</CODE> produces old-style &quot;floating point&quot; versions, and 
<CODE>$^V</CODE> produces new-style Unicode versions.
</P>

<P>
Next, there was the misunderstanding about how vstrings construct
strings: vstrings are not bare words, but they are another way of
generating strings. Hence,
</P>

</P><PRE>
    if ($^V lt "v5.6")
</PRE>

<P>
won't work; indeed, the 
<CODE>v</CODE> doesn't show up in 
<CODE>v5.6</CODE> at all, and 
<CODE>v5.6</CODE> is very different from 
[5.6].
</P>

<P>
For the silly one, you'll just have to read the list. :)
</P>

<P>

<H3><a name="nlink_and_temporary_file_systems">nlink and temporary file systems</a></H3>

</P>

<P>
Linux recently introduced a temporary file system, 
<CODE>tmpfs</CODE>, which is like the Solaris 
<CODE>tmpfs</CODE> but done right. Unfortunately, it wasn't done right enough for us: 
<CODE>File::Find</CODE> was having problems because the 
<CODE>nlink</CODE> field of 
<CODE>stat</CODE> was inaccurate; one suggestion was just to set the 
<CODE>dont_use_nlink</CODE> configuration variable, but that's horrendously slow. Tels provided a
 patch to
<CODE>File::Find</CODE> which avoids using 
<CODE>nlink</CODE> where possible, but Andy pointed out that it isn't a general solution,
 because it could get expensive to 
<CODE>stat</CODE> every directory to make sure you haven't passed a filesystem boundary
 and need to change your 
<CODE>nlink</CODE> usage. Andreas got in touch with the author of Linux's 
<CODE>tmpfs</CODE> who provided a patch to it. Alan Cox bitched that applications
demanding traditional Unix semantics for 
<CODE>nlink</CODE> were buggy, 
<!-- Can we send him a copy of Advanced Programming in the UnixEnvironment or something? --> but applied the patch anyway, so 
<CODE>tmpfs</CODE> and 
<CODE>File::Find</CODE> will play nice again at some unspecified point in the future.
<H3><a name="Parsing_XML">Parsing XML</a></H3>

</P>

<P>

One of the targets for Perl 5.8 is to speed up XML parsing, but nobody
really has any idea how to do that. The current 
<CODE>XML::Parser</CODE> uses an external library, which means that a lot of speed is lost in
 flapping around in XS. The idea was mentioned of a pure-Perl version,
 which we would then be able to ship in core. Jarkko says:
<blockquote></P>

<P>
Okay, I lied.  I do have an opinion: relying on an external library to
do XML parsing is weird.  expat is nice and is a de facto standard,
and reinventing the wheel that has already been extensively invented
and debugged is silly in the extreme -- but we are, after all,
supposed to be The Text Processing Language.
</blockquote></P>

<P>
Matt Sergeant, as ever, had good XML suggestions:
<blockquote> </P>

<P>
If you do that, I suggest/recommend at least doing it
the Python way - by letting XML experts (i.e. a SIG) discuss what would
be the best way to do it. Note also that ActivePerl ships with
XML::Parser, though in a few months it may not necessarily be the best
option any more.
</P>

<P>
Also, if you do add one, it should definitely conform to the Perl SAX
API (either v1 or v2), as that's the way perl-xml is heading.
</blockquote> </P>

<P>
He also pointed out that:
<blockquote> </P>

<P>
The speed problem is that expat is basically a callback/event based
parser, so you have a storm of events crossing the XS/Perl barrier,
meaning that you're constantly building SV's. Orchard can get around
this
by doing the parsing to a tree structure in C. (Note that Orchard is
also
based on expat). Or it can also do SAX based event passing, but again
that's about as slow as XML::Parser.
</P>

<P>
Doing it all in Perl is possible, but not entirely trivial to get
exactly
right. XML has a lot of annoying nuances that were left in from SGML,
mostly to do with DTDs. And while I don't use most of the annoying
features, I think I'd be upset if the core Perl started shipping an
&quot;XML&quot; parser that wasn't fully XML compliant.
</blockquote> </P>

<P>
I wonder if the 
<CODE>perl-xml</CODE> mailing list could go chew on that and let us know the best way to
proceed.
<H3><a name="IV_Presentation_Wars">IV Presentation Wars</a></H3>

</P>

<P>

There was an overly long and underly helpful discussion between Ilya,
Jarkko, and Nicholas Clark about the merits and the implementation of
the IV preservation patch. (That's the thing that means
<CODE>$a = $b+$c</CODE> is done as a integer rather than a floating point operation where
possible.)
</P>

<P>
For some reason this morphed into an overly long and underly helpful
discussion between Ilya, Jarkko and the other Nick about Unicode. I
stood back and let it happen.
</P>

<P>
Nobody had any code in either branch of the discussion, so the current
implementation remains, no matter how dirty people think it is. If you
really want to wade through it all, 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-02/msg00181.html">start here</a>.
<H3><a name="Memory_Leaks_and_Refcounting_Loops">Memory Leaks and Refcounting Loops</a></H3>

</P>

<P>

Alan &quot;The Plumber&quot; Burlison has been exceptionally hard at work again
this week tracking down memory leaks and situations where SVs are not
being freed properly due to reference cycles. 
</P>

<P>
Part of the problem with memory leaks is that because of the arena
mechanism, they're pretty hard to spot; the &quot;arena&quot; is a chunk of memory
which is allocated in advance and split up and divided out when new SVs
are requested. The problem with this is that since everything comes from
the same chunk of allocated memory, it's hard to detect where leaks are
really happening; according to Alan:
<blockquote></P>

<P>
...the current SV arena
cleanup carries a very big shovel and bucket, and scrapes up all the
camel dung at the end.  However, in the process it *does* clean up
things that really are *only* still referenced by the arena allocator,
and therefore do in fact constitute memory that isn't accessible from
anywhere else inside the interpreter (a squeak?).  The upshot of this is
that the arena allocator has the fortunate (?) side-effect of cleaning    
up squeaked SVs when the interpreter exits.
</P>

<P>
However it has the unfortunate side-effect of hiding squeaks in the rest
of the interpreter, and it also hides the fact that the current attempt
to delete 
<CODE>PL_defstash</CODE> doesn't work, and that magical things inside a
stash squeak when they are deleted, and that refcounts don't get updated
correctly when you delete something magical from a stash.  Basically a
lot of nasty stuff is hiding under the existing arena allocator.  My aim
is to dig out the cesspit.
</blockquote></P>

<P>
He also found a nasty problem with removing XSUBs: because CVs have a
pointer back to their GV, the GV has a reference count of 2. When the GV
is deleted, that reference count drops to 1, and the CV is left
stranded, without being cleanly removed. His suggested fix was to stop
the artificial increasing of the GV's reference count. Nick Ing-Simmons
said that he thought this was done to stop the function from
disappearing while it was being called, meaning Perl would segfault. 
</P>

<P>
Alan also found a really, really horrible problem where entries in a
stash with a circular reference never get freed. This is, of course, one
of the shortcomings of a reference counting garbage collection system,
but it's still possible to delete an SV and remove all its references
at the time you remove it from a stash. The usual &quot;just add mark and
sweep GC&quot; discussion miraculously failed to materialise; perhaps
everyone's tired out after having exactly the same discussion on 
<CODE>perl6-internals</CODE>. At any rate, changing Perl 5's garbage collection system is not on the
horizon, but Alan's idea is simple and should work. Alan asked for
comment, but everyone was too busy gawping wide-eyed in wonder.
<H3><a name="TestHarness_and_the_t_directory">Test::Harness and the t/ directory</a></H3>

</P>

<P>

Mr. Schwern has, yet again, been doing some fantastic stuff with Perl
QA, including a suggestion to rearrange the test directory to allow
multiple tests per module; to allow tests for core modules to be exactly the
same as the tests on the CPAN version of the module, an idea to rework
<CODE>t/TEST</CODE> so that it uses Test::Harness, and to honour &quot;todo&quot; and &quot;skip&quot;
notifications in a test suite so that known failures can be safely
identified. Basically, you can now output
</P>

</P><PRE>
    not ok 13 # TODO cure cancer
</PRE>

<P>
in your test script, and the harness won't call it a bug. Schwern also
extracted 
<CODE>Test::Harness</CODE> from the core and put it back as a CPAN module so it can be used by
 non-bleeding-edge people. It's a very useful module, but it doesn't
 seem to have appeared on CPAN yet; check it out when it does!
<H3><a name="Various">Various</a></H3>

</P>

<P>

<!-- Jim C reported something about "tainted members", which isjust too great to be passed up --></P>

<P>
Olaf Flebbe asked whether you can 
<CODE>rsync</CODE> the perl 5.6.x tree as well as the bleadperl; the answer is yes, you
can. Simply change 
<CODE>perl-current</CODE> to 
<CODE>perl-5.6.x</CODE> in your 
<CODE>rsync</CODE> line, and you can follow the maintainance track.
</P>

<P>
Sarathy asked if anyone was interested in playing with 
<CODE>waitpid</CODE> on Windows and its 
<CODE>fork</CODE> emulation, so that calling 
<CODE>waitpid</CODE> would close the handle to the &quot;child&quot; thread. If that's something that
would interest you, 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-02/msg00841.html">read Sarathy's mail</a>.
</P>

<P>
Oh, and we got some spam. The first piece in a long while, thanks to the
work of Richard and Ask.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Unicode_Fun">Unicode Fun</a>
  <li><a href="#nlink_and_temporary_file_systems">nlink and temporary file systems</a>
  <li><a href="#Parsing_XML">Parsing XML</a>
  <li><a href="#IV_Presentation_Wars">IV Presentation Wars</a>
  <li><a href="#Memory_Leaks_and_Refcounting_Loops">Memory Leaks and Refcounting Loops</a>
  <li><a href="#TestHarness_and_the_t_directory">Test::Harness and the t/ directory</a>
  <li><a href="#Various">Various</a>
</ul>
