<!-- This week on perl5-porters (29 Jan -- 05 Feb 2001) --> 


<br />
<!::field::date::> 
<H3><a name="Notes">Notes</a></H3>  

<P>  You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:p5p-digest-subscribe@plover.com">p5p-digest-subscribe@plover.com.</a></P>  <P> Please send corrections and additions to 
<code>perl-thisweek-YYYYMM@simon-cozens.org
</code> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>  <P> Wow. 600 messages this week, and that's not counting a lot of the test
result messages. 
<H3><a name="Perl_561_not_delayed_after_all">Perl 5.6.1 not delayed after all</a></H3>  

<P>  It had to happen. Just after I announced last week that 5.6.1 would be
delayed, Sarathy announced the release of 5.6.1 trial 2. This is
available for testing on CPAN at 
<a href="http://www.cpan.org/authors/id/G/GS/GSAR/perl-5.6.1-TRIAL2.tar.gz">$CPAN/authors/id/G/GS/GSAR/perl-5.6.1-TRIAL2.tar.gz </a>. Sarathy says:
<blockquote></P>  <P> Thanks largely to Jarkko's help, the second trial version of perl
v5.6.1 is now available.  (CPAN may need some time to catch up.)
</P>  <P> If this release passes muster, I will update perldelta.pod and send
it to CPAN as v5.6.1.  Owing to the large number of patches, testing
is very very important.  So give it all you've got on all your
favourite platforms!
</P>  <P> In particular, I'd like to see some purify (or similar) runs.  Patches
to documentation are also welcome.  Changes to *.[ch] are probably
out unless they are fixing serious bugs.
</blockquote></P>  <P> Naturally, this produced a deluge of test results, the vast majority of
which were successful. As usual, if you've got any weird and funky
platforms, give it a spin.
</P>  <P> And, of course, well done to Jarkko and Sarathy for putting this one
together.
<H3><a name="MacPerl">MacPerl</a></H3>  </P>  <P>  I forgot to mention this last week, but it's important enough for me to 
mention it this week: Chris Nandor has taken over the MacPerl pumpkin.
If you have a Mac and you want to run Perl on it, (or even better, help
move MacPerl up to 5.6.1) then you really ought to read Chris' 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg01724.html">State of MacPerl</a> posting.
<H3><a name="select_on_Win32">select() on Win32</a></H3>  </P>  <P>  Barrie Slaymaker mentioned that he wanted to get 
<CODE>select()</CODE> working on Win32, and that Perforce were interested in funding the
work. Nick Ing-Simmons said that the PerlIO abstraction layer would help
with this:
<blockquote></P>  <P> he problem is that on Win32 to use 
<CODE>select()</CODE> the Socket has to be in synchronous mode. While to use 
<CODE>WaitForMultipleEvents()</CODE> the Socket has
to be in asynchronous mode - thus if you want to use Win32's native
&quot;poll-oid&quot;
API you cannot use 
<CODE>select()</CODE>. In addition MS's C runtime (
<CODE>read</CODE>/
<CODE>fread</CODE> etc) will not work on sockets in asynchronous mode (or non-blocking IO in
general).
</P>  <P> So you need to replace 
<CODE>read</CODE> and 
<CODE>stdio</CODE> with another IO subsystem and get perl to use it - hence PerlIO.
</blockquote></P>  <P> Uri Guttman predictably took this as a cue to push for a portable event
interface; Rocco Caputo said that he'd added an event-driven 
<CODE>IPC::Run</CODE>-style process communication model to his 
<CODE>POE</CODE> module which worked fine on Win32, using TCP sockets as a form of
<CODE>select()</CODE>-able pipe emulation.
</P>  <P> Nick wanted to work at the problem from the other end, by building up a
new PerlIO bottom layer for Windows, using the native Windows IO calls.
Sean McCune, who's working with Barrie on this, said that's what he
would try to do. As Jarkko pointed out:
<blockquote></P>  <P> First fork() emulation and now select()?  If we are not careful in ten
years or so NT/W2K/W2010 will be almost as useful as UNIX was in
mid-1980's.
</blockquote><H3><a name="TestHarness">Test::Harness</a></H3>  </P>  <P>  At last, Schwern's Test::Harness patch made it in, after a tiny bit more
messing around. The discussion turned into a useful thread on patching
strategies. For instance, it's apparently not very widely known that if
you add a new file to the Perl distribution, you also need to patch the 
<CODE>MANIFEST</CODE> file. There's also a load of good information in the file 
<CODE>Porting/patching.pod</CODE>. Andreas Koenig also put in a plug for Johan Vroman's 
<CODE>makepatch</CODE> utility:
<blockquote></P>  <P> Johan Vromans has written a powerful utility to create patches based
on large diretory trees -- makepatch. See the JV directory on CPAN for
the current version. If you have this program available, it is
recommended to create a duplicate of the perl directory tree against
which you are intending to provide a patch and let makepatch figure
out all the changes you made to your copy of the sources. As perl
comes with a MANIFEST file, you need not delete object files and other
derivative files from the two directory trees, makepatch is smart
about them.
</blockquote></P>  <P> Nicholas Clark suggested that each time you plan to make a change, you
can call configure with 
<CODE>-Dmksynlinks</CODE> which creates a symlink farm. Then when you change a file, remove the
symlink and replace it with a real copy of the file. This means you can
maintain multiple patch trees without the space overhead of full source
trees. Other suggestions included various version control systems, and
some people provided programs to sync up 
<CODE>bleadperl</CODE> with their local version control repository.
</P>  <P> Schwern also came out with a load of documentation patches explaining
the difference between 
<CODE>chop</CODE> and 
<CODE>chomp</CODE> from a portability point of view, and changing the examples to use 
<CODE>chomp</CODE> where they previously used
<CODE>chop</CODE>.
<H3><a name="CHECK_blocks">CHECK blocks</a></H3>  </P>  <P>  Piers Cawley asked about 
<CODE>CHECK</CODE> blocks
<blockquote></P>  <P> I have a CHECK block that checks that
all the methods requested by the interface are accessible. No problem.
</P>  <P> Until, one of my class's client classes comes to do a deferred load
using require and everything falls over in a heap because it's
</P>  </P><PRE> Too late to run CHECK block.
</PRE>  <P> And I can't, for the life of me, understand why.
</blockquote></P>  <P> So, what's a 
<CODE>CHECK</CODE> block? The idea is that they're supposed to be called after compilation
is completed. They're intended to be used by the compiler backends, to
save the program state once everything's been assembled into an op tree.
However, there's no reason why you can't use them for other things
instead.
</P>  <P> The problem that Piers was coming up against was that we expect 
<CODE>CHECK</CODE> blocks to be run every time something is compiled, but this doesn't
happen yet; Sarathy explains:
<blockquote></P>  <P> In the current implementation, there is exactly one point at which
CHECK and INIT blocks are run (this being the point at which the
Compiler would do its work, when it saves and restores program
state, respectively).
</P>  <P> But I believe Larry has stated that CHECK blocks should be able to
run at the end of compilation of every individual &quot;compilation unit&quot;,
whatever that happens to be (file/BEGIN block/eval&quot;&quot;). 
</blockquote></P>  <P> As far as I'm aware, nobody is currently working on making those new
semantics reality, but I don't think it would be too difficult.
<H3><a name="C_library_functions_in_the_core">C library functions in the core</a></H3>  </P>  <P>  I compiled a list of standard C library functions that are either
reimplemented in the Perl core, or redefined to have more predictable
semantics. This helps you write more `politically correct' internals
code. For instance, instead of saying
</P>  </P><PRE> char *foo = malloc(10);
</PRE>  <P> you should really say
</P>  </P><PRE> New(0, foo, 10, char);
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-01/msg01752.html">Read about it.</a></PRE>  <P>  <H3><a name="Perl_for_Windows_CE">Perl for Windows CE</a></H3>  </P>  <P> So they beat me to it. Perl for Windows CE is finally available, at
<a href="http://www.rainer-keuchel.de/software.html">http://www.rainer-keuchel.de/software.html</a></P>  <P> Well done, Rainer, you mad individual.
<H3><a name="Various">Various</a></H3>  </P>  <P>  Lupe Christoph came up with some patches to make Solaris's 
<CODE>malloc</CODE> the default rather than Perl's 
<CODE>malloc</CODE> on that platform; this works around a known problem with Perl's
<CODE>malloc</CODE> with more than 2G of memory.
</P>  <P> Doug MacEachern had a really neat patch which shared globs containing
XSUBs across cloned
Perl interpreters, something that could save a lot of memory for those
embedding Perl. (Especially things that clone a lot of interpreters,
like 
<CODE>mod_perl</CODE>) 
</P>  <P> And that's about it. Until next week I remain, your humble and obedient servant,
</P>  <hr>  <a href="mailto:simon@brecon.co.uk">Simon Cozens</a>   
