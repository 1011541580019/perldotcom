<!-- This week on perl6 (12--18 Feb 2001) -->
<!- :field::id-author::before=by+::>
<br />
<!- :field::date::>
<br />
      <H3><a name="Notes">Notes</a></H3>



<P>

Please send corrections and additions to 
<CODE>perl6-thisweek-YYYYMM@simon-cozens.org</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
We looked at over 400 messages this week, about a quarter of which were
to do with garbage collection. Again. I'm afraid this week's summary is
a little short, but I'd rather get it out early than leave it until it's
a week old.
<H3><a name="Garbage_Collection">Garbage Collection</a></H3>

</P>

<P>

The GC fetish rages on, despite Dan's valiant efforts to call a
temporary halt to the discussion. Dan also valiantly tried to
distinguish between garbage collection (which is the freeing of unused
memory) and destruction. (which is what the 
<CODE>DESTROY</CODE> method provides for objects) When he claimed that &quot;Perl needs some
level of tracking for objects with finalization attached to
them. Full refcounting isn't required, however&quot;, (Note: Jan Dubois later
pointed out that what we were calling finalization is actually object
destruction) Sam Tregar came back with three important questions:
<blockquote></P>

<P>
 I think I've heard you state that before.  Can you be more specific?
 What alternate system do you have in mind?  Is this just wishful thinking?
</blockquote></P>

<P>
It has to be said that Dan seemed reluctant to answer the first two
questions, and both Sam and Jan Dubois pulled him up on this. Dan said
that he did not have time right now, but also said that most variables
would not need finalization, and of those which did, most would not need
reference counting because the lifespan of a variable can be determined
by code analysis:
<blockquote></P>

<P>
Most perl doesn't use that many objects that live on past what's obvious
lexically, at least in my experience. (Which may be rather skewed, I
admit) And the ratio of non-destructible objects to everything else is
also very small. Even if dealing with destructable things is reasonably
expensive, the number of places we pay that (and the number of times we
pay that) will be small enough to balance out. If that turns out not to
be the case, then we toss the idea and go with plan B.
</blockquote></P>

<P>
A lot of people made noises to the effect that they want predictable
destruction, so that's probably something that will happen - Perl 5 now
claims to have predictable 
<CODE>DESTROY</CODE> calling, after a patch by Ilya a couple of months back. Unfortunately,
 it transpires that the only way to get predictable destruction is to
use reference counting.
</P>

<P>
There was some
 discussion of the weird and usually unexpected interaction between 
<CODE>AUTOLOAD</CODE> and 
<CODE>DESTROY</CODE>, where the consensus seemed to be that 
<CODE>AUTOLOAD</CODE> should not, in future, be consulted for a 
<CODE>DESTROY</CODE> subroutine; Perl should do what its programmers actually want, instead
of what they consider consistent.
And there was a lot more <!-- ill-informed ranting by people who have no idea how the current Perl 5 destruction/garbage-collection mechanism works, --></P>

<P>
discussion which unfortunately produced 
far more light than heat. On the other hand, stay tuned for a
potential GC PDD from Dan next week.
<H3><a name="More_end_of_scope_actions">More end of scope actions</a></H3>

</P>

<P>

(Thanks to Bryan Warnock for this report)
</P>

<P>
In response to various peripheral discussions, Tony Olekshy
<a href="http://archive.develooper.com/perl6-language@perl.org/msg05604.html)">kicked off </a> a revisit to RFC 88, dealing with end-of-scope matters, particularly in the
area of exception handling.  The bulk of the various discussions subtitled
&quot;Background&quot;, &quot;Visibility&quot;, &quot;POST blocks&quot;, &quot;Reference model 2.0.2.1&quot;, 
&quot;Error messages&quot;, and &quot;Core Exceptions&quot; resulted in light traffic -
responses were generally limited to Q&amp;A.  (Although James Mastros did
provide an alternate syntax for a POST block, in an effort to minimalize
the exception handling syntax.)  The thead covering &quot;do/eval duality&quot;
generated more discussion, but was mainly centered around the
semantics of the duality in Perl 5. Likewise, the thread covering &quot;Garbage
collection&quot; did little more than to try to agree on proper terminology.  
</P>

<P>
The only new material presented was in the sub-thread &quot;Toward a hybrid
approach&quot;, where Tony and Glenn Linderman attempted to consolidate a
traditional static try/catch/finally exception model with a dynamic
always/except model.  Both Tony and Glenn posted a number of examples - 
too lengthy to do justice to here.  But the whole discussion can basically 
be boiled down to these two messages:
<a href="http://archive.develooper.com/perl6-language@perl.org/msg05868.html">this one</a> and
<a href="http://archive.develooper.com/perl6-language@perl.org/msg05985.html">this one</a>.
</P>

<P>
Tony has a 
<a href="http://www.avrasoft.com/perl6/try6-2021.txt">working model</a>, and you may want to revisit RFCs 
<a href="http://dev.perl.org/rfc/88.html">88</a> and
<a href="http://dev.perl.org/rfc/119.html">119</a>.
<H3><a name="Quality_Assurance">Quality Assurance</a></H3>

</P>

<P>

(Thanks to Woodrow Hill for this summary; you wouldn't believe how much
easier this job gets when other people do it for you.)
</P>

<P>
Michael got the whole ball rolling with a number of &quot;wake up&quot; postings to 
perl-qa, including such highlights as:
<blockquote></P>

<P>
...we had some ideas about developing a sane patching process.[...] Patch, 
Test, Review, Integrate.  Please comment/add/take away.
</blockquote></P>

<P>
Which no one seems to have done. But his comment that:
<blockquote></P>

<P>
As part of the QA process we need to do alot of test coverage analysis
and, to a lesser extent, performance profiling.  Our existing tools
(Devel::Coverage, Devel::DProf, Devel::SmallProf) are a start, but
need alot of work.  We need really solid, tested, documented libraries
*and* tools to pull this off.
</blockquote></P>

<P>
got folks talking about how complex a topic this is, and how many different 
way it can be looked at. Paul Johnson came to the rescue with a nice piece 
of work describing 
<a href="http://archive.develooper.com/perl-qa@perl.org/msg00277.html">Code Coverage</a>.
</P>

<P>
All this finally led to the creation of perl-qa-metrics, for the discussion 
of code metrics and other forms of analysis as thy apply to Perl.
</P>

<P>
Michael also asked for Administrative help:
<blockquote></P>

<P>
I need someone to
maintain/take responsibility for:
<ul><li> A list of projects and their development status and needs.<li>  Making sure things move forward<li> A "this week on perl-qa" style summary<li> The code repository<li> Mailing list organization (creating new lists when necessary, etc..)</ul></blockquote></P>

<P>

Which he then clarified with:
<blockquote></P>

<P>
I think that's what I need.  A project manager.  If anyone out there
actually has experience in any of this, feel free to shout loudly.
</blockquote></P>

<P>
Michael started another thread with his comment about Test::Harness. He 
noticed that there's an ill-documented option for it to allow certain test 
to fail by design, for unimplemented features and the like. 
</P>

<P>
This led to a discussion about how exactly to write the test, closures vs. 
if/then vs. CODE references, which seems to have come to this conclusion:
<blockquote></P>

<P>
Michael: Okay, we'll file this discussion under YMMV.
</P>

<P>
Barrie: That's my point.  Your style isn't the only one out here.
</blockquote><H3><a name="String_Encoding">String Encoding</a></H3>

</P>

<P>

(Thanks again to Woodrow Hill)
</P>


<P>
Character representations in Perl 6
</P>

<P>
Hong Zhang started out the thread with:
<blockquote></P>

<P>
I want to give some of my thougts about string encoding...
Personally I like the UTF-8 encoding.
...
The new style will be strange, but not very difficult to
use. It also hide the internal representation.
</P>

<P>
The UTF-32 suggestion is largely ignorant to internationalization.
Many user characters are composed by more than one unicode code
point. If you consider the unicode normalization, canonical form,
hangul conjoined, hindic cluster, combining character, varama,
collation, locale, UTF-32 will not help you much, if at all.
</blockquote></P>

<P>
Simon pointed out that the general direction for Perl 6 currently seemed to 
point towards the use of codepoints instead of an internal UTF-8 
representation, for simplicity of tracking character positions, amongst 
other issues. Hong disagreed, and thus began a interesting little set of 
emails concerning the use of UTF-8, 16, or 32 vs. codepoints in Perl, the 
efficiency of determining the position of a character in Perl using the 
various encoding schemes, and so on. As Dan would maintain:
</P>

<P><blockquote>
To find the character at position 233253 in a variable-length encoding 
requires scanning the string from the beginning, and has a rather 
significant potential cost. You've got a test for every character up to 
that point with a potential branch or two on each one. You're guaranteed to 
blow the heck out of your processor's D-cache, since you've just waded 
through between 200 and 800K of data that's essentially meaningless for the 
operation in question.
</blockquote></P>

<P>
And Simon commented, towards the end of this thread, that:
</P>

<P><blockquote>
I think you're confused. Codepoints *are* characters. Combining characters 
are taken care of as per the RFC.
</blockquote></P>

</P>
         The commentary seemed to end with Hong restating his basic 
position for the record, that UTF-8 was the way to go, and Dan's response:


<P><blockquote>
Um, I hate to point this out, but perl isn't going to have a single string 
encoding. I thought you knew that.
</blockquote><H3><a name="Various">Various</a></H3>


<P>

Branden tried to bring up the deadly 
<CODE>|||</CODE> operator again. This did not go down well. Ziggy suggested a PDD to
document all the hoary old crap that we don't want to drag up again.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Garbage_Collection">Garbage Collection</a>
  <li><a href="#More_end_of_scope_actions">More end of scope actions</a>
  <li><a href="#Quality_Assurance">Quality Assurance</a>
  <li><a href="#String_Encoding">String Encoding</a>
  <li><a href="#Various">Various</a>
</ul>

