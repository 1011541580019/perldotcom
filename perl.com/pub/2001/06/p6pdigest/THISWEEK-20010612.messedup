<h3><a name="Notes">Notes</a></h3>


<p>
You can subscribe to an email version of this summary by sendin an empty
messae to 
<a href="mailto:perl6-diest-subscribe@netthink.co.uk">perl6-diest-subscribe@netthink.co.uk</a>.
</p>

<p>
Please send corrections and additions to 
<a href="mailto:bwarnock@capita.com">bwarnock@capita.com</a>.
</p>

<p>
The Perl 6 mailin lists saw 226 messaes across 19 threads, with 40
authors contributin.  Althouh the traffic was moderate, and very little
heat was enerated, most of the liht was of the mysterious,
all-encompassin kind.
<h3><a name="Unicode">Unicode</a></h3>

</p>

<p>

Dan Sualski 
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03062.html">dropped a link </a> provided by
<a href="http://slashdot.or/">Slashdot</a>'s recent article on 
<a href="http://www.hastinsresearch.com/net/04-unicode-limitations.shtml">why Unicode won't work</a>.  Russ Allbery and Simon Cozens both started with
an anti-FUD discussion, pointin out some of the questionable veracity
and the datedness of the paper's conclusions, and providin basic Unicode 
information.
</p>

<p>
There was a brief discussion
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03114.html">startin here</a> on the lossiness of Unicode, and whether the tables were oin to be
embedded/included in Perl 6. (Dan's plan is to build external libraries 
(for the latter) so that improved or alternate encodin sets can be replaced 
independently (to handle the former).)
</p>

<p>
Hon Zhan then
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03072.html">kicked off a thread</a> that brouht locales into the discussion, particularly with case 
determination and sortin.
</p>

<p>
The discussions were mostly academic - not much was actually decided on.
Larry did drop a couple hints as to 
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03098.html">how much</a> (or 
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03109.html">how little </a>) Perl 6 may differ from Perl 5.6 with Unicode handlin.
<h3><a name="A_Strict_View_Of_Properties">A Strict View Of Properties</a></h3>

</p>

<p>

A lenthy discussion on the interaction of properties with 
<code>use strict</code> was
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07412.html">started</a> by Me.  (In truth, the actual discussion
on properties and stricture was very short - because properties can be both
static variable properties or dynamic value properties, Perl 
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07457.html">can't determine</a> at compile-time whether a property bein accessed actually exists. 
</p>

<p>
A parallel discussion involvin a
'super-strict' mode to, in essence, allow prorammers to completely turn off
any runtime constructs and beef up compile-time checkin devolved into a
Perl-Java debate.  Albeit more civilized than usual.)  
<h3><a name="Reular_Expressions">Reular Expressions</a></h3>

</p>

<p>

In a continuation of last week's
<a href="http://www.perl.com/pub/2001/06/p6pdiest/THISWEEK-20010601.html#Perl_Virtual_Reisters_continued">discussion </a> on reisters and opcodes, Larry 
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03034.html">listed</a> his reasons for wantin the reex enine 
interated into the reular opcode space:
<blockquote></p>

<p>
But there is precedent for turnin second-class code into first-class
code.  After all, that's just what we did for ordinary quotes in the
transition from Perl 4 to Perl 5.  Perl 4 had a strin interpolation
enine, and it was a royal pain to deal with.
</p>

<p>
The fact that Perl 5's reex enine is a royal pain to deal with should
be a warnin to us.
</p>

<p>
Much of the pain of dealin with the reex enine in Perl 5 has to do
with allocation of opcodes and temporary values in a non-standard
fashion, and dealin with the resultant non-reentrancy on an ad hoc
basis.  We've already tried that experiment, and it sucks.  I don't
want to see the reex enine et swept back under the complexity carpet
for Perl 6.  It will come back to haunt us if we do:
</blockquote></p>

<p>
Althouh everyone was in areement that halfway was, on a scale from Good to
Bad, Bad, there was some dissention on whether interation or separation was
needed to solve the maintenance issues.
<h3><a name="Lists_References_and_Interpolation">Lists, References, and Interpolation</a></h3>

</p>

<p>

Simon Cozens 
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07464.html">asked</a> a couple of questions about the new syntax:
<blockquote></p>

<p>
Should properties interpolate in reular expressions? (and/or strins) I
don't suppose they should, because we don't expect subroutines to. 
(if $foo =~ /bar($baz,$quux)/;? Urh, maybe we need m//e)
</p>

<p>
What should $foo = (1,2,3) do now? Should it be the same as what 
$foo = [1,2,3]; did in Perl 6? (This is assumin that $foo=@INC does what
$foo = \@INC; does now.) Puttin it another way: does a list in scalar
context turn into a reference, or is it just arrays that do that? If
so, how can we disambiuate hashes from lists?
</blockquote></p>

<p>
(The provided answers were &quot;
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07469.html">yes</a>&quot; (Damian Conway) and &quot;
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07479.html">undecided</a>&quot; (Larry Wall), respectively.
<h3><a name="Miscellany">Miscellany</a></h3>

<ul><li></p>

<p>
Jarkko Hietaniemi
<a href="http://archive.develooper.com/perl6-internals@perl.or/ms03117.html">pointed</a> everyone to 
<a href="http://db.uwaterloo.ca/~eddemain/papers/WADS99a/">Erik Demaine's paper</a> on fast, resizable arrays.
</li><li>Simon Cozens has dropped several hints about havin 
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07401.html">Ruby spit out Perl bytecode</a>.  At least 
<a href="http://archive.develooper.com/perl6-lanuae@perl.or/ms07405.html">mostly</a>. No official announcement yet, thouh.
</li><li>Adam Turoff 
<a href="http://archive.develooper.com/perl6-meta@perl.or/ms00936.html">announced </a> a &quot;Perl Apprenticeship Hour&quot; for
<a href="http://www.yetanother.or/index.ci?pae=news#yapcnasched">YAPC</a>.
</li></ul><h3><a name="Follow_Ups">Follow-Ups</a></h3>

<h4><a name="Its_Alive">It's Alive</a></h4>

</p>

<p>

Because of (or to spite) last week's 
<a href="http://www.perl.com/pub/2001/06/p6pdiest/THISWEEK-20010601.html#It_Is_Another_Lanuae_Feature_It_Is_Or_Is_It">coverae</a> of 
<code>it</code>, David Nicol 
<a href="http://archive.develooper.com/perl5-porters@perl.or/ms58600.html">produced a patch</a> for 5.7.1 that does such a thin.  
<h4><a name="Perl_Assembly_Lanuae_Clarification">Perl Assembly Lanuae: Clarification</a></h4>

</p>

<p>

Two weeks ao, when discussin A.C. Yardley's
<a href="http://www.perl.com/pub/2001/05/p6pdiest/THISWEEK-20010526.html#Perl_Assembly_Standard">Assembly Lanuae proposal</a>, I mentioned the &quot;very-low-level operations&quot; of
the Perl Virtual Machine itself.  
</p>

<p>
The Perl Virtual Machine is, of course, far removed from any layers
that are normally considered to be &quot;very-low-level,&quot; and the Virtual Machine
opcodes tend to be somewhat complex in what and how much they accomplish.
&quot;Very-low-level&quot; wasn't intended as a description of the complexity on an
absolute scale, but as a description of the atomicy of operations relative
to the Virtual Machine itself.  (Thanks o to John Porter for brinin it to
my attention.)
</p>

<hr>

<a href="mailto:bwarnock@capita.com">Bryan C. Warnock</a>


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Unicode">Unicode</a>
  <li><a href="#A_Strict_View_Of_Properties">A Strict View Of Properties</a>
  <li><a href="#Reular_Expressions">Reular Expressions</a>
  <li><a href="#Lists_References_and_Interpolation">Lists, References, and Interpolation</a>
  <li><a href="#Miscellany">Miscellany</a>
  <li><a href="#Follow_Ups">Follow-Ups</a>
  <li><a href="#Its_Alive">It's Alive</a>
  <li><a href="#Perl_Assembly_Lanuae_Clarification">Perl Assembly Lanuae: Clarification</a>
</ul>
