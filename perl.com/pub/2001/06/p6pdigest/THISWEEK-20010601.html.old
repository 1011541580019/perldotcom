
<!-- This Week in Perl 6 (27 May - 2 June 2001) -->

<br />
<!::field::date::><br />
      3 June 2001
<H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an empty 
message to
<a href="mailto:perl6-digest-subscribe@netthink.co.uk">perl6-digest-subscribe@netthink.co.uk</a>.
</P>

<P>
Please send corrections and additions to 
<CODE>perl6-thisweek-YYYYMM@simon-cozens.org</CODE>, where 
<CODE>YYYYMM</CODE> is the current year and month.
</P>

<P>
It was a quiet week, with a mere 92 messages across 3 of the mailing lists.
There were 9 threads, with 27 authors contributing.  3 threads generated 
71 of the messages.  
<H3><a name="Perl_Virtual_Registers_continued">Perl Virtual Registers (continued)</a></H3>

</P>

<P>

Dan Suglaski
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02983.html">summed up</a> his thoughts on the previous week's register discussion.
<blockquote></P>

<P>
1) The paired register thing's silly. Forget I mentioned it.
</P>

<P>
2) The interpreter will have some int, float, and string registers. Some 
stuff will be faster because of it, and it'll make the generated TIL or C 
code (when we do a TILperl or perl2c version) faster since we won't need to 
call opcode functions to add 3 and 4 together...
</P>

<P>
3) Whether the registers are really stack-based or not's an implementation 
detail. They'll be based off of some per-interpreter thing, of course, 
so'll be thread-local
</P>

<P>
4) We will have some sort of register push/pop system independent of the 
register implementation. (Probably, like the 68K family, with the ability 
to move multiple registers in one go)
</P>

<P>
5) The bytecode should be really, really close to the final executable 
form. I'd really like to be able to read in the bytecode in one big chunk 
and start executing it without change. (We'll end up with some sections 
that'll need to be changed--that's inevitable. If we can mmap in the 
non-fixup section pieces, though, that'd be great)
</P>

<P>
6) We may formally split the registers used to pass parameters from the 
working registers. I'm not sure if that'll ultimately be a win or not. (I 
can forsee lots of pointless register-&gt;register moving, and I'm not keen on 
pointless anything)
</blockquote></P>

<P>
This spawned various discussions on several issues:
<ul><li>8-bit versus 16-bit opcodes, with 8-bit opcodes having an escape opcode to
access extended opcode features.  The 8-bit with escapes scheme
appears to be the winner.
</li><li>CISC-style (high-level) versus RISC-style (low-level) opcodes.  
Various tradeoffs were discussed, including byte-bloat, processing speed,
and ease of translation to other backends.  No consensus has been reached yet.
</li><li>Pure register versus register/stack hybrid.  (In reality, even the pure
register scheme is a register/stack hybrid - the question is how much
stack play should be involved.)  No real consensus on this one, either.
</li><li>Variable argument opcodes and how to handle them.  It wasn't expected that
any opcodes should not know how many args it was getting passed, but if the
situation ever arose, Dan suggested the varargness be buried a layer deeper,
and the opcode itself can simply take a single argument - that of the 
register containing a list of arguments.
</li></ul><H3><a name="Coding_Conventions_Revisited">Coding Conventions Revisited</a></H3>

</P>

<P>

Dave Mitchell 
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02982.html">posted</a> his revised draft of the &quot;Conventions and Guidelines for Perl Source 
Code&quot; PDD.  The revision was generally accepted (save a brief foray into 
some standard (but relatively tame) tabs and spaces and brace alignment
discussions), and the official PDD Proposal should be forthcoming shortly.
<H3><a name="NET">.NET</a></H3>

</P>

<P>

A.C. Yardley 
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02978.html">pointed</a> out some technical documents on .NET as an FYI.  (The links were to
<a href="http://citeseer.nj.nec.com/gordon00typing.html">here</a> and
<a href="http://msdn.microsoft.com/net/ecma/">here</a>.)
<H3><a name="It_Is_Another_Language_Feature_It_Is_Or_Is_It">It Is Another Language Feature, It Is, Or Is It?</a></H3>

</P>

<P>

David L. Nicol 
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07376.html">mused</a> about a new magical variable 
<CODE>it</CODE> that automatically refers to the last lexically used variable (or perhaps 
the last variable used as the target of 
<CODE>defined</CODE> or
<CODE>exists</CODE>).  Most folks found it (in both senses of the word) too troublesome and 
ambiguous.
<H3><a name="Status_of_the_Perl_6_Mailing_Lists">Status of the Perl 6 Mailing Lists</a></H3>

</P>

<P>

There have been, to date, 28 different mailing lists associated with the 
Perl 6 development effort - a list that seems most daunting at first.  
That list has now been reduced to eight &quot;open&quot; lists that are currently in
use.  (The previous lists may be reopened at a later date, and new ones may
be created.  Annoucements will be made in the usual fashion on
<CODE>perl6-announce</CODE>.)  Subscription instructions and links to the archives can be found
<a href="http://dev.perl.org/lists">here</a>.
</P>

<P>
The currently active lists dedicated to Perl 6 are 
<CODE>-all</CODE>, 
<CODE>-announce</CODE>, 
<CODE>-build</CODE>, 
<CODE>-internals</CODE>, 
<CODE>-language</CODE>, 
<CODE>-meta</CODE>, and
<CODE>-stdlib</CODE>.
</P>

<P>
The last list,
<CODE>perl-qa</CODE>, is involved in quality assurance for Perl in general, so it is also 
included as a Perl 6 development list.
</P>

<hr>

<a href="mailto:bwarnock@capita.com">Bryan C. Warnock</a>


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Perl_Virtual_Registers_continued">Perl Virtual Registers (continued)</a>
  <li><a href="#Coding_Conventions_Revisited">Coding Conventions Revisited</a>
  <li><a href="#NET">.NET</a>
  <li><a href="#It_Is_Another_Language_Feature_It_Is_Or_Is_It">It Is Another Language Feature, It Is, Or Is It?</a>
  <li><a href="#Status_of_the_Perl_6_Mailing_Lists">Status of the Perl 6 Mailing Lists</a>
</ul>
