
<!-- This Week in Perl 6 (20 May - 26 May 2001) -->

<br />
<!::field::date::><br />
<H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an empty 
message to
<a href="mailto:perl6-digest-subscribe@netthink.co.uk">perl6-digest-subscribe@netthink.co.uk</a>.
</P>

<P>
Please send corrections and additions to 
<CODE>perl6-thisweek-YYYYMM@simon-cozens.org</CODE>, where 
<CODE>YYYYMM</CODE> is the current year and month.
<H3><a name="Perl_Assembly_Language_Standard">Perl "Assembly Language Standard"</a></H3>

</P>

<P>

A.C. Yardley 
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02940.html">submitted </a> a proposal for documenting PDDs with the very-low-level operations of the 
 Perl Virtual Machine itself.  (This is a separate idea from the assembly 
language that
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02946.html">will also be written</a>.)  A.C. will continue to work on it.
<H3><a name="The_Perl_Apprenticeship_Program_Revisted">The "Perl Apprenticeship Program" Revisted</a></H3>

</P>

<P>

A.C. Yardley also
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02941.html">revisited</a> an 
<a href="http://archive.develooper.com/perl6-meta@perl.org/msg00584.html">old thread</a> about a Perl Apprenticeship Program.  
</P>

<P>
Nat Torkington:
<blockquote>Not to speak for Dan, but there's no code yet to review or learn from.
I'd love to see someone set up a perl *5* apprentice program, and
Mark-Jason Dominus has some ideas on how it might work.  For perl6,
though, we're not yet at a place where I think it makes sense.  Right
now there's so little defined in the way of implementation, that
questions can be asked and answered on the mailing list.
</blockquote></P>

<P>
Simon, however,
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02943">felt</a> that the group was almost at the point where some coding could start, and
suggested that folks whisk through the 
<CODE>sv.c</CODE>, 
<CODE>av.c</CODE>, and 
<CODE>hv.c</CODE> Perl 5 code (describing scalar, array, and hash functionalities,
respectively) to summarize what actually needs to be implemented.
</P>

<P>
Dave Mitchell and A.C. Yardley accepted the challenge.
<H3><a name="Perl_Virtual_Registers">Perl Virtual Registers</a></H3>

</P>

<P>

Dan Sugalski
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02948">pushed for</a> a register-based Virtual Machine, vice a stack-based machine, with little
real dissention on that point.  Dan, however, wanted typed and linked
registers, but opinions were mixed on having typed registers, and generally
opposed to having them linked.
</P>

<P>
Uri Guttman and Nick Ing-Simmons then took over the thread to banter about
dealing with the stack/register window that will be necessary with threads
and register overflows.
</P>

<P>
Here's a snippet from 
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02976.html">Uri's last response</a>:
<blockquote><pre>NI&gt; That makes sense if (and only if) virtual machine registers are real 
NI&gt; machine registers. If virtual machine registers are in memory then 
NI&gt; accessing them &quot;on the stack&quot; is just as efficient (perhaps more so)
NI&gt; than at some other &quot;special&quot; location. And it avoids need for 
NI&gt; memory-to-memory moves to push/pop them when we do &quot;spill&quot;.
</pre></P>

<P>
no, the idea is the VM compiler keeps track of IL register use for the
purpose of code generating N-tuple op codes and their register
arguments. this is a pure IL design thing and has nothing to do with
machine registers. at this level, register windows don't win IMO.
</blockquote></P>

<P>
And a snippet from 
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02977.html">Nick's</a>:
<blockquote>... My point is that UNLESS machine (real) machine registers are involved 
then all IL &quot;Registers&quot; are in memory. Given that they are in memory they 
should be grouped with and addressed-via-same-base-as other &quot;memory&quot; that 
a sub is accessing. (The sub will be accessing the stack (or its PAD if 
you like), and the op-stream for sure, and possibly a few hot globals.)
</P>

<P>
The IL is going to be CISC-ish - so treat it like an x86 where 
you operate on things where-they-are (e.g. &quot;on the stack&quot;) 
<pre>   add 4,BP[4]
</pre></P>

<P>
rather than RISC where you 
<pre>   ld BP[4],X
   add 4,X
   ST X,BP[4]
</pre></P>

<P>
If &quot;registers&quot; are really memory the extra &quot;moves&quot; of a RISC scheme
are expensive.
</blockquote><H3><a name="Slices">Slices</a></H3>

</P>

<P>

Raul Miller 
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07368.html">threw out</a> some ideas about slice syntax.  There was some minor discussion centered
around whether an array index in the new syntax is in scalar or list
context by default.
</P>

<P>
This led to David Whipp
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07374.html">proposing</a> a new index context, to parallel the other contexts that Perl is aware of.
<H3><a name="Slice_References">Slice References</a></H3>

</P>

<P>

Peter Scott 
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07333.html">bridged</a> a posting from the 
<a href="http://archive.develooper.com/beginners@perl.org/">perl beginners</a> list, asking if it would be possible to allow non-copying slice references
in Perl 6.
</P>

<P>
Damian Conway, of course, said, of course, &quot;Of course&quot;:
<blockquote><pre>@A = (1..10);   # array
sub sliceref
 {my($i,$o,$k)=(0,0,pop);$i+$o-$k-&gt;[$i]?++$o&amp;&amp;splice@_,$i,1:$i++while$i&lt;@_;\@_}
my $ref = sliceref @A, [3..5,9];        # reference to slice
print &quot;@A\n&quot;;
print &quot;@$ref\n&quot;;
$ref-&gt;[1] = 99;
print &quot;@A\n&quot;;
print &quot;@$ref\n&quot;;
</pre></blockquote><H3><a name="Properties_Continued">Properties Continued</a></H3>

</P>

<P>

The head-wrapping continued on the new properties feature of Perl 6. 
Although Damian gave
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07352.html">some encouraging answers</a>, he eventually 
<a href="http://archive.develooper.com/perl6-language@perl.org/msg07354.html">posted</a>:
<blockquote>I have already been discussing this with Larry and have privately sent
him a complete proposal that, I believe, addresses all these issues.
Let's wait and see what he makes of that proposal.
</blockquote><H3><a name="The_Parrot_Squawks">The Parrot Squawks</a></H3>

</P>

<P>

There has long been confusion between Perl (the community), Perl (the
language), and 
<CODE>perl</CODE> (the program).  This is only exacerbated on the inside
with various bits and pieces of Perl's (and 
<CODE>perl</CODE>'s) guts.  Add the
complexity that Perl 6 is promising to add, and you've got a maze of twisty
little passages, all named &quot;Perl.&quot;  
</P>

<P>
Now, a while back, Larry countered a suggestion to use
<CODE>Parrot</CODE> as the project name for Perl 6 with a 
<a href="http://archive.develooper.com/perl6-language@perl.org/msg06846.html">list of codenames</a> for various pieces, but it seems that Dan has been
<a href="http://archive.develooper.com/perl6-internals@perl.org/msg02948.html">slipping it in</a> anyway.  (The name
<CODE>Parrot</CODE>, of course, is from Simon's
<a href="http://www.perl.com/pub/2001/04/01/parrot.htm">tomfoolery</a> earlier this year.)  So it seems that at least the Perl 6 internals has a new moniker.
</P>

<P>
 Until next week...
</P>

<hr>

      <a href="mailto:bwarnock@capita.com">Bryan C. Warnock</a>

<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Perl_Assembly_Language_Standard">Perl "Assembly Language Standard"</a>
  <li><a href="#The_Perl_Apprenticeship_Program_Revisted">The "Perl Apprenticeship Program" Revisted</a>
  <li><a href="#Perl_Virtual_Registers">Perl Virtual Registers</a>
  <li><a href="#Slices">Slices</a>
  <li><a href="#Slice_References">Slice References</a>
  <li><a href="#Properties_Continued">Properties Continued</a>
  <li><a href="#The_Parrot_Squawks">The Parrot Squawks</a>
</ul>
