<!-- <a name="exegesis 2">Exegesis 2</a> -->

<br />
<!::field::date::>
<p><em>exegesis: n. an interpretation and explanation of a text, esp. Holy Writ</em></p>
<p>This is the first of a series of articles paralleling Larry's ``Apocalypse''
encyclicals (it's numbered 2 to keep it in sync with those Revelations).
These articles will take each unveiled piece of the design for Perl 6 
and demonstrate the new syntax and semantics in an annotated program.</p>
<p>So, without further ado, let's write some Perl 6:</p>
<pre>
        # bintree - binary tree demo program 
        # adapted from &quot;Perl Cookbook&quot;, Recipe 11.15</pre>
<pre>
        use strict;
        use warnings;
        my ($root, $n);</pre>
<pre>
        while ($n++ &lt; 20) { insert($root, int rand 1000) }</pre>
<pre>
        my int ($pre, $in, $post) is constant = (0..2);</pre>
<pre>
        print &quot;Pre order:  &quot;; show($root,$pre);  print &quot;\n&quot;;
        print &quot;In order:   &quot;; show($root,$in);   print &quot;\n&quot;;
        print &quot;Post order: &quot;; show($root,$post); print &quot;\n&quot;;</pre>
<pre>
        $*ARGS is chomped;
        $ARGS prompts(&quot;Search? &quot;);
        while (&lt;$ARGS&gt;) {
            if (my $node = search($root, $_)) {
                print &quot;Found $_ at $node: $node{VALUE}\n&quot;;
                print &quot;(again!)\n&quot; if $node{VALUE}.Found &gt; 1;
            }
            else {
                print &quot;No $_ in tree\n&quot;;
            }
        }</pre>
<pre>
        exit;</pre>
<pre>
        #########################################</pre>
<pre>
        sub insert (HASH $tree is rw, int $val) {
            unless ($tree) {
                my %node;
                %node{LEFT}   = undef;
                %node{RIGHT}  = undef;
                %node{VALUE}  = $val is Found(0);
                $tree = %node;
                return;
            }
            if    ($tree{VALUE} &gt; $val) { insert($tree{LEFT},  $val) }
            elsif ($tree{VALUE} &lt; $val) { insert($tree{RIGHT}, $val) }
            else                        { warn &quot;dup insert of $val\n&quot; }
        }</pre>
<pre>
        sub show {
            return unless @_[0];
            show(@_[0]{LEFT}, @_[1]) unless @_[1] == $post;
            show(@_[0]{RIGHT},@_[1])     if @_[1] == $pre;
            print @_[0]{VALUE};
            show(@_[0]{LEFT}, @_[1])     if @_[1] == $post;
            show(@_[0]{RIGHT},@_[1]) unless @_[1] == $pre;
        }</pre>
<pre>
        sub search (HASH $tree is rw, *@_) {
            return unless $tree;
            return search($tree{@_[0]&lt;$tree{VALUE} &amp;&amp; &quot;LEFT&quot; || &quot;RIGHT&quot;}, @_[0])
                unless $tree{VALUE} == @_[0];
            $tree{VALUE} is Found($tree{VALUE}.Found+1);
            return $tree;
        }</pre>
<p>
<h3><a name="it's perl, jim, and quite like we know it">It's Perl, Jim, and quite like we know it</a></h3>
<p>The program gets off to a familiar start:</p>
<pre>
        use strict;
        use warnings;
        my ($root, $n);</pre>
<pre>
        while ($n++ &lt; 20) { insert($root, int rand 1000) }</pre>
<p>Nothing new here. And, in fact, despite the many new features it
illustrates, overall this program looks and feels a great deal like
Perl 5 code.</p>
<p>That shouldn't really be surprising, given that Perl 6 is growing out
the of suggestions of hundreds of devoted Perl 5 programmers, filtered
through the mind that invented Perl 5.</p>
<p>As <a href="#http://dev.perl.org/rfc/28.html">RFC 28</a> suggested, Perl is
definitely going to stay Perl.</p>
<p>
<h3><a name="any variables to declare">Any variables to declare?</a></h3>
<p>Variable declarations in Perl 6 can be as simple as those for <code>$root</code> and
<code>$n</code> above, but they can also be much more sophisticated:</p>
<pre>
        my int ($pre, $in, $post) is constant = (0..2);</pre>
<p>Here we declare three variables that share a common type (<code>int</code>) and
a common property (<code>constant</code>). Typed lexicals are a feature of Perl 5
too, but having names for Perl's built-in types is new.</p>
<p>The type specification tells the compiler that <code>$pre</code>, <code>$in</code>, and
<code>$post</code> will only ever be used to store integer values. And because <code>int</code>
is in lower-case, the specification also tells the compiler that it's
okay to optimize the implementation of the variables, because we promise
not to <code>bless</code> them or ascribe any run-time properties to them. Making
this promise and then breaking the rules later in the program will get
you a compile-time or run-time error (depending on whether the compiler
can detect the malfeasance statically).</p>
<p>If we had not been willing to live without the blessing of
<code>bless</code>-ing or the useful run-time properties of run-time properties, we
would have written:</p>
<pre>
        my INT ($pre, $in, $post) is constant = (0..2);</pre>
<p>in which case we'd get three less-optimized, but fully-functional,
Perl scalars.</p>
<p>In this particular case, the <code>int</code>/<code>INT</code> distinction makes very
little practical difference. However, there's a significant advantage
to writing:</p>
<pre>
        my int @hit_count is dim(100,366,24);</pre>
<p>compared to:</p>
<pre>
        my INT @hit_count is dim(100,366,24);</pre>
<p>and thereby replacing nearly a million chunky scalars with svelte raw integers.</p>
<p>
<h3><a name="la proprit c'est le vol">La propri&eacute;t&eacute; c'est le vol</a></h3>
<p>The <code>is constant</code> and <code>is dim</code> bits of the above declarations are
compile-time property specifications. These particular properties are
standard to Perl 6, but you can also <a href="#haven't we met before (part 1)">roll-your-own</a>. The <code>is dim</code> property tells Perl the (fixed!)
dimensions of the array in question. The <code>is constant</code> property
specifies that the preceding variables cannot be assigned to, nor have
their values otherwise modified, once they're initialized.</p>
<p>Moreover, the <code>constant</code> property is a hint to the compiler that it
may be able to optimize the variables right out of existence, by
inlining their values directly. Of course, that's only feasible if we
don't ever treat them like a real variable (e.g. take a reference to
them, or bless them).</p>
<p>The <code>is</code> keyword is optional where its absence is unambiguous, so
we could have written:</p>
<pre>
        my int ($pre, $in, $post) constant = (0..2);</pre>
<p>Larry's also still mulling over a suggestion that <code>are</code> be
provided as a synonym for <code>is</code>, so you might even be able to write
the declaration as:</p>
<pre>
        my int ($pre, $in, $post) are constant = (0..2);</pre>
<p>An important feature of the <code>is</code> operator that we'll make use of
shortly, is that it returns its <em>left</em> operand. So:</p>
<pre>
        $submarine is Colour('yellow')</pre>
<p>evaluates to <code>$submarine</code>, not <code>'yellow'</code>.</p>
<p>
<h3><a name="more of the same">More of the same</a></h3>
<p>The three calls to <code>show</code> are also exactly as they were in Perl 5:</p>
<pre>
        print &quot;Pre order:  &quot;; show($root,$pre);  print &quot;\n&quot;;
        print &quot;In order:   &quot;; show($root,$in);   print &quot;\n&quot;;
        print &quot;Post order: &quot;; show($root,$post); print &quot;\n&quot;;</pre>
<p>Happily, we're going to see that a lot throughout this series of articles.</p>
<p>
<h3><a name="biting off less so you can chew">Biting off less so you can chew</a></h3>
<p>Do you ever get tired of writing:</p>
<pre>
        while (&lt;&gt;) {            # Common Perl 5 idiom
                chomp;
                ...</pre>
<p>Wouldn't it be nice if input lines were automatically chomped? In Perl 6,
they can be. We just set the <code>chomped</code> property on the input handle referred
to by the global variable <code>$*ARGS</code>:</p>
<pre>
        $*ARGS is chomped;</pre>
<p>This causes any normal read on the handle (see <a href="#inputs that output">Inputs that output</a>)
to automatically pre-<code>chomp</code> the string it returns. Of course, like
most other global punctuation variables, <code>$/</code> has been banished from
Perl 6, so the trailing character sequence to be chomped is specified by the
handle's own <code>insep</code> (<strong>in</strong>put <strong>sep</strong>arator) property instead.</p>
<p>The asterisk in <code>$*ARGS</code> indicates that the variable is the one from
the special global namespace. If the asterisk is omitted, it's
probably <em>still</em> the one from the special global namespace -- unless you
declared a lexical or package variable of the same name. You can pronounce
<code>*</code> as ``standard'', if that helps.</p>
<p>By the way, it's called <code>$*ARGS</code> because it lets us access the files passed
as a Perl 6 program's <em>arguments</em> (just as the Perl 5 <code>ARGV</code> filehandle 
provides access to the program's...err...<em>argumentv</em>).</p>
<p>
<h3><a name="inputs that output">Inputs that output</a></h3>
<p>In the original <a href="http://www.oreilly.com/catalog/cookbook/"><em>Cookbook</em></a>
version of this program, the next line was:</p>
<pre>
        for (print &quot;Search? &quot;; &lt;&gt;; print &quot;Search? &quot;) {</pre>
<p>This highlights a common situation for which there is no satisfactory
solution in Perl 5. Namely: repeatedly prompting for input and reading
it into <code>$_</code>, until EOF. In Perl 6, there's finally a clean way to do
this -- with another property:</p>
<pre>
        $ARGS prompts(&quot;Search? &quot;);
        while (&lt;$ARGS&gt;) {</pre>
<p>The first thing you'll notice is that reports of the diamond operator's
death have been greatly exaggerated. Yes, even though the Second
Apocalypse foretold its demise, Rule #2 has since been applied and the
angle brackets live!</p>
<p>Of course, they're slightly different in Perl 6, in that they <em>require</em> a
handle object inside them (normally stored in a variable), but that's
already possible in Perl 5 too.</p>
<p>Meanwhile, what about that prompt? Well, the Perl 6 solution is to allow
input handles to have an associated character string that they print out
just before they attempt to read in data.</p>
<p><em>Wait a minute!</em>, I hear you object, <em>Input handles that do output???</em>
Actually, you've been using handles like that for decades. In most
languages, every time you do a read from standard input, the first thing
the input operation does is flush the standard output buffer. That's why
something like:</p>
<pre>
        print &quot;nuqneH? &quot;;
        $request = &lt;&gt;;</pre>
<p>pre-prints the prompt correctly, even though it doesn't end in a newline.</p>
<p>So input and output mechanisms are already carrying on a secret relationship.
The only change here is that now you're allowed to have the input
handle add a little something to the output before it flushes the buffer.
That's done with the <code>prompts</code> property. If an input handle has that property,
its value is written to <code>$*OUT</code> just before the input handle reads. So
we can replace:</p>
<pre>
        for (print &quot;Search? &quot;; &lt;&gt;; print &quot;Search? &quot;;) {         # Perl 5 (or 6)</pre>
<p>with</p>
<pre>
        $ARGS prompts(&quot;Search? &quot;);                              # Perl 6
        while (&lt;$ARGS&gt;) {</pre>
<p>Technically, that should of course be:</p>
<pre>
        $ARGS is prompts(&quot;Search? &quot;);</pre>
<p>but that grates unbearably. Fortunately the <code>is</code> is optional in
contexts -- such as this one -- where it can be inferred.</p>
<p>Note that, because the <code>is</code> operation returns its <code>left</code> operand (even
when the <code>is</code> is invisible!), we could also use the rather elegant:</p>
<pre>
        while (&lt;$ARGS prompts(&quot;Search? &quot;)&gt;) {</pre>
<p>In fact, this one-line version may often be preferable, since the value
of the <code>prompts</code> property might be changed somewhere inside the loop
and this resets it on each iteration.</p>
<p>The exact semantics of the prompting mechanism aren't nailed down yet, so it
may also be possible to use a subroutine reference as a dynamic prompt (the
handle would call the subroutine before each read and pre-print the return
value).</p>
<p>
<h3><a name="haven't we met before (part 1)">Haven't we met before? (part 1)</a></h3>
<p>Having requested and read in a value, the search-and-report code is almost
entirely familiar:</p>
<pre>
            if (my $node = search($root, $_)) {
                print &quot;Found $_ at $node: $node{VALUE}\n&quot;
                print &quot;(again!)\n&quot; if $node{VALUE}.Found &gt; 1;
            }
            else {
                print &quot;No $_ in tree\n&quot;
            }
        }</pre>
<p>The only lurking Perl6ism is the use of the user-defined <code>Found</code>
property to report repeated searches.</p>
<p>The call to <code>$node{VALUE}.Found</code> would normally be a method call (in Perl 6
<code>-&gt;</code> is spelled <code>.</code>). But since <code>$node{VALUE}</code> is just a regular
unblessed int, there is no <code>Found</code> method to call. So Perl treats the request
as a property query instead and returns (an alias to) the
corresponding property.</p>
<p>
<h3><a name="take that! and that!">Take that! And that!</a></h3>
<p>In Perl 6, subroutines can -- optionally -- specify proper parameter
lists (as opposed to the not-evil-just-misunderstood argument context
prototypes that Perl 5 allows).</p>
<p>For instance the <code>insert</code> subroutine, declares itself to take two
parameters:</p>
<pre>
        sub insert (HASH $tree is rw, int $val) {</pre>
<p>The first parameter specifies that the first argument must be a
reference to a hash and is to be assigned to the lexical variable
<code>$tree</code>. Defining the first parameter to be a hash reference means that
any attempt to use it in some other way (e.g. trying to do an subroutine
call through it, trying to pass it an explicit array reference, etc.)
can be caught and punished -- at compile-time.</p>
<p>It's important to understand that, by default, named parameters are
<em>not</em> like the elements of <code>@_</code>. Specifically, even though each
argument is passed to its corresponding parameter by reference (for
efficiency), the parameter variable itself is automatically declared
<code>constant</code>, so any attempt to assign to it results in a compile-time
error. This is intended to reduce the incidence of people accidentally
people shooting themselves in the foot.</p>
<p>Of course, this being Perl, when we really do need to draw a bead on
those metatarsals, we can. To allow assignments to a named parameter --
assignments that <em>will</em> propagate back to the original argument -- we
need to to declare the parameter with the standard <code>rw</code> (<strong>r</strong>ead-<strong>w</strong>rite)
property. It then becomes an fully assignable alias for the original
argument, which in this example allows us to autovivify it (see <a href="#we don't need no stinking backslashes">We don't need no stinking backslashes</a>).</p>
<p>The <code>@_</code> argument array <em>is</em> still available in Perl 6, but only when
we declare subroutines in the Perl 5 manner -- without a parameter list.
See <a href="#a good, oldfashioned show">A good, old-fashioned show</a>).</p>
<p>The second parameter of <code>insert</code> is defined to take an integer value.
By using the type <code>int</code> instead of <code>INT</code>, we're once again explicitly
promising not to do bizarre things with the referent (at
least, not within the body of <code>insert</code>). The compiler might be able to
use this information to optimize the subroutine's code in some way.</p>
<p>
<h3><a name="a sigil is for life, not just for value type">A sigil is for life, not just for value type</a></h3>
<p>Long ago, when the Earth was new and Perl was young and clean, the type of
sigil (<code>$</code>, <code>@</code>, or <code>%</code>) that was associated with a variable
described what it evaluated to. For example:</p>
<pre>
        print $x;                       # $x evaluates to scalar
        print $y[1];                    # $y[1] evaluates to scalar
        print $z{a};                    # $z{a} evaluates to scalar
        print $yref-&gt;[1];               # $yref-&gt;[1] evaluates to scalar
        print $zref-&gt;{a};               # $zref-&gt;{a} evaluates to scalar
        print @y;                       # @y evaluates to list
        print @y[2,3];                  # @y[2,3] evaluates to list
        print @z{'b','c'};              # @z{'b','c'} evaluates to list
        print @{$yref}[2,3];            # @{$yref}[2,3] evaluates to list
        print @{$zref}{'b','c'};        # @{zyref}{'b','c'} evaluates to list
        print %z;                       # %z evaluates to hash</pre>
<p>Regardless of the actual type of the variable being referred to, a leading
<code>$</code> on the access meant the result would be a scalar; a leading <code>@</code> meant
a list; a leading <code>%</code>, a hash.</p>
<p>But then the serpent of OO entered the garden, and offered Perlkind the
bitter fruit of subroutine and method calls:</p>
<pre>
        print $subref-&gt;();
        print $objref-&gt;method();</pre>
<p>Now the leading <code>$</code> no longer indicated the type of value returned.
And in beginners' Perl classes across the land there arose a great
wailing and a gnashing of teeth.</p>
<p>Perl 6 returns us to a state of grace -- albeit a state of <em>different</em>
grace --in which each variable type has One True Sigil, from which it
never strays.</p>
<p>In Perl 6, a scalar <em>always</em> has a leading <code>$</code>, an array <em>always</em> has
a leading <code>@</code> (even when accessing its elements or slicing it), and a
hash <em>always</em> has a leading <code>%</code> (even when accessing its entries or
slicing it).</p>
<p>In other words, the sigil no longer (sometimes) indicates the type of
the resulting value. Instead, it (always) tells you exactly what kind
of variable you're messing about with, regardless of what 
kind of messing about you're doing.</p>
<p>The <code>insert</code> subroutine has several examples of this new syntax. The most
obvious are in the autovivification of an empty subtree at the start of the
subroutine:</p>
<pre>
            unless ($tree) {
                my %node;
                %node{LEFT}   = undef;
                %node{RIGHT}  = undef;
                %node{VALUE}  = $val</pre>
<p>Even though we're accessing the <code>%node</code> hash's entries, the variable
retains its <code>%</code> sigil and the hash access braces are simply appended to
the complete variable name.</p>
<p>Likewise, to access the element of an array, we simply append the
array-access square brackets to the variable name: <code>@array[1]</code>. This is
a significant departure from Perl 5 syntax. In Perl 5, <code>@array[1]</code> is a
one-element slice of the <code>@array</code> array; in Perl 6, it's a direct single
element access (no slicing involved).</p>
<p>This means, of course, that Perl 6 will require some revised
array-slicing semantics. Larry's planning to take that opportunity to
beef up Perl's slicing facilities and provide for arbitrary slicing and
dicing of multidimensional arrays. But that's for a future Apocalypse.</p>
<p>For the time being, it's enough to know that, if you put a single scalar 
in the square brackets, you get a single element look-up; if you
put a list in the brackets, you get a slice.</p>
<p>
<h3><a name="haven't we met before (part 2)">Haven't we met before? (part 2)</a></h3>
<p>The last assignment to a <code>%node</code> entry has one other little twist.
The (copy of the) value being assigned is also ascribed a <code>Found</code> property,
initialized to the value zero:</p>
<pre>
                %node{VALUE}  = $val is Found(0);</pre>
<p>Once again, that works because, when a property is set using <code>is</code>, the
result of the operation is the left operand (in this case <code>$val</code>),
<em>not</em> the new value of the property.</p>
<p>Indeed, although we glossed over it at the time, that's the only reason the:</p>
<pre>
        while (&lt;$ARGS prompts(&quot;Search? &quot;)&gt;) {</pre>
<p>syntax actually worked. The expression <code>$ARGS prompts(&quot;Search? &quot;)</code> set
the handle's prompt, and then returned <code>$ARGS</code>, which became the
operand of the diamond operator, resulting in a prompt-and-read
operation through that handle.</p>
<p>
<h3><a name="we don't need no stinking backslashes">We don't need no stinking backslashes</a></h3>
<p>Once the new <code>%node</code> is initialized, a reference to it needs to be
assigned to the variable that was passed as the first argument (if it's
not clear why, see section 12.3.2 of
<a href="http://www.manning.com/conway/"><em>Object Oriented Perl</em></a> for a
detailed explanation of this tree-manipulation technique).</p>
<p>In Perl 5, modifying an original argument would require an
assignment to <code>$_[0]</code> (i.e. <code>@_[0]</code> in Perl 6), but because we
declared <code>$tree</code> to be <code>rw</code>, we can assign directly to it and have the
original argument change appropriately:</p>
<pre>
                $tree = %node;</pre>
<p><em>Oops,</em> (you're probably thinking), <em>he just fell victim to one of the
Classic Blunders: In a scalar context, a hash evaluates to the ratio of 
used buckets to allocated buckets!</em></p>
<p>In Perl 5 maybe, but in Perl 6 that near-useless behaviour has gone the
way of the powdered wigs, buggy whips, and DSL providers. Instead, when
evaluated in a scalar context, a hash (or an array) returns a reference to
itself. So the above line of code works correctly.</p>
<p><em>Okay,</em> (you're now wondering), <em>if arrays do that too, how do I get
the length of an array???</em> The answer is that in a numeric context an
array reference now evaluates to the length of the array. So the
translation of the Perl 5 code:</p>
<pre>
        while (@queue &gt; 0) {    # scalar eval of @queue yields length</pre>
<p>is:</p>
<pre>
        while (@queue &gt; 0) {    # scalar eval of @queue yields ref to array
                                # ref to array in numeric context yields length</pre>
<p>Similarly, in a boolean context, an array evaluates true if it contains any
elements, so the translation of the Perl 5 code:</p>
<pre>
        while (@queue) {    # scalar eval of @queue yields length</pre>
<p>is:</p>
<pre>
        while (@queue) {    # boolean eval of @queue yields true if not empty</pre>
<p>Cunning, huh?</p>
<p>
<h3><a name="you say %node{value}, but i say $tree{value}">You say <code>%node{VALUE}</code>, but I say <code>$tree{VALUE}</code></a></h3>
<p>When we were loading up the new node, we wrote <code>%node{VALUE}</code> to access
its <code>'VALUE'</code> entry. Now that <code>$tree</code> holds a reference to <code>%node</code>,
we need some way of accessing the same entry.</p>
<p>In Perl 5 that would be:</p>
<pre>
        $tree-&gt;{VALUE}        # Perl 5 entry access through hash ref in $tree</pre>
<p>And since <code>-&gt;</code> is spelled <code>.</code> in Perl 6, that becomes:</p>
<pre>
        $tree.{VALUE}         # Perl 6 entry access through hash ref in $tree</pre>
<p>However, since the direct hash access syntax now uses a completely different
sigil -- <code>%node{VALUE}</code> -- the <code>.</code> isn't needed for disambiguation there
and hence can be made optional:</p>
<pre>
        $tree{VALUE}          # Perl 6 entry access through hash ref in $tree</pre>
<p>And that's the usual way accesses to hash references will be written:</p>
<pre>
            if    ($tree{VALUE} &gt; $val) { insert($tree{LEFT},  $val) }
            elsif ($tree{VALUE} &lt; $val) { insert($tree{RIGHT}, $val) }
            else                        { warn &quot;dup insert of $val\n&quot; }
        }</pre>
<p>This is actually far <em>less</em> confusing than it might at first seem.
For example, back in <a href="#haven't we met before (part 1)">Haven't we met before? (part 1)</a>, did you
notice that:</p>
<pre>
        if (my $node = search($root, $_)) {
            print &quot;Found $_ at $node: $node{VALUE}\n&quot;</pre>
<p>already used this new syntax?</p>
<p>In Perl 5 that would have been a (very common) error -- the second line
would print an entry of <code>%node</code>, when we actually wanted an entry of
<code>%{$node}</code>.  But in Perl 6, it just Does What We Mean.</p>
<p>And, of course, access through other kinds of references will also allow
the <code>.</code> to be omitted: <code>$arr_ref[$index]</code> and <code>$sub_ref(@args)</code>.</p>
<p>Here's a handy conversion table:</p>
<pre>
        Access through...       Perl 5          Perl 6
        =================       ======          ======
        Scalar variable         $foo            $foo
        Array variable          $foo[$n]        @foo[$n]
        Hash variable           $foo{$k}        %foo{$k}
        Array reference         $foo-&gt;[$n]      $foo[$n] (or $foo.[$n])
        Hash reference          $foo-&gt;{$k}      $foo{$k} (or $foo.{$k})
        Code reference          $foo-&gt;(@a)      $foo(@a) (or $foo.(@a))
        Array slice             @foo[@ns]       @foo[@ns]
        Hash slice              @foo{@ks}       %foo{@ks}</pre>
<p>
<h3><a name="a good, oldfashioned show">A good, old-fashioned show</a></h3>
<p>The <code>show</code> subroutine illustrates the optional nature of parameter
lists. Here we omit the parameter specifications entirely, and get the
good old familiar
``take-any-number-of-arguments-and-stick-them-all-in-<code>@_</code>'' semantics.</p>
<p>Indeed, apart from its DWIM-ier array access syntax, the <code>show</code> subroutine
is vanilla Perl 5:</p>
<pre>
        sub show {
            return unless @_[0];
            show(@_[0]{LEFT}, @_[1]) unless @_[1] == $post;
            show(@_[0]{RIGHT},@_[1])     if @_[1] == $pre;
            print @_[0]{VALUE};
            show(@_[0]{LEFT}, @_[1])     if @_[1] == $post;
            show(@_[0]{RIGHT},@_[1]) unless @_[1] == $pre;
        }</pre>
<p>And that, we believe, will be the normal experience when moving from 5 to 6:
Perl will still be Perl...only slightly more so.</p>
<p>Of course, the <code>show</code> subroutine is moderately funky Perl anyway,
so if symmetrically guarded repetitions of the left- and right-
subtree traversals aren't your maintenance dream, this would also be the
ideal place to use Perl's new <em>case</em> statement.</p>
<p>But that won't be unveiled until Apocalypse 4, so if you could just look
at this <a href="#http://www.meninblack.com/media/kay08.html">little red light</a>....&lt;FLASH&gt;...Thank-you.</p>
<p>
<h3><a name="search me">Search me</a></h3>
<p>The parameter list of the <code>search</code> subroutine is interesting because it's
a hybrid of the old and new Perl semantics:</p>
<pre>
        sub search (HASH $tree is rw, *@_) {</pre>
<p>Both parameter's are explicitly declared, but the second declaration
(<code>*@_</code>) causes the remaining parameters to be collected in <code>@_</code>.
There's nothing <em>magical</em> about <code>@_</code> there: if the second declaration
had been <code>*@others</code>, the rest of the arguments would have turned up in
<code>@others</code>.</p>
<p>The asterisk in the second parameter tells Perl 6 that the corresponding
argument position is a plain ol' list context, so that any arguments there (or
thereafter) should be treated as a single list and assigned to the
corresponding parameter variable. It's the equivalent of the Perl 5 <code>@</code>
prototype.</p>
<p>In contrast, a parameter declaration of <code>@param</code>, is the equivalent of
Perl 5's <code>\@</code> prototype -- and explicitly requires an array variable as
the corresponding argument.</p>
<p>Notice that, because we started collecting arguments in <code>@_</code> from the
<em>second</em> parameter, the value we're looking for (i.e. the second argument)
is referred to as <code>@_[0]</code>, not <code>@_[1]</code>:</p>
<pre>
            return search($tree{@_[0]&lt;$tree{VALUE} &amp;&amp; &quot;LEFT&quot; || &quot;RIGHT&quot;}, @_[0])
                unless $tree{VALUE} == @_[0];</pre>
<p>
<h3><a name="haven't we met before (part 3)">Haven't we met before? (part 3)</a></h3>
<p>The second last line of <code>search</code> is where all the Perl 6 action is. Having
worked out that we're already at the desired node, we're going to return it.
But we also need to increment its <code>Found</code> property, which we do like so:</p>
<pre>
            $tree{VALUE} is Found($tree{VALUE}.Found+1);</pre>
<p>This highlights two of the three ways of accessing a property:
the read-write <code>.</code> syntax, and the write-only <code>is</code> operator.</p>
<p>If a property is accessed as if it were a method,
its value can be set by passing the new value as an argument. Whether
such a value is passed or not, the result of the operation is an alias
(i.e. an lvalue) for the property itself. So we could also increment the
values's <code>Found</code> property like this:</p>
<pre>
        $tree{VALUE}.Found($tree{VALUE}.Found+1);</pre>
<p>or, like this:
</p>
<pre>

        $tree{VALUE}.Found++;</pre>
<p>The <code>is</code> syntax, on the other hand, can only set a property,
because the <code>is</code> operation returns its left operand (the referent that owns
the property), not the value of property itself. This is often highly useful,
however, for last-minute property setting in a <code>return</code> statement:</p>
<pre>
        return $result is Verified;</pre>
<p>Another very common usage is expected to be in returning zero-but-true and
non-zero-but-false values:</p>
<pre>
        sub my_system ($shell_command) {
                ...
                return $error is false if $error;
                return 0 is true;
        }</pre>
<p>The <em>third</em> way of accessing a property is via the <code>prop</code>
meta-property, which returns a reference to a hash containing all the
properties of a referent:</p>
<pre>
        $tree{VALUE}.prop{Found}++;</pre>
<p>You can also use this feature to list <em>all</em> the properties that
a referent has been ascribed:</p>
<pre>
        for (keys %{$tree.prop}) {
            print &quot;$_: $tree{VALUE}.prop{$key}\n&quot;;
        }</pre>
<p>By the way, in Apocalypse 2, Larry waggishly referred to the <code>prop</code>
meta-property as <code>btw</code>, but with the help of
<a href="#http://www.meninblack.com/media/kay08.html">modern therapeutic techniques</a>,
he's now gotten over the idea.</p>
<p>
<h3><a name="coda on an earlier theme">Coda on an earlier theme</a></h3>
<p>This article has illustrated several important new features that Perl 6
will provide. But don't let all that newness scare you. Perl has always
offered the ability to code at your own level and in the style that
suits you best. That's not going to change, even if the style that suits
you best is Perl 5.</p>
<p>Almost every new feature covered here will be <em>optional</em>, and if you
choose not to use them, you can still write the same program
in a manner that is <em>very</em> close to Perl 5. Like so:</p>
<pre>
        use strict;
        use warnings;
        my ($root, $n);</pre>
<pre>
        while ($n++ &lt; 20) { insert($root, int rand 1000) }</pre>
<pre>
        my ($pre, $in, $post) = (0..2);</pre>
<pre>
        print &quot;Pre order:  &quot;; show($root,$pre);  print &quot; \n&quot;;
        print &quot;In order:   &quot;; show($root,$in);   print &quot; \n&quot;;
        print &quot;Post order: &quot;; show($root,$post); print &quot; \n&quot;;</pre>
<pre>
        for (print &quot;Search? &quot;; &lt;$ARGS&gt;; print &quot;Search? &quot;) {
            chomp;
            if (my $node = search($root, $_)) {
                print &quot;Found $_ at $node: $node{VALUE}\n&quot;;
                print &quot;(again!)\n&quot; if $node{FOUND} &gt; 1;
            }
            else {
                print &quot;No $_ in tree\n&quot;;
            }
        }</pre>
<pre>
        exit;</pre>
<pre>
        #########################################</pre>
<pre>
        sub insert {
            unless (@_[0]) {
                @_[0] = { LEFT  =&gt; undef, RIGHT =&gt; undef,
                          VALUE =&gt; @_[1], FOUND =&gt; 0,
                        };
                return;
            }
            if    (@_[0]{VALUE} &gt; @_[1]) { insert(@_[0]{LEFT},  @_[1]) }
            elsif (@_[0]{VALUE} &lt; @_[1]) { insert(@_[0]{RIGHT}, @_[1]) }
            else                         { warn &quot;dup insert of @_[1]\n&quot;  }
        }</pre>
<pre>
        sub show  {
            return unless @_[0];
            show(@_[0]{LEFT}, @_[1]) unless @_[1] == $post;
            show(@_[0]{RIGHT},@_[1])     if @_[1] == $pre;
            print @_[0]{VALUE};
            show(@_[0]{LEFT}, @_[1])     if @_[1] == $post;
            show(@_[0]{RIGHT},@_[1]) unless @_[1] == $pre;
        }</pre>
<pre>
        sub search {
            return unless @_[0];
            return search(@_[0]{@_[1]&lt;@_[0]{VALUE} &amp;&amp; &quot;LEFT&quot; || &quot;RIGHT&quot;}, @_[1])
                unless @_[0]{VALUE} == @_[1];
            @_[0]{FOUND}++;
            return @_[0];
        }</pre>
<p>In fact, that's only 40 characters (out of 1779) from being pure Perl 5.
And almost all of those differences are <code>@</code>'s instead of <code>$</code>'s at the
start of array element look-ups.</p>
<p>98% backwards compatibility even without an automatic p52p6
translator...pretty slick!</p>

</body>

</html>
