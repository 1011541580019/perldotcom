</P>

<P>


<!-- This week on perl5-porters (06--12 Mar 2001) -->

<br />
<!::field::date::><br />
      <H3><a name="Notes">Notes</a></H3>

</P>

<P>

You can subscribe to an email version of this summary by sending an
empty message to 
<a href="mailto:perl5-porters-digest-subscribe@netthink.co.uk"><tt>perl5-porters-digest-subscribe@netthink.co.uk</tt>.</a></P>

<P>
Please send corrections and additions to 
<CODE>perl-thisweek-YYYYMM@simon-cozens.org</CODE> where 
<CODE>YYYYMM</CODE> is the current year and month. Changes and additions to the 
<a href="http://simon-cozens.org/writings/whos-who.html">perl5-porters biographies</a> are particularly welcome.
</P>

<P>
There were 424 messages this week.
<H3><a name="Pod_Questions">Pod Questions</a></H3>

</P>

<P>

As reported last week, Michael Stevens has been working away on
attempting to make the core Perl documentation 
<CODE>podchecker</CODE>-clean, and has succeeded in stopping it from emitting any errors.
However, he came up with quite a few weirdnesses. The most contentious
was the correct way to write:
</P>

</P><PRE>
     L&lt;New C&lt;qr//> operator>
</PRE>

<P>
since 
<CODE>L<></CODE> was seeing the slash and thinking it was a section/manpage separator.
<a href="http://simon-cozens.org/writings/whos-who.html#ALLBERY">Russ Allbery</a> said that the best way was
</P>

</P><PRE>
    L&lt;"New C&lt;qr//> operator">
</PRE>

<P>
but the problem with that is that the resulting reference gets quoted. 
And, in fact, 
<CODE>podchecker</CODE> was still unhappy with that. Russ said:
<blockquote>podchecker complains about all sorts of things that I consider to be
perfectly valid POD, such as the use of &lt; and &gt; in free text to mean
themselves when not preceeded by a capital letter.  I think making
podchecker smarter is the right solution. 
</blockquote></P>

<P>
But as Michael said, &quot;the problem is finding a clear definition of what
&quot;smarter&quot; actually is.&quot; 
</P>

<P>
I also complained that
</P>

</P><PRE>
    =head2 New C&lt;qr//> operator
</PRE>

<P>
was getting mangled by some parsers which didn't correctly restore
boldface after the code section. The example I gave, 
<CODE>pod2man</CODE>, seemed to be due to a buggy set of roff macros. 
</P>

<P>
Rob Napier came up with some 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-03/msg00365.html">truly excellent</a> suggestions about the future of POD and how to make it more intuitive,
and Russ tried to shoo people onto the
<a href="http://lists.perl.org/showlist.cgi?name=pod-people">pod-people mailing list</a> for further discussion of what changes should be made.
<H3><a name="Patching_perlyy">Patching perly.y</a></H3>

</P>

<P>

Jeff Pinyan 
<!-- who I can no longer avoid mentioning, because this is actually Useful Information --> asked how one should go about patching the Perl grammar in 
<CODE>perly.y</CODE>; the answer, coming in three parts from myself, Peter Prymmer and 
<a href="http://simon-cozens.org/writings/whos-who.html#SUGALSKI">Dan Sugalski</a>, is:
</P>

<P>
1) Don't. You hardly ever need to.
</P>

<P>
2) Run 
<CODE>make run_byacc</CODE> which runs the 
<CODE>byacc</CODE> parser generator, and then applies a small patch to the resulting C
file which allows dynamic memory allocation.
</P>

<P>
3) Run
<CODE>vms/vms_yfix.pl</CODE> to patch up the VMS version of the parser.
</P>

<P>
4) CC 
<CODE>perl-mvs@perl.org</CODE> so that the EBCDIC people can prepare EBCDIC-aware versions of the
parser.
<H3><a name="CvOUTSIDE">CvOUTSIDE</a></H3>

</P>

<P>

<a href="http://simon-cozens.org/writings/whos-who.html#BURLISON">Alan</a> asked what 
<CODE>CvOUTSIDE</CODE> was for; it's another undocumented flag on a CV.
<a href="http://simon-cozens.org/writings/whos-who.html#GURUSAMY">Sarathy </a> knows the answer, and it's scary:
<!-- Lexicals? Scary? Who'd a thought it? --><blockquote>Every CV that references lexicals from its outer lexical scopes needs
to be able to access that outer scope's scratchpad at run time (via
<CODE>pp_anonsub()</CODE>, 
<CODE>cv_clone2()</CODE> and 
<CODE>pad_findlex()</CODE>) to capture the lexicals
that are visible at the time the cloning happens.  In fact, all CVs need
to have this whether they have outer lexicals referenced in them or
not, given that 
<CODE>eval""</CODE> requires visibility of the outer lexical scopes.
</blockquote></P>

<P>
Hence, (I think) 
<CODE>CvOUTSIDE</CODE> is a pointer to the scratchpad of the outer lexical scope. Why is this
 important? Well, Alan's Great Subroutine Memory Leak (the problem with 
<CODE>sub x { sub {} }</CODE>) has come about because there's a reference count loop. As Sarathy
explains:
<blockquote>The problem really is that there is a reference loop.  The prototype
anonymous sub holds a reference count on the outer sub via 
<CODE>CvOUTSIDE()</CODE>.
The outer sub holds a reference count on the anonymous sub prototype
via the pad entry allocated by 
<CODE>OP_ANONCODE</CODE>.  The pad entry will be
properly freed by 
<CODE>op_clear()</CODE> if it ever gets there, which it doesn't
because of the loop.
</blockquote></P>

<P>
Sarathy had a couple of attempts at fixing this, but hasn't managed to
resolve it yet.
<H3><a name="perlxstut_Documentation">perlxstut Documentation</a></H3>

</P>

<P>

Vinh Lam reminded us that 
<CODE>perlxstut</CODE> is incomplete. Examples 6, 7, 8, and 9 are still not written. Does
anyone out there want to write them?
<H3><a name="EBCDIC_and_Unicode">EBCDIC and Unicode</a></H3>

</P>

<P>

With the assistance of Merijn Broeren and Morgan Stanley Dean Witter, I
gained access to an EBCDIC mainframe and spent a happy day sanitizing
the Unicode support on EBCDIC machines. As usual, there was some small
argument over semantics,
<!-- and, as usual, some of the more vocal participants had blatantly obviously never even attempted to implement anything like this themselves --> but the major change was that EBCDIC should be 
converted to ASCII before being upgraded to UTF8, and converted back to
EBCDIC on degradation. 
<a href="http://simon-cozens.org/writings/whos-who.html#PRYMMER">Peter Prymmer</a> seemed happy enough with what we'd been doing, and the patch went in.
The patch, and its discussion, can be found 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-03/msg00441.html">here</a>.
</P>

<P>
If you don't want to read the whole business, this is the important bit:
much of the Unicode discussion this week centered on the vexed question
of &quot;What are v-strings for?&quot;. 
<a href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-03/msg00549.html">Here</a> is the definitive answer from Larry.
<H3><a name="PERL_DL_NONLAZY">PERL_DL_NONLAZY</a></H3>

</P>

<P>

<a href="http://simon-cozens.org/writings/whos-who.html#SCHWERN">Michael Schwern</a> asked what the mysterious
<CODE>PERL_DL_NONLAZY</CODE> environment variable was for - it's set on 
<CODE>make test</CODE> but never documented. He noted that as well as being used to alter the
dynamic linking behaviour, it's used by some test suites to determine
whether or not to produce additional information - almost certainly a
misuse.
</P>

<P>
Paul Johnson explained that it passes a flag to 
<CODE>dlopen</CODE> which attempts to ensure that all functions are relocated as soon as
the shared object is loaded. Sounds complicated? In the normal, &quot;lazy&quot;
operation of the dynamic loader, the loader doesn't actually load all
the functions from the library file into memory at one go - instead, it
merely notices that it has a bunch more functions available; when a
function is called, it loads up the appropriate part of the object into
memory, and jumps to it. (Not entirely unlike the behaviour of 
<CODE>use autouse</CODE> or 
<CODE>AutoSplit</CODE>.) 
</P>

<P>
Setting [PERL_DL_NONLAZY] forces the loader to load up all functions at
once, so that it can ensure that it really does have code for all the
functions it claims to have code for; this is usually what you want to
do when testing. 
<H3><a name="Various">Various</a></H3>

</P>

<P>

Sarathy fixed the &quot;weird reset bug&quot; of last week with a clever but
untested patch; Chris Nandor dropped a bunch of good MacPerl protability
patches. Ilya finally produced his rival UTF8 regular expressions patch,
which Jarkko has been vigorously testing.
</P>

<P>
David Madison raised the 
<CODE>my $var if $x</CODE> bugbear again. Schwern's been cleaning up 
<CODE>Test::Harness</CODE>; good work as always, there. Robin Houston fixed a strange bug
regarding 
<CODE>my</CODE> variables being cleared after a 
<CODE>goto</CODE> during a three-fingered 
<CODE>for</CODE> loop. Radu Greab fixed something strange with 
<CODE>chop</CODE> and arrays. 
</P>

<P>
 There was a small but pointless discussion of C coding styles,
which concluded that you ought to leave off braces around single-statement 
blocks to 
<CODE>if</CODE> and the like if you can. 
</P>

<P>
Tony Finch complained that 
<CODE>use integer</CODE> doesn't make 
<CODE>rand</CODE> return integers;
<a href="http://simon-cozens.org/writings/whos-who.html#NEWTON">Philip Newton</a> provided a patch.
</P>

<P>
Congratulations to Raphael Manfredi, who spawned his first child 
process this week.
</P>

<P>
Until next week I remain, your humble and obedient servant,
</P>

<hr>

<a href="mailto:simon@brecon.co.uk">Simon Cozens</a>


<ul>
  <li><a href="#Notes">Notes</a>
  <li><a href="#Pod_Questions">Pod Questions</a>
  <li><a href="#Patching_perlyy">Patching perly.y</a>
  <li><a href="#CvOUTSIDE">CvOUTSIDE</a>
  <li><a href="#perlxstut_Documentation">perlxstut Documentation</a>
  <li><a href="#EBCDIC_and_Unicode">EBCDIC and Unicode</a>
  <li><a href="#PERL_DL_NONLAZY">PERL_DL_NONLAZY</a>
  <li><a href="#Various">Various</a>
</ul>
